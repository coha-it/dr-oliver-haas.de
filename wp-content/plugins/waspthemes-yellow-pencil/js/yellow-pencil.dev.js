;(function($) {

    "use strict";

    // Languages
    var lang = {};

    // Basic
    lang.back_to_menu = "Back to menu";
    lang.close_editor = "Close Editor";
    lang.saving = "Saving";
    lang.save = "Save";
    lang.saved = "Saved";
    lang.unknown = "Unknown";

    // Demo mode
    lang.live_preview_alert = "This tool is disabled in demo mode!";
    lang.save_alert = "Saving is disabled in demo mode!";

    // Notices
    lang.list_notice = "The selected element is not a list item, Select a list item to edit styles.";
    lang.list_notice1 = "Disable list style image property to use this property.";
    lang.display_notice = "This property may not work, Set \'block\' or \'inline-block\' value to display option from extra section.";
    lang.absolute_notice = "The absolute value could harm mobile view, Set absolute value just to high screen sizes with Responsive Tool.";
    lang.fixed_notice = "The fixed value could harm mobile view, Set fixed value just to high screen sizes with Responsive Tool.";
    lang.negative_margin_notice = "Negative margin value could break the website layout.";
    lang.high_position_notice = "High position value could harm mobile view, Please apply this change only to large screen sizes using the Responsive Tool.";
    lang.bg_img_notice_two = "Set a background image for using this feature.";
    lang.bg_img_notice_tree = "Set a background color or image for using this feature.";
    lang.sure = "Are you sure you want to leave the page without saving?";
    
    // messages
    lang.cantUndo = "You can\'t undo the changes while creating a new animation. Click \"reset icon\" if you want to disable any option.";
    lang.cantUndoAnimManager = "You can\'t undo the changes while animation manager on.";
    lang.cantEditor = "You can\'t use the CSS editor while creating a new animation.";
    lang.allScenesEmpty = "Please add properties to the scenes to play the animation.";
    lang.scene = "Scene";
    lang.closeAnim = "Are you sure you want to close Animation Generator without saving?";
    lang.notice = "<i class='yp-notice-icon'></i>Notice";
    lang.warning = "<i class='yp-notice-icon'></i>Warning";
    lang.none = "Default value";

    // New
    lang.empty = "empty";
    lang.rule = "rule";
    lang.type_not_available = "Can not be used on the current page.";
    lang.you_are_sure = "You are sure?";
    lang.delete_anim = "Delete Animate";
    lang.welcome_pro = "Welcome to Pro Club!";
    lang.license_activated = "License Activated! Thank you for your purchase. We are here to help! Check out <a href=\'https://yellowpencil.waspthemes.com/documentation/\' target=\'_blank\'>Plugin Docs</a> and join <a href=\'https://www.facebook.com/groups/YellowPencils/\' target=\'_blank\'>Facebook Community</a>.";

    lang.general = "General";
    lang.paragraph = "Paragraph";
    lang.heading_level = "Heading Level";
    lang.element_id = "Element ID";
    lang.tag = "Tag";
    lang.affected_els = "Selected elements";
    lang.box_sizing = "Box Sizing";
    lang.page_width = "Page Width";
    lang.page_height = "Page Height";

    lang.pseudo_class = "States&hellip;";
    lang.all_devices = "All Devices";
    lang.delay = "Delay";
    lang.duration = "Duration";
    lang.delete_t = "Delete";
    lang.add_new_anim = "Add New Animate";
    lang.sorry = "Sorry.";
    lang.all_scenes_empty = "All scenes are empty.";
    lang.animation_name = "Animation name";
    lang.save_animation = "Save Animation";
    lang.set_animation_name = "Set a name to the animation to save.";
    lang.scene_properties = "Scene Properties";
    lang.no_property_yet = "No properties yet.";
    lang.save_error = "An error occurred while saving.";
    lang.save_error_msg = "The server may be offline either server\'s maximum post limit is not enough. Please try again later.";

    lang.define_breakpoints = "defined breakpoints";
    lang.breakpoint_size = "{$1}px and {$2} screen sizes";
    lang.phones = "phones";
    lang.large_phones = "high resolution phones";
    lang.tablet_landscape_phones = "tablets & landscape phones";
    lang.tablets = "tablets";
    lang.small_desktop_tablets_phones = "low resolution desktops & tablets and phones";
    lang.medium_desktops_tablets_phones = "normal resolution desktops & tablets and phones";
    lang.large_desktops_tablets_phones = "high resolution desktops & tablets and phones";
    lang.phones_tablets_desktops = "phones & tablets and desktops";
    lang.large_phones_tablets_desktops = "high resolution phones & tablets and desktops";
    lang.landscape_phones_tablets_desktops = "landscape phones & tablets and desktops";
    lang.desktops = "desktops";
    lang.medium_large_desktops = "normal resolution desktops & high resolution desktops";
    lang.large_desktops = "high resolution desktops";

    lang.css_parse_error = "CSS Parse Error.";
    lang.css_parse_error_text = "The changes you made in the CSS editor seems to be invalid. To continue, undo changes with CTRL + Z or fix this CSS error.";

    lang.delete_media_query = "Delete {$1} Media Query?";
    lang.delete_media_query_msg = "This will only delete the media query from the current customization type.";
    lang.review_breakpoint = "Review Breakpoint";
    lang.show_in_editor = "Show In Editor";
    lang.parent_elements = "Parent Elements&hellip;";
    lang.children_elements = "Child Elements&hellip;";
    lang.select_only_this = "Select Only This";
    lang.write_css = "Write CSS";
    lang.edit_selector = "Edit Selector";
    lang.review_styles = "Review Styles";
    lang.reset_styles = "Reset Styles&hellip;";
    lang.single = "Single&hellip;";
    lang.the_element = "Element";
    lang.child_elements = "Child Elements";
    lang.template = "Template&hellip;";
    lang.global_t = "Global&hellip;";
    lang.leave = "Leave";
    lang.above_t = "above";
    lang.below_t = "below";
    lang.toggle_media_query_condition = "Toggle media query condition as {$1}";
    lang.customize_type_not_available = "This customizing type can not be used on the current page.";
    lang.cursor_warning = "This change does not appear in the editor, check it with Live Preview.";
    lang.empty_element_tree = "Select an element to show element tree.";
    lang.reset_type_msg = "You are sure to reset all styles in <strong>{$1} customization</strong>?";
    lang.reset_btn = "Yes, Reset!";

    lang.manager_msg1 = "There is no style matching with the selected element.";
    lang.manager_msg2 = "Select an item to review matching styles.";
    lang.manager_msg3 = "Single customization is empty.";
    lang.manager_msg4 = "Template customization is empty.";
    lang.manager_msg5 = "Global customization is empty.";
    lang.manager_msg6 = "There is no style in this media query.";
    lang.manager_msg7 = "There are no styles matching your search term.";
    lang.manager_msg8 = "No style found. Check again after making a few edits.";
    lang.manager_msg9 = "All styles on the current page are listed below.";
    lang.manager_msg10 = "The styles matching with the selected element are listed below.";
    lang.manager_msg11 = "Single Customization styles listed below.";
    lang.manager_msg12 = "Template Customization styles listed below.";
    lang.manager_msg13 = "Global Customization styles listed below.";
    lang.manager_msg14 = "All styles in this media query are listed below.";
    lang.manager_msg15 = "No styles were found. Check again after making a few edits.";
    lang.selector_no_match = "The selector doesn\'t match any element on this page";
    lang.all_msg = "Any screen size";
    lang.not_wp_link = "This link is not an wordpress page. You can\'t edit this page.";
    lang.external_link = "This is an external link. You can\'t edit this page.";
    lang.link_not_valid = "This link is not an wordpress page. You can\'t edit this page.";
    lang.page_loading = "Loading Editor";
    lang.page_information_cant_be_retrieved = "Page information cannot be retrieved.";
    lang.page_information_cant_be_retrieved_msg = "Please close the page and open the target page manually with YellowPencil.";


    /* ---------------------------------------------------- */
    /* Update options                                       */
    /* ---------------------------------------------------- */
    $('.fixed_right_panel_checkbox input').prop('checked', ypOption.fixed_right_panel);
    $('.show_parent_tree_checkbox input').prop('checked', ypOption.show_parent_tree);
    $('.hide_premium_options_checkbox input').prop('checked', ypOption.hide_premium_options); // Hide lite options
    $('.show_margin_padding_on_hover_checkbox input').prop('checked', ypOption.show_margin_padding_on_hover); // Showing margin & padding on hover
    $('.smart_responsive_technology_checkbox input').prop('checked', ypOption.smart_responsive_technology);
    $('.smart_important_tag_checkbox input').prop('checked', ypOption.smart_important_tag);
    $('.high_performance_checkbox input').prop('checked', ypOption.high_performance);
    $('.append_auto_comments_checkbox input').prop('checked', ypOption.append_auto_comments);


    /* ---------------------------------------------------- */
    /* Setup Ace Editor.                                    */
    /* ---------------------------------------------------- */
    window.define = window.define || ace.define;
    ace.config.set("basePath",window.aceEditorBase);
    ace.require("ace/ext/language_tools");
    var editor = ace.edit("cssData");
    editor.setTheme("ace/theme/twilight");
    editor.$blockScrolling = Infinity;
    editor.setShowPrintMargin(false);

    // enable autocompletion and snippets
    editor.setOptions({
        enableMultiselect: true,
        enableBasicAutocompletion: true,
        enableLiveAutocompletion: true,
        enableSnippets: false,
        fontSize: "14px"
    });

    // 19px line height for roboto mono.
    editor.container.style.lineHeight = "19px";

    // Editor sessions
    var sessions = {};

    // Creating Sessions for single, template and global.
    sessions.singleData = ace.createEditSession("", "ace/mode/css");
    sessions.templateData = ace.createEditSession("", "ace/mode/css");
    sessions.globalData = ace.createEditSession("", "ace/mode/css");

    // visual manager scroll setup
    var viewScroll = new PerfectScrollbar('#visual-css-content', { wheelSpeed: 0.5, suppressScrollX: true, includePadding: true, minScrollbarLength: 12 });



    /* ---------------------------------------------------- */
    /* Getting ready css data.                              */
    /* ---------------------------------------------------- */
    function getStyles(type, Cancelprocess) {

        // CSS To Data.
        if(Cancelprocess === false){

            // don't process if this is another type.
            if(isUndefined(type) == true || type == get_active_type()){

                if (mainBody.hasClass("yp-need-to-process")) {
                    process();
                }

            }

        }

        var html;

        if(isDefined(type)){
            html = iframejs.querySelector('[data-source-mode="'+type+'"]').innerHTML;
        }else{
            html = iframejs.getElementById("yp-styles-area").innerHTML;
        }

        if (html.length === 0) {
            return '';
        } else {
            return (html + " /*").replace(/\n/g, "");
        }

    }


    /* ---------------------------------------------------- */
    /* Apply the css code                                   */
    /* ---------------------------------------------------- */
    function setStyles(data, type, css) {

        data = data.replace(/\/\*/g, "\n/*").replace(/\*\//g, "*/\n");

        if(isUndefined(css)){
            css = "";
        }

        if(isDefined(type)){

            // Add updated class to current data
            if(css != "a"){
                iframe.find("[data-source-mode='"+type+"']").addClass("yp-data-updated yp-data-only-updated");
                $("#customizing-type-list li[data-value='"+type+"']").addClass("customizing-type-updated");
            }

            iframejs.querySelector('[data-source-mode="'+type+'"]').innerHTML = data;

        }else{

            // Add updated class to current data
            if(css != "a"){
                editor_data_element().addClass("yp-data-updated yp-data-only-updated");
                $(".active-customizing-list").addClass("customizing-type-updated");
            }

            iframejs.getElementById("yp-styles-area").innerHTML = data;

        }

    }


    /* ---------------------------------------------------- */
    /* Apply the css code                                   */
    /* ---------------------------------------------------- */
    function appendStyles(data, type) {

        data = data.replace(/\/\*/g, "\n/*").replace(/\*\//g, "*/\n");

        if(isDefined(type)){
            iframejs.querySelector('[data-source-mode="'+type+'"]').insertAdjacentHTML('beforeend', data);
        }else{
            iframejs.getElementById("yp-styles-area").insertAdjacentHTML('beforeend', data);
        }

    }


    /* ---------------------------------------------------- */
    /* Creating data by css.                                */
    /* ---------------------------------------------------- */
    function createStyle(css) {

        // replace
        css = css.trim().replace(/(\/\*|^)(.*?)\*\//g, "");

        // vars
        var rule,
            msize = 'desktop',
            selector = css.split("{")[0];

        // Msize and rule
        if (css.indexOf("@media") != -1) {
            msize = css.match(/@media(.*?){/g)[0].replace(/(^@media(\s+)|\{$)/g, '');
            rule = css.split("{")[2].split("}")[0];
        } else {
            rule = css.split("{")[1].split("}")[0];
        }

        // Selector
        if (selector.indexOf("@media") != -1) {
            selector = css.split("{")[1].split("{")[0];
        }

        // Rule
        rule = rule.split(":")[0];

        return "/* [rule=" + rule.trim() + "] [selector=" + get_id(selector.trim()) + "] [msize=" + msize.trim() + "] */ " + css.trim();

    }


    /* ---------------------------------------------------- */
    /* New find CSS Function.                               */
    /* ---------------------------------------------------- */
    function findStyle(data, filters) {

        filters = filters.match(/\[(.*?)\]/g);
        var dataArray = data.split("/*"),
            result = [],
            item,
            l = filters.length,
            f1 = filters[0],
            f2 = filters[1],
            f3 = filters[2];

        for (var x = 0; x < dataArray.length; x++) {

            item = dataArray[x];

            // [style] selector mean any style but be sure this is valid.
            if(l == 1 && f1 == "[style]"){
                if(item.indexOf("[msize=") == -1 || item.indexOf("[selector=") == -1 || item.indexOf("[rule=") == -1){
                    continue;
                }
            }

            if (l == 3) {
                if (item.indexOf(f1) != -1 && item.indexOf(f2) != -1 && item.indexOf(f3) != -1) {
                    result.push(item);
                }
            }

            if (l == 2) {
                if (item.indexOf(f1) != -1 && item.indexOf(f2) != -1) {
                    result.push(item);
                }
            }

            if (l == 1) {
                if (item.indexOf(f1) != -1 || f1 == "[style]") {
                    result.push(item);
                }
            }

        }

        return result;

    }


    /* ---------------------------------------------------- */
    /* Get index of CSS Rule.                               */
    /* ---------------------------------------------------- */
    function getIndex(data, filters){

        filters = filters.match(/\[(.*?)\]/g);
        var dataArray = data.split("/*"),
            item,
            l = filters.length,
            f1 = filters[0],
            f2 = filters[1],
            f3 = filters[2], firstIndex = -1;

        for (var x = 0; x < dataArray.length; x++) {

            item = dataArray[x];

            // [style] selector mean any style but be sure this is valid.
            if(l == 1 && f1 == "[style]"){
                if(item.indexOf("[msize=") == -1 || item.indexOf("[selector=") == -1 || item.indexOf("[rule=") == -1){
                    continue;
                }
            }

            if (l == 3) {
                if (item.indexOf(f1) != -1 && item.indexOf(f2) != -1 && item.indexOf(f3) != -1) {
                    firstIndex = x;
                    break;
                }
            }

            if (l == 2) {
                if (item.indexOf(f1) != -1 && item.indexOf(f2) != -1) {
                    firstIndex = x;
                    break;
                }
            }

            if (l == 1) {
                if (item.indexOf(f1) != -1 || f1 == "[style]") {
                    firstIndex = x;
                    break;
                }
            }

        }


        // Zero
        if(firstIndex == 1){
            return (firstIndex-1);

        // not negative
        }else if((firstIndex-1) > 0){
            return (firstIndex-1);

        // Push New
        }else{
            return null;
        }

    }



    /* ---------------------------------------------------- */
    /* New update CSS Function.                             */
    /* ---------------------------------------------------- */
    function updateStyle(data, filters, css) {

        filters = filters.match(/\[(.*?)\]/g);
        css = createStyle(css).replace(/^\/\*/, '');

        var dataArray = data.split("/*"),
            item,
            l = filters.length,
            f1 = filters[0],
            f2 = filters[1],
            f3 = filters[2];

        var defaultArray = [],
            maxWidth = [],
            minWidth = [];

        for (var x = 0; x < dataArray.length; x++) {

            item = dataArray[x];

            if (l == 3) {
                if (item.indexOf(f1) != -1 && item.indexOf(f2) != -1 && item.indexOf(f3) != -1) {
                    dataArray[x] = css;
                }
            }

            if (l == 2) {
                if (item.indexOf(f1) != -1 && item.indexOf(f2) != -1) {
                    dataArray[x] = css;
                }
            }

            if (l == 1) {
                if (item.indexOf(f1) != -1) {
                    dataArray[x] = css;
                }
            }

        }

        // to resort for media queries
        if (dataArray.length <= 0) {
            return data;
        }

        var size;
        for (var i = 0; i < dataArray.length; i++) {

            item = dataArray[i];

            if (item.length <= 1) {
                continue;
            }

            size = item.match(/\[msize\=(.*?)\]/)[0];

            if (size.indexOf("max-width") != -1 && size.indexOf("and") == -1) {
                maxWidth.push(item);
            } else if (size.indexOf("min-width") != -1 && size.indexOf("and") == -1) {
                minWidth.push(item);
            } else {
                defaultArray.push(item);
            }

        }

        return media_resorting(defaultArray, maxWidth, minWidth, false);

    }


    /* ---------------------------------------------------- */
    /* New remove CSS Function.                             */
    /* ---------------------------------------------------- */
    function removeStyle(data, filters) {

        filters = filters.match(/\[(.*?)\]/g);
        var dataArray = data.split("/*"),
            item,
            l = filters.length,
            f1 = filters[0],
            f2 = filters[1],
            f3 = filters[2];

        var returnArray = [];

        for (var x = 0; x < dataArray.length; x++) {

            item = dataArray[x];

            if (l == 3) {
                if (item.indexOf(f1) == -1 || item.indexOf(f2) == -1 || item.indexOf(f3) == -1) {
                    returnArray.push(item);
                }
            }

            if (l == 2) {
                if (item.indexOf(f1) == -1 || item.indexOf(f2) == -1) {
                    returnArray.push(item);
                }
            }

            if (l == 1) {
                if (item.indexOf(f1) == -1) {
                    returnArray.push(item);
                }
            }

        }

        returnArray = returnArray.filter(Boolean);
        returnArray.splice(0, 0, "");

        return returnArray.join("/*").trim();

    }


    /* ---------------------------------------------------- */
    /* New insert CSS Function.                             */
    /* ---------------------------------------------------- */
    function addStyle(data, newStyle, insertIndex){

        // Use Defaults; push as new.
        if(insertIndex == "default"){
            insertIndex = null;
        }

        newStyle = createStyle(newStyle).replace(/^\/\*/, '');

        var styleRule = newStyle.match(/\[rule\=(.*?)\]/)[0],
            styleSelector = newStyle.match(/\[selector\=(.*?)\]/)[0],
            styleSize = newStyle.match(/\[msize\=(.*?)\]/)[0];

        // Default for A
        if(styleRule == "a"){
            insertIndex = null;
        }

        var maxWidth = [],
            minWidth = [],
            defaultArray = [],
            item,
            i,
            breakSearch = false;

        if (data.length > 0) {

            var size;
            var dataArray = data.split("/*");

            for (i = 0; i < dataArray.length; i++) {

                item = dataArray[i];

                if (item.length <= 1) {
                    continue;
                }

                size = item.match(/\[msize\=(.*?)\]/)[0];

                if (size.indexOf("max-width") != -1 && size.indexOf("and") == -1) {
                    maxWidth.push(item);
                } else if (size.indexOf("min-width") != -1 && size.indexOf("and") == -1) {
                    minWidth.push(item);
                } else {
                    defaultArray.push(item);
                }

            }

        }


        if (styleSize.indexOf("max-width") != -1 && styleSize.indexOf("and") == -1) {

            // Update InsertIndex. (cos max, min, default is another array. not toggerher)
            if(insertIndex != null){
                insertIndex = insertIndex - defaultArray.length;
            }

            for (i = maxWidth.length; i--;) {

                item = maxWidth[i];

                if (item.indexOf(styleRule) != -1 && item.indexOf(styleSelector) != -1 && item.indexOf(styleSize) != -1) {
                    maxWidth[i] = newStyle;
                    breakSearch = true;
                    break;
                }

            }

            for (i = maxWidth.length; i--;) {

                if (breakSearch) {
                    break;
                }

                item = maxWidth[i];

                if (item.indexOf(styleSelector) != -1 && item.indexOf(styleSize) != -1) {
                    
                    if(insertIndex == null){
                        maxWidth.splice(i + 1, 0, newStyle); // ADD
                    }else{
                        maxWidth.splice(insertIndex, 0, newStyle); // UPDATE
                    }

                    breakSearch = true;
                    break;
                }

            }

            if (maxWidth.length === 0 || breakSearch === false) {
                
                if(insertIndex == null){
                    maxWidth.push(newStyle); // ADD
                }else{
                    maxWidth.splice(insertIndex, 0, newStyle); // UPDATE
                }

            }

        } else if (styleSize.indexOf("min-width") != -1 && styleSize.indexOf("and") == -1) {

            // Update InsertIndex. (cos max, min, default is another array. not toggerher)
            if(insertIndex != null){
                insertIndex = insertIndex - maxWidth.length - defaultArray.length;
            }

            for (i = minWidth.length; i--;) {

                item = minWidth[i];
                if (item.indexOf(styleRule) != -1 && item.indexOf(styleSelector) != -1 && item.indexOf(styleSize) != -1) {
                    minWidth[i] = newStyle;
                    breakSearch = true;
                    break;
                }

            }

            for (i = minWidth.length; i--;) {

                if (breakSearch) {
                    break;
                }

                item = minWidth[i];

                if (item.indexOf(styleSelector) != -1 && item.indexOf(styleSize) != -1) {

                    if(insertIndex == null){
                        minWidth.splice(i + 1, 0, newStyle); // ADD
                    }else{
                        minWidth.splice(insertIndex, 0, newStyle); // UPDATE
                    }

                    breakSearch = true;
                    break;
                }

            }

            if (minWidth.length === 0 || breakSearch === false) {
                
                if(insertIndex == null){
                    minWidth.push(newStyle); // ADD
                }else{
                    minWidth.splice(insertIndex, 0, newStyle); // UPDATE
                }

            }

        } else {

            breakSearch = false;

            for (i = defaultArray.length; i--;) {

                item = defaultArray[i];

                if (item.indexOf(styleRule) != -1 && item.indexOf(styleSelector) != -1 && item.indexOf(styleSize) != -1) {
                    defaultArray[i] = newStyle;
                    breakSearch = true;
                    break;
                }

            }

            for (i = defaultArray.length; i--;) {

                if (breakSearch) {
                    break;
                }

                item = defaultArray[i];

                if (item.indexOf(styleSelector) != -1 && item.indexOf(styleSize) != -1) {

                    if(insertIndex == null){
                        defaultArray.splice(i + 1, 0, newStyle); // ADD
                    }else{
                        defaultArray.splice(insertIndex, 0, newStyle); // UPDATE
                    }

                    breakSearch = true;
                    break;
                }

            }

            if (defaultArray.length === 0 || breakSearch === false) {

                if(insertIndex == null){
                    defaultArray.push(newStyle); // ADD
                }else{
                    defaultArray.splice(insertIndex, 0, newStyle); // UPDATE
                }

            }

        }

        // Sort by media and return
        return media_resorting(defaultArray, maxWidth, minWidth, false);

    }



    /* ---------------------------------------------------- */
    /* Pro Media resorting func                             */
    /* ---------------------------------------------------- */
    function media_resorting(defaultArray, maxWidth, minWidth, typeX){

        // Get data direct from styles and split here
        if(typeX == true){

            var maxWidth = [], minWidth = [], defaultArray = [], item, i , size, dataArray = getStyles().split("/*");

            for (i = 0; i < dataArray.length; i++) {

                item = dataArray[i];

                if (item.length <= 1) {
                    continue;
                }

                size = item.match(/\[msize\=(.*?)\]/)[0];

                if (size.indexOf("max-width") != -1 && size.indexOf("and") == -1) {
                    maxWidth.push(item);
                } else if (size.indexOf("min-width") != -1 && size.indexOf("and") == -1) {
                    minWidth.push(item);
                } else {
                    defaultArray.push(item);
                }

            }

        }


        // Variables
        var name, maxSizeGroups = {}, minSizeGroups = {}, maxSizeOrder, minSizeOrder, maxWidthNew = [], i, minWidthNew = [], returnValue;

        // Filtering
        maxWidth = maxWidth.filter(Boolean);
        minWidth = minWidth.filter(Boolean);


        // Group media queries on object for max Width
        for (var i = 0; i < maxWidth.length; i++) {
          name = maxWidth[i].match(/\[msize\=(.*?)\]/)[0].replace(/\D/g, '');
          if (!maxSizeGroups[name]) {
            maxSizeGroups[name] = [];
          }
          maxSizeGroups[name].push(maxWidth[i]);
        }
        
        // Sort keys
        maxSizeOrder = Object.keys(maxSizeGroups).sort(function(a, b){
            return b - a;
        });

        // Convert to array after re-order
        for(i = 0; i < maxSizeOrder.length; i++){
            maxWidthNew.push(maxSizeGroups[maxSizeOrder[i]]);
        }



        // Group media queries on object for min Width
        for (var i = 0; i < minWidth.length; i++) {
          name = minWidth[i].match(/\[msize\=(.*?)\]/)[0].replace(/\D/g, '');
          if (!minSizeGroups[name]) {
            minSizeGroups[name] = [];
          }
          minSizeGroups[name].push(minWidth[i]);
        }

        // Sort keys
        minSizeOrder = Object.keys(minSizeGroups).sort(function(a, b){
            return a - b;
        });

        // Convert to array after re-order
        for(i = 0; i < minSizeOrder.length; i++){
            minWidthNew.push(minSizeGroups[minSizeOrder[i]]);
        }


        // Object to Array
        var maxWidthNewAr = [];
        for(var i = 0; i < maxWidthNew.length; i++){

            for(var t = 0; t < maxWidthNew[i].length; t++){
                maxWidthNewAr.push(maxWidthNew[i][t]);
            }

        }

        // Object to Array
        var minWidthNewAr = [];
        for(var i = 0; i < minWidthNew.length; i++){

            for(var t = 0; t < minWidthNew[i].length; t++){
                minWidthNewAr.push(minWidthNew[i][t]);
            }

        }


        // Returning
        returnValue = defaultArray.concat(maxWidthNewAr).concat(minWidthNewAr);
        returnValue.splice(0, 0, "");

        return returnValue.join("/*").trim();

    }


    /* ---------------------------------------------------- */
    /* Replacing all prefixes                               */
    /* ---------------------------------------------------- */
    function get_default_property(id){

        if(id == "-webkit-box-pack"){
            return "justify-content";
        }else if(id == "-webkit-box-align"){
            return "align-items";
        }else if(id == "-webkit-box-flex"){
            return "flex-grow";
        }

        return id.replace(/(-webkit-|-moz-|-o-|-ms-|-khtml-)/g, "");

    }


    /* ---------------------------------------------------- */
    /* Convert property to webkit                           */
    /* ---------------------------------------------------- */
    function get_webkit_property(id){

        if(id == "justify-content"){
            return "-webkit-box-pack";
        }else if(id == "align-items"){
            return "-webkit-box-align";
        }else if(id == "flex-grow"){
            return "-webkit-box-flex";
        }

        return "-webkit-"+id.replace(/(-webkit-|-moz-|-o-|-ms-|-khtml-)/g, "");

    }


    /* ---------------------------------------------------- */
    /* Setting Customizing Type                             */
    /* ---------------------------------------------------- */
    window.cachedTypes = [];
    var firstTree = 0;
    function update_customize_type(customizingType){

        // firstTree
        firstTree++;

        var preDefined = 1;
        if(customizingType == undefined){
            customizingType = get_active_type();
            preDefined = 0;
        }

        // Set session
        if(customizingType == "single"){
            editor.setSession(sessions.singleData);
        }else if(customizingType == "template"){
            editor.setSession(sessions.templateData);
        }else{
            editor.setSession(sessions.globalData);
        }

        // Update Editor
        editor.getSession().setUseWrapMode(true);

        // register function one time only
        if(window.cachedTypes.indexOf(customizingType) == -1){

            // hide ace editor warnings, show only errors.
            var session = editor.getSession();
            session.on("changeAnnotation", function() {

                // Don't update again
                if(window.aceEditorErrorFilter == true){
                    return false;
                }

                window.cachedTypes.push(customizingType);

                var AutoComplete = false;
                if($(".ace_editor.ace_autocomplete") > 0 && $(".ace_editor.ace_autocomplete").css("display") == "none"){
                    AutoComplete = true;
                }else if($(".ace_editor.ace_autocomplete") == 0){
                    AutoComplete = false;
                }

                // Only when editor open
                if(mainBody.hasClass("yp-css-editor-active") == true && AutoComplete == false){

                    var annotations = session.getAnnotations() || [], i = annotations.length;

                    while (i--) {

                        if(annotations[i].type == "warning" || annotations[i].type == "info") {
                            annotations.splice(i, 1);
                        }else{

                            // Getting value of error
                            var line = annotations[i].row;
                            var errorLine = editor.session.getLine(line);

                            // Skip CSS Var error
                            if(/^(\s+)?\-\-\w/g.test(errorLine) == true || /var\(\-\-/g.test(errorLine) == true){

                                // delete annotations
                                annotations.splice(i, 1);

                            }

                        }

                    }

                    if(annotations.length > 0 && $(".yp-after-prefix").is(":focus") == false){
                        mainBody.addClass("css-code-unvalid");
                        $(".unvalid-css-error span").html(annotations[0].text.toLowerCase());
                    }else{
                        mainBody.removeClass("css-code-unvalid css-error-message");
                        $(".unvalid-css-error").attr("style", "");
                    }

                    window.aceEditorErrorFilter = true;
                    session.setAnnotations(Object.keys(annotations).reduce(function (array, key) {
                        return array.concat(annotations[key]);
                    }, []));
                    window.aceEditorErrorFilter = false;

                }

            });

        }

        // Active The current editor type
        if(preDefined == 0){
            $(".editor-tabs").removeClass("active");
            $(".editor-tabs[data-type-value='"+customizingType+"']").addClass("active");
        }


        // update URL too
        if (window.history.replaceState){
            if(window.location.href.split("yp_mode=").length > 0){
                if($.urlParam('yp_mode') != customizingType && firstTree > 2){

                    // Getting after yp_mode param
                    var afterMode = window.location.href.split("yp_mode=")[1];

                    // Only if defined
                    if(isDefined(afterMode)){

                        // parsing and getting
                        if(afterMode.indexOf("&") != -1){
                            afterMode = "&" + afterMode.split(/&(.+)/)[1];
                        }else{
                            afterMode = "";
                        }

                        // Update URL
                        window.history.replaceState(null, null, window.location.href.split("yp_mode=")[0] + "yp_mode=" + customizingType + afterMode);

                    }

                }
            }
        }

    }
    
    

    /* ---------------------------------------------------- */
    /* Windows                                              */
    /* ---------------------------------------------------- */
    window.setSelector = false;
    window.leftbarWidth = 46;
    window.separator = ' ';
    window.minCroppedSelector = false;
    window.YellowDelay = 5;
    window.Yellow2Delay = 10;
    window.lastTextColor = null;
    window.targetIsParentTree = false;
    window.selectedByView = false;
    window.editedByReview = false;
    window.sourceViewClick = false;
    window.resizedByPropertySize = false;
    window.licenseCheckDelay = false;
    window.responsiveFirstWasOpen = false;
    window.parentItems = '';
    window.childrenItems = '';
    window.aceEditorErrorFilter = false;
    window.idList = [];
    window.ClassList = [];
    window.allow_input_CSS_process = false;
    window.firstSelectLimit = false;
    window.newComments = [];
    window.placeholderSelector = false;
    window.mouseoverTrigger = false;
    window.getJsonNow = false;
    window.colorsReady = false;
    window.addonsCheck = false;

    window.webkitArray = ["transform-origin","backface-visibility","filter","transform","background-clip","perspective","background-size","box-sizing","animation-name","animation-iteration-count","animation-duration","animation-delay","animation-fill-mode","box-shadow","flex-direction","flex-wrap","align-content","flex-basis","align-self","flex-shrink"];


    /* ---------------------------------------------------- */
    /* Setup Default Varriables                             */
    /* ---------------------------------------------------- */
    var iframe = $('#iframe').contents();
    var iframeBody = iframe.find("body");
    var body = $(document.body).add(iframeBody);
    var mainDocument = $(document).add(iframe);
    var mainBody = $(document.body);

    // puse js
    var iframejs = document.getElementById('iframe');
    var iframeContentWindow = (iframejs.contentWindow || iframejs.contentDocument);
    iframejs = iframeContentWindow.document;

    // Create canvas for all yp elements in frame
    iframe.find("#yp-animate-data").after("<div id='yellow-pencil-canvas'></div><div id='yellow-pencil-focus-canvas'></div><div id='yellow-pencil-other-canvas'></div><div id='yellow-pencil-extra-canvas'></div>");

    // All about selected
    var paintCanvas = [];
    paintCanvas.general = iframeBody.find("#yellow-pencil-canvas");
    paintCanvas.active = iframeBody.find("#yellow-pencil-focus-canvas");
    paintCanvas.other = iframeBody.find("#yellow-pencil-other-canvas");
    paintCanvas.extra = iframeBody.find("#yellow-pencil-extra-canvas");

    // All canvases : no extra
    var paint = iframeBody.find("#yellow-pencil-canvas,#yellow-pencil-focus-canvas,#yellow-pencil-other-canvas");


    /* ---------------------------------------------------- */
    /* Disable CSS Editor                                   */
    /* ---------------------------------------------------- */
    if($(".css-editor-btn").length == 0){
        mainBody.addClass("yp-css-editor-disable");
    }

    // Hide empty property groups
    $(".yp-this-content").each(function(){
        if($(this).find(".yp-option-group").length == 0){
            $(this).parent().addClass("empty-property");
        }
    });


    /* ---------------------------------------------------- */
    /* Disable copy in CSS editor in lite                   */
    /* ---------------------------------------------------- */
    if(mainBody.hasClass("wtfv")){

        // clipboard textarea
        $("#cssData").after('<textarea id="clipboard-content"></textarea>');

        var totalCopy = 0;

        // Disable copy-paste
        editor.commands.addCommand({
            name: "breakTheEditor", 
            bindKey: "ctrl-c|ctrl-x|shift-del|cmd-c|cmd-x", 
            exec: function(){

                // Get text
                var text = editor.getSelectedText();

                // Match issue
                var textMatch = text.match(/\n/g);
                if(textMatch == null){
                    textMatch = 0;
                }else{
                    textMatch = textMatch.length;
                }

                // Limit total copy with 200 character
                if(totalCopy > 200){

                    ypMessage({title: "You are not allowed to copy CSS codes in the free version. Go premium!", animation: false,customClass: "editor-style-ok"});

                // let copy if less than 3 line and let copy if not have any rule.
                }else if(textMatch < 2 || text.indexOf(":") == -1){

                    // Count All
                    totalCopy = totalCopy + text.length;

                    // Copy Text
                    $("#clipboard-content").val(text);
                    $("#clipboard-content").select();
                    document.execCommand('copy');

                }else{

                    // Lite
                    ypMessage({title: "You are not allowed to copy CSS codes in the free version. Go premium!", animation: false,customClass: "editor-style-ok"});

                }

            }

        });


        // Disable Right-click
        editor.container.addEventListener("contextmenu", function(e) {
            e.preventDefault();
            ypMessage({title: "You are not allowed to copy CSS codes in the free version. Go premium!", animation: false,customClass: "editor-style-ok"});
            return false;
        }, false);

        // Disable drag
        editor.setOption("dragEnabled", false);

    }


    /* ---------------------------------------------------- */
    /* Dedect disabled types and disable css editor tabs    */
    /* ---------------------------------------------------- */
    $("#customizing-type-list .type-disabled").each(function(){

        var type = $(this).attr("data-value");
        $(".editor-tabs."+type+"-tab").addClass("disabled");
        $(".editor-tabs."+type+"-tab").attr("title", lang.type_not_available);

    });

    // setup tooltip
    $('.editor-tabs').tooltip({
        placement: "bottom",
        animation: false,
        container: "#cssEditorBar",
        html: true
    });
    

    /* ---------------------------------------------------- */
    /* Update On Changes                                    */
    /* ---------------------------------------------------- */
    // Change "Right Panel View"
    $(".fixed_right_panel_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            // Enable fixed panel
            mainBody.addClass("yp-fixed-right-panel");
            draw_iframe();
            gui_update();
            draw();
            update_gradient_pointers();

            ypOption.fixed_right_panel = true;

            if(e.originalEvent){
                save_option('fixed_right_panel', "true");
            }

        // Disabled
        }else{

            // Disable fixed panel
            mainBody.removeClass("yp-fixed-right-panel");
            panel_toggle(true);
            draw_iframe();
            gui_update();
            draw();
            update_gradient_pointers();

            ypOption.fixed_right_panel = false;

            if(e.originalEvent){
                save_option('fixed_right_panel', "false");
            }

        }

    });


    // Change "Show Parent Tree"
    $(".show_parent_tree_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            mainBody.addClass("yp-parent-tree-visible");

            ypOption.show_parent_tree = true;

            // Non first load
            if(e.originalEvent){

                parent_tree_bar();
                
                save_option('show_parent_tree', "true");

            }



        // Disabled
        }else{

            mainBody.removeClass("yp-parent-tree-visible");

            ypOption.show_parent_tree = false;

            if(e.originalEvent){
                save_option('show_parent_tree', "false");
            }

        }

    });


    // Change "Hide Lite Options"
    $(".hide_premium_options_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            // If animation option is active
            if($("li.animation-option").hasClass("active")){
                $("li.animation-option.active > h3").trigger("click"); // back to main before hide animations
            }

            $("#font-family-group,#color-group,#background-color-group,#background-image-group,#width-group,#height-group,li.animation-option,.animation-manager-btn").hide();

            $("li.animation-option").addClass("disabled");

            // visible method
            $(".yp-badge.yp-lite").css("visibility", "hidden");

            ypOption.hide_premium_options = true;

            if(e.originalEvent){
                save_option('hide_premium_options', "true");
            }

        // Disabled
        }else{

            $("#font-family-group,#color-group,#background-color-group,#background-image-group,#width-group,#height-group,.animation-manager-btn").show();

            // If any option is active, so dont snow animation option directly
            if($(".yp-editor-list > li.active").length == 0){
                $("li.animation-option").removeClass("disabled").show();
            }else{
                 $("li.animation-option").removeClass("disabled").hide();
            }

            // Visible method
            $(".yp-badge.yp-lite").css("visibility", "visible");

            ypOption.hide_premium_options = false;

            if(e.originalEvent){
                save_option('hide_premium_options', "false");
            }

        }

    });


    // Change "Smart Responsive Technology"
    $(".smart_responsive_technology_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            ypOption.smart_responsive_technology = true;

            if(e.originalEvent){
                save_option('smart_responsive_technology', "true");
            }

        // Disabled
        }else{

            ypOption.smart_responsive_technology = false;

            if(e.originalEvent){
                save_option('smart_responsive_technology', "false");
            }

        }

    });


    // Change "Smart Important Tag"
    $(".smart_important_tag_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            ypOption.smart_important_tag = true;

            if(e.originalEvent){
                save_option('smart_important_tag', "true");
            }

        // Disabled
        }else{

            ypOption.smart_important_tag = false;

            if(e.originalEvent){
                save_option('smart_important_tag', "false");
            }

        }

    });


    // Change "Show Margin & Padding On Hover"
    $(".show_margin_padding_on_hover_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            ypOption.show_margin_padding_on_hover = true;

            if(e.originalEvent){
               save_option('show_margin_padding_on_hover', "true");
            }

        // Disabled
        }else{

            ypOption.show_margin_padding_on_hover = false;

            if(e.originalEvent){
                save_option('show_margin_padding_on_hover', "false");
            }

        }

    });


    // Change "High Performance"
    $(".high_performance_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            ypOption.high_performance = true;
            body.addClass("yp-high-performance");

            if(e.originalEvent){
               save_option('high_performance', "true");
            }

        // Disabled
        }else{

            ypOption.high_performance = false;
            body.removeClass("yp-high-performance");

            // Draw again cos was using outline.
            if(is_content_selected()){
                draw();
            }

            if(e.originalEvent){
                save_option('high_performance', "false");
            }

        }

    });


    // Change "Append Auto Comments"
    $(".append_auto_comments_checkbox input").change(function(e){

        // Enabled
        if($(this).is(":checked")){

            ypOption.append_auto_comments = true;

            if(e.originalEvent){
               save_option('append_auto_comments', "true");
            }

        // Disabled
        }else{

            ypOption.append_auto_comments = false;

            if(e.originalEvent){
                save_option('append_auto_comments', "false");
            }

        }

    });


    /* ---------------------------------------------------- */
    /* Options On Load                                      */
    /* ---------------------------------------------------- */
    // parent-tree visible or not visible
    if(ypOption.show_parent_tree == true){
        $(".show_parent_tree_checkbox input").prop('checked', true);
        $(".show_parent_tree_checkbox input").trigger("change");
    }


    // loading as fixed mode or no
    if(ypOption.fixed_right_panel == true){
        $(".fixed_right_panel_checkbox input").prop('checked', true);
        $(".fixed_right_panel_checkbox input").trigger("change");
    }


    // Hides preimum options on lite options
    if(ypOption.hide_premium_options == true){
        $(".hide_premium_options_checkbox input").prop('checked', true);
        $(".hide_premium_options_checkbox input").trigger("change");
    }


    // Adds High Performance Body Class
    if(ypOption.high_performance == true){
        $(".high_performance_checkbox input").prop('checked', true);
        $(".high_performance_checkbox input").trigger("change");
    }


    /* ---------------------------------------------------- */
    /* Save New Options With Ajax                           */
    /* ---------------------------------------------------- */
    function save_option(name, value){

        // Stop on demo and live mode
        if(mainBody.hasClass("yp-yellow-pencil-demo-mode")){
            return false;
        }

        // Sending value with Ajax
        $.post( ajaxurl, {
            action: "yp_live_save_option",
            yp_option_name: name,
            yp_option_value: value
        });

    }


    /* ---------------------------------------------------- */
    /* Loading Options                                      */
    /* ---------------------------------------------------- */
    if($.urlParam('yp_load_popup') != null){

        // Load customize type iframe after a white.
        setTimeout(function(){
            $("#yp-current-page").trigger("click");
        }, 10);

    }



    /* ---------------------------------------------------- */
    /* Adding yp-animating class to all animating elements  */
    /* ---------------------------------------------------- */
    iframe.find(window.basic_not_selector).on('animationend webkitAnimationEnd oanimationend MSAnimationEnd',function(){

        // Stop if any yp animation tool works
        if(body.hasClass("yp-anim-creator") || is_animation_manager()){
            return false;
        }

        var element = $(this);

        // remove animating class.
        if(element.hasClass("yp-animating")){
            element.removeClass("yp-animating");
        }

        // Set outline selected style if selected element has animating.
        if(element.hasClass("yp-selected") && is_content_selected()){
            body.removeClass("yp-has-transform");
            draw();
        }

        return false;

    });


    // Hide these propertyies settings as default            
    $("#min-width-group .yp-after,#min-height-group .yp-after,#max-width-group .yp-after,#max-height-group .yp-after").css("display", "none");


    /* ---------------------------------------------------- */
    /* Wireframe Button                                     */
    /* ---------------------------------------------------- */
    $(".yp-wireframe-btn").click(function(){

        body.toggleClass("yp-wireframe-mode");

    });



    /* ---------------------------------------------------- */
    /* Check Undoable / Redoable                            */
    /* ---------------------------------------------------- */
    check_undoable_history();


    /* ---------------------------------------------------- */
    /* Animation Manager: Play                              */
    /* ---------------------------------------------------- */
    $(".yp-anim-control-play").on("click",function(){

        if($(this).hasClass("active")){
            return false;
        }

        body.addClass("yp-animate-manager-playing yp-clean-look yp-hide-borders-now");

        // Find largest line for play/stop.
        var maxWidth = Math.max.apply( null, $( '.yp-anim-process-inner' ).map( function (){
            return $( this ).outerWidth( true );
        }).get() );


        var s = (parseFloat(maxWidth)/100);
        $("#yp-animate-helper").html("@-webkit-keyframes playingBorder{from{left: 0px;}to{left:"+maxWidth+"px;}}@keyframes playingBorder{from{left: 0px;}to{left:"+maxWidth+"px;}}");

        $(".yp-anim-playing-border").css("animation-duration",s+"s").addClass("active");

        $(this).addClass("active");

        var S_inMS = (s*1000);
        clear_animation_timer();

        window.animationTimer3 = setTimeout(function(){
            $(".yp-anim-control-pause").trigger("click");
        },S_inMS);


        // Playing over width
        $(".yp-anim-playing-over").css("width",maxWidth+$(window).width());


        // Play animations
        var types = ["single", "template", "global"];
        for(var t = 0; t < types.length; t++){

            var animationNameStyles = findStyle(getStyles(types[t], false), "[rule=animation-name]");
            var data, selector;

            for(var i = 0; i < animationNameStyles.length; i++){

                data = animationNameStyles[i].replace(/(\/\*(.*?)\*\/|\n)/g, "");

                selector = esc_data_selector(data);
                selector = selector.replace(/\.(yp_onscreen|yp_hover|yp_click|yp_focus)/g, '');

                iframe.find(selector).each(function(){
                    $(this).addClass("yp_hover yp_focus yp_click yp_onscreen");
                });

            }

        }

        // Counter
        //yp-counter-min
        //yp-counter-second
        //yp-counter-ms
        var min = 0;
        window.animMinC = setInterval(function(){

           // min
           min = min+1;if(ms == 59){ms = 0;}
           
           var result = min;
           if(min < 10){
           result = "0"+min;
           }

           $(".yp-counter-min").text(result);

        },60000);

        var second = 0;
        window.animSecC = setInterval(function(){

           // Sc
           second = second+1;
           
           var result = second;
           if(second < 10){
           result = "0"+second;
           }
           $(".yp-counter-second").text(result);

        },1000);

        var ms = 0;
        window.animMsC = setInterval(function(){

           // Ms
           ms = ms+1;if(ms == 99){ms = 0;}

           var result = ms;
           if(ms < 10){
           result = "0"+ms;
           }
           $(".yp-counter-ms").text(result);

        },1);

    });


    /* ---------------------------------------------------- */
    /* Animation Manager: Pause                             */
    /* ---------------------------------------------------- */
    $(".yp-anim-control-pause").on("click",function(){

        clearTimeout(window.yp_anim_player);

        $(".yp-anim-playing-border").removeClass("active");
        $(".yp-anim-control-play").removeClass("active");

        // Pause animations
        var types = ["single", "template", "global"];
        for(var t = 0; t < types.length; t++){

            var animationNameStyles = findStyle(getStyles(null, false), "[rule=animation-name]");
            var data, selector;

            for(var i = 0; i < animationNameStyles.length; i++){

                data = animationNameStyles[i].replace(/(\/\*(.*?)\*\/|\n)/g, "");
                    
                selector = esc_data_selector(data);
                selector = selector.replace(/\.(yp_onscreen|yp_hover|yp_click|yp_focus)/g, '');

                iframe.find(selector).each(function(){
                    $(this).removeClass("yp_hover yp_focus yp_click yp_onscreen");
                });

            }

        }

        body.removeClass("yp-animate-manager-playing yp-clean-look yp-hide-borders-now");

        //yp-counter-min
        //yp-counter-second
        //yp-counter-ms
        $(".yp-counter-min").text("00");
        $(".yp-counter-second").text("00");
        $(".yp-counter-ms").text("00");
        clearInterval(window.animMinC);
        clearInterval(window.animSecC);
        clearInterval(window.animMsC);

    });

    
    /* ---------------------------------------------------- */
    /* Close Animation Manager                          */
    /* ---------------------------------------------------- */
    $(".yp-anim-control-close,.yp-visual-editor-link").on("click",function(){
        $(".animation-manager-btn").trigger("click");
    });


    /* ---------------------------------------------------- */
    /* Open Animation Manager                               */
    /* ---------------------------------------------------- */
    $(".animation-manager-btn").on("click",function(){

         body.toggleClass("yp-animate-manager-active");
         $(".yp-animate-manager").toggle();
         $(".yp-anim-control-pause").trigger("click");

         if(!$(this).hasClass("active")){

            close_visual_manager();

            animation_manager();

            // Find largest line for play/stop.
            var maxWidth = Math.max.apply( null, $( '.yp-anim-process-inner' ).map( function (){
                return $( this ).outerWidth( true );
            }).get() );

            // Always add +$(window).width() to animate bar width on start.
            $(".yp-anim-process-bar-area").width(maxWidth+$(window).width());

         }

        if($(".animation-option.active").length > 0){
            $(".animation-option.active h3").trigger("click");
            $(".animation-option.active").removeAttr("data-loaded");
        }

        insert_default_options();

        draw();

    });


    /* ---------------------------------------------------- */
    /* Animation Manager: delete animate                    */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", ".yp-control-trash", function() {
        $(this).parent().tooltip('hide');
        $(this).tooltip('show');
    });


    /* ---------------------------------------------------- */
    /* Animation manager: delete animate                    */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-control-trash", function() {

        var that = $(this);

        ypMessage({
          title: lang.you_are_sure,
          showCancelButton: true,
          confirmButtonText: lang.delete_anim,
          closeOnConfirm: true,
          animation: false,
          customClass: "editor-style",
        },function(){

            that.parent(".yp-anim-process-bar").prev(".yp-anim-process-bar-delay").remove();
            that.parent(".yp-anim-process-bar").remove();

            body.addClass("yp-anim-removing");

            $(".yp-delay-zero").each(function(){

                var allLeft = $(".yp-anim-process-inner").offset().left-5;
                var left = $(this).next(".yp-anim-process-bar").offset().left-allLeft;
                $(this).css("left",left);

                $(this).next(".yp-anim-process-bar").addClass("yp-anim-has-zero-delay");

            });

            update_animation_manager();

            body.removeClass("yp-anim-removing");
            
            animation_manager();

        });

    });

    
    /* ---------------------------------------------------- */
    /* get selected element object                          */
    /* ---------------------------------------------------- */
    function get_selected_element(){

        return iframe.find(".yp-selected");

    }


    /* ---------------------------------------------------- */
    /* Fake Swal function until load real Swal function     */
    /* ---------------------------------------------------- */
    function ypMessage(options, func){

        // If Swal not ready
        if(window.addonsCheck == false){

            // If text not available
            if(options.text == undefined){

                // Title
                alert(options.title);

            // or
            }else{

                // Text
                alert(options.text);

            }

        // Use swal if ready 
        }else{

            // Swal function
            swal(options, func);

        }

    }


    /* ---------------------------------------------------- */
    /* Update Editor On Focus                               */
    /* ---------------------------------------------------- */
    if(!mainBody.hasClass("yp-yellow-pencil-demo-mode")){

        // Don't make it on demo mode.
        $(window).add($(iframeContentWindow)).focus(function(){

            // License checker
            if(mainBody.hasClass("wtfv") && mainBody.hasClass("yp-mouseleave") && mainBody.hasClass("yp-iframe-mouseleave") && window.licenseCheckDelay == false){

                $.post(ajaxurl, {
                    action: "yp_check_license",
                }).done(function(data){
                    if(data == "1"){
                        body.removeClass("wtfv");
                        $(".yp-popup-background,.yp-info-modal").hide();
                        ypMessage({title: lang.welcome_pro,text: lang.license_activated,animation: false,customClass: "editor-style-ok", html:true});
                    }
                });

                window.licenseCheckDelay = true;

                // max 1 check in 10 seconds
                setTimeout(function(){
                    window.licenseCheckDelay = false;
                }, 10000);

            }

        });

    }


    /* ---------------------------------------------------- */
    /* IS Functions List                                    */
    /* ---------------------------------------------------- */
    function is_content_selected(){

        return mainBody.hasClass("yp-content-selected");

    }

    function is_dragging(){

        return mainBody.hasClass("yp-dragging");

    }

    function is_resizing(){

        return mainBody.hasClass("yp-element-resizing");

    }

    function is_visual_editing(){

        return mainBody.hasClass("yp-visual-editing");

    }

    function is_responsive_mod(){

        return mainBody.hasClass("yp-responsive-device-mode");

    }

    function is_animate_creator(){

        return mainBody.hasClass("yp-anim-creator");

    }

    function is_animation_manager(){

        return mainBody.hasClass("yp-animate-manager-active");

    }

    function get_active_type(){
        return $(".active-customizing-list").attr("data-value");
    }
        

    /* ---------------------------------------------------- */
    /* Delete the editor classes by class List              */
    /* ---------------------------------------------------- */
    function get_cleaned_classes(el,oldArray){

        var resultArray = [];

        // Element Classes
        var classes = el.attr("class");

        // Is defined?
        if(isDefined(classes)){

            // Cleaning all YellowPencil classes.
            classes = class_cleaner(classes);

            // Clean spaces
            classes = space_cleaner(classes);

            // If not empty
            if(classes.length >= 1){

                var classesArray = get_classes_array(classes);

                // Be sure there have more class then one.
                if(classesArray.length > 0){

                    // Each
                    for(var io = 0;io < classesArray.length; io++){

                        // Clean spaces
                        var that = space_cleaner(classesArray[io]);

                        // continue If not have this class in data
                        if(resultArray.indexOf(that) == -1 && oldArray.indexOf(that) == -1 && that.length >= 1){

                            // Push.
                            resultArray.push(that);

                        }

                    }

                }else{

                    // continue If not have this class in data
                    if(resultArray.match(classes) == -1 && oldArray.indexOf(classes) == -1){

                        // Push
                        resultArray.push(classes);

                    } // If

                } // else

            } // not empty.

        } // IsDefined

        // return.
        return resultArray;

    }

    
    /* ---------------------------------------------------- */
    /* Updating Design information                          */
    /* ---------------------------------------------------- */
    function update_design_information(type){

        // Was wireframe?
        var washaveWireFrame = false;

        // Check wireframe
        if(body.hasClass("yp-wireframe-mode")){
            washaveWireFrame = true;
            body.removeClass("yp-wireframe-mode");
        }

        var elements, appendData, i, el;

        // TYPOGRAPHY --------
        if(type == 'typography'){

            // create empty array
            window.colorJsonList = [];

            // Delete Old
            $(".info-color-scheme-list,.info-font-family-list,.info-animation-list,.info-basic-typography-list,.info-image-list").empty();

            // Get elements as variable.
            var colorlist = $(".info-color-scheme-list"),
            familylist = $(".info-font-family-list"),
            imagelist = $(".info-image-list"),
            animatelist = $(".info-animation-list"),
            typographyList = $(".info-basic-typography-list");

            var family, bodyFamily, paragraphFamily;

            // Append general elements
            iframeBody.append("<h1 id='yp-heading-test-level-1'></h1><h2 id='yp-heading-test-level-2'></h2><h3 id='yp-heading-test-level-3'></h3><h4 id='yp-heading-test-level-4'></h4><h5 id='yp-heading-test-level-5'></h5><h6 id='yp-heading-test-level-6'></h6><h6 id='yp-paragraph-test'></h6>");

            // Font Sizes
            var paragraphElement = iframeBody.find("#yp-paragraph-test"),
            bodyFontSize = (Math.round( parseFloat( iframeBody.css("fontSize") ) * 10 ) / 10),
            paragraphFontSize = (Math.round( parseFloat( paragraphElement.css("fontSize") ) * 10 ) / 10);

            // Font family
            bodyFamily = iframeBody.css("fontFamily");
            paragraphFamily = paragraphElement.css("fontFamily");


            // Update typography information
            typographyList
            .append('<li><span class="typo-list-left">'+lang.general+' (body)</span><span class="typo-list-right"><span>'+bodyFontSize+'px, '+get_font_name(bodyFamily)+'</span></span></li>')
            .append('<li><span class="typo-list-left">'+lang.paragraph+'</span><span class="typo-list-right"><span>'+paragraphFontSize+'px, '+get_font_name(paragraphFamily)+'</span></span></li>');


            // Delete created element. (Created only for test)
            paragraphElement.remove();

            appendData = '';

            // Update Heading tags. h1 > h6
            for(i = 1; i <= 6; i++){

                el = iframeBody.find("#yp-heading-test-level-"+i);
                var size = parseFloat(el.css("fontSize"));
                size = Math.round( size * 10 ) / 10;
                family = el.css("fontFamily");

                appendData += '<li><span class="typo-list-left">'+lang.heading_level+' '+i+'</span><span class="typo-list-right"><span>'+size+'px, '+get_font_name(family)+'</span></span></li>';

                el.remove();

            }

            // append after the loop
            typographyList.append(appendData);


            // Each all elements for find what we need.
            var colorArray = [];
            var familyArray = [];
            var animatedArray = [];
            var imageArray = [];
            
            elements = iframeBody.find(get_all_elements());

            // Each
            for(i = 0; i < elements.length; i++){

                if(i > 10000){
                    break;
                }

                // Element
                el = $(elements[i]);

                // Filter font family elements.
                family = get_font_name(el.css("fontFamily")).toLowerCase();

                // filter same font families
                if(familyArray.indexOf(family) == -1){
                    familyArray.push(family);
                }

                // Filter colored elements.
                var color = el.css("backgroundColor").toLowerCase().replace(/ /g,"");
                if(color != 'transparent' && color != 'rgb(255,255,255)' && color != 'rgba(0,0,0,0)' && color != 'rgba(255,255,255,0)'){
                    colorArray.push(color);
                }

                // Image
                if(el.css("background-image").indexOf("http") != -1){

                    var tImage = el.css("background-image");

                    // Get URL Content
                    if(/url\((\"|\')?(.*?)(\"|\')?\)/i.test(tImage) == true){
                        imageArray.push(tImage.match(/url\((\"|\')?(.*?)(\"|\')?\)/i)[0].replace(/^url\(("|'|)/g, "").replace(/("|'|)\)$/g, ""));
                    }

                }

                if(el.prop("tagName") == "IMG"){

                    var src = el.attr("src");

                    // Use data-src if valid
                    if(el.hasAttr("data-src")){
                        src = el.attr("data-src");
                    }

                    // Array
                    if(src != null && src != "" && src != undefined){
                        imageArray.push(src);
                    }

                }

            }

            // Filter animated elements.
            var animationNameStyles = findStyle(getStyles(null, false), "[rule=animation-name]");
            var data, animate;
            for(i = 0; i < animationNameStyles.length; i++){

                data = animationNameStyles[i].replace(/(\/\*(.*?)\*\/|\n)/g, "");

                animate = esc_data_value(data);

                if(animatedArray.indexOf(animate) == -1){
                    animatedArray.push(animate);
                }

            }


            appendData = '';
            var colorAdded = [];

            // Apply colors
            for(i = 0; i < colorArray.length; i++){

                if(colorAdded.indexOf(colorArray[i]) != -1){
                    continue;
                }

                var sameColor = 0;
                for (var l = 0; l < colorArray.length; l++) {
                    if (colorArray[l] == colorArray[i]) {
                        sameColor++;
                    }
                }

                var ratio = (sameColor*100)/colorArray.length;

                colorAdded.push(colorArray[i]);

                // add to global list
                window.colorJsonList.push(colorArray[i]);

                appendData += '<div data-width="'+ratio+'" data-color="'+colorArray[i]+'" style="width:'+ratio+'%;background-color:'+colorArray[i]+';"></div>';

            }

            colorlist.append(appendData);

            appendData = '';

            var imageArray2 = [];
            $.each(imageArray, function(i, el){
                if($.inArray(el, imageArray2) === -1) imageArray2.push(el);
            });

            // Update images
            for(i = 0; i < imageArray2.length; i++){
                appendData += "<img src='"+imageArray2[i]+"' />";
            }

            if(appendData == ""){
                imagelist.prev("h3").remove();
                imagelist.remove();
            }else{
                imagelist.append(appendData);
            }

            appendData = '';

            // Update fonts
            for(i = 0; i < familyArray.length; i++){
                appendData += "<li>"+familyArray[i]+"</li>";
            }

            familylist.append(appendData);

            appendData = '';

            // Update animations.
            for(i = 0; i < animatedArray.length; i++){
                appendData += "<li>"+animatedArray[i]+"</li>";
            }

            animatelist.append(appendData);

            // Hide animations heading if empty
            if(animatedArray.length == 0){
                $("#animations-heading").hide();
            }else{ // show
                $("#animations-heading").show();
            }

        // ELEMENT --------
        }else if(type == "element"){

            // Cache elements
            var elementMain = $(".info-element-general"),
            elementClasseslist = $(".info-element-class-list"),
            elementSelectorList = $(".info-element-selector-list");

            // Clean Old data
            $(".info-element-general,.info-element-class-list,.info-element-selector-list").empty();

            // if is element Section
            if(is_content_selected()){

                // Hide and show some sections in design information
                $(".info-no-element-selected").hide();
                $(".info-element-selected-section").show();
                $("info-element-selector-section").hide();


                // cache selected element
                var selectedEl = get_selected_element();
                var selectedID = selectedEl.attr("id");


                // Getting element ID.
                if(isDefined(selectedID)){

                    // Is valid?
                    if(selectedID !== ''){

                        // Append
                        elementMain.append('<li><span class="typo-list-left">'+lang.element_id+'</span><span class="typo-list-right"><span>#'+selectedID+'</span></span></li>');

                    }

                }

                // Append Tag name
                elementMain.append('<li><span class="typo-list-left">'+lang.tag+'</span><span class="typo-list-right"><span>'+selectedEl.prop("tagName")+'</span></span></li>');


                // Append Affected count
                elementMain.append('<li><span class="typo-list-left">'+lang.affected_els+'</span><span class="typo-list-right"><span>'+(parseInt(iframeBody.find(".yp-selected-others").length)+1)+'</span></span></li>');


                // Get class Array
                var classSelfArray = get_cleaned_classes(selectedEl,[]);

                var x;

                appendData = '';

                // Append all classes.
                for(x = 0; x < classSelfArray.length; x++){

                    // Append
                    appendData += "<li>."+classSelfArray[x]+"</li>";

                }

                elementClasseslist.append(appendData);


                // Hide class section if empty.
                if(elementClasseslist.find("li").length === 0){
                    $(".info-element-classes-section").hide();
                }else{
                    $(".info-element-classes-section").show();
                }


                // Current Selector
                elementSelectorList.append('<li>'+get_current_selector()+'</li>');


                // Create dom data. For show DOM HTML in Design information tool
                var clone = selectedEl.clone();


                // Clean basic position relative style from clone
                if(isDefined(clone.attr("style"))){

                    // Trim Style
                    var trimCloneStyle = clone.attr("style").replace(/position:(\s*?)relative(\;?)|animation-fill-mode:(\s*?)(both|forwards|backwards|none)(\;?)/g,"");

                    // Remove Style Attr if is empty.
                    if(trimCloneStyle == ''){
                        clone.removeAttr("style");
                    }else{
                        clone.attr("style",trimCloneStyle);
                    }

                }

                // Remove Class Attr.
                clone.removeAttr("class");


                // Just add valid classes.
                for(x = 0; x < classSelfArray.length; x++){

                    // addClass.
                    clone.addClass(classSelfArray[x]);

                }

                // Dom Content.
                clone.html("...");

                // Get.
                var str = $("<div />").append(clone).html();

                // Set
                $(".info-element-dom").val(str);

                // Box Model
                update_box_model();


            // Show there no element selected section.
            }else{

                $(".info-no-element-selected").show();

                $(".info-element-selected-section").hide();

            }

        // ADVANCED
        }else{

            // Delete Old
            $(".info-basic-size-list").empty();

            // Get elements as variable.
            var sizelist = $(".info-basic-size-list"),
            globalclasslist = $(".info-global-class-list"),
            globalidlist = $(".info-global-id-list");


            // Each all elements for find what we need.
            var classArray = [];
            var idArray = [];
            var boxSizingArray = [];
            
            elements = iframeBody.find(get_all_elements());

            // Each
            for(i = 0; i < elements.length; i++){

                if(i > 10000){
                    break;
                }

                // Element
                el = $(elements[i]);

                // Get box sizing
                if(i < 20){ // Get only on first 20 elements. no need to more.
                    var boxSizing = (el.css("boxSizing"));
                    if(isDefined(boxSizing)){

                        boxSizing  = $.trim(boxSizing);

                        if(boxSizingArray.indexOf(boxSizing) == -1){
                            boxSizingArray.push(boxSizing);
                        }

                    }
                }

                // Get Cleaned classes.
                var arrayClassAll = get_cleaned_classes(el,classArray);

                // Concat if not empty.
                if(arrayClassAll.length > 0){
                    classArray = classArray.concat(arrayClassAll);
                }

                var id = el.attr("id");

                // is defined
                if(isDefined(id)){

                    // continue If not have this class in data
                    if(idArray.indexOf(id) == -1){

                        // Push
                        idArray.push(id);

                    }

                }

            }

            // Append Size information to size section.
            sizelist.append('<li><span class="typo-list-left">'+lang.box_sizing+'</span><span class="typo-list-right"><span>'+boxSizingArray.toString()+'</span></span></li>')
            .append('<li><span class="typo-list-left">'+lang.page_width+'</span><span class="typo-list-right"><span>'+(parseInt(iframe.width())+window.leftbarWidth)+'px</span></span></li>')
            .append('<li><span class="typo-list-left">'+lang.page_height+'</span><span class="typo-list-right"><span>'+iframe.height()+'px</span></span></li>');


            appendData = '';

            // Append classes
            for(i = 0; i < classArray.length; i++){
                appendData += "<li>."+classArray[i]+"</li>";
            }

            globalclasslist.append(appendData);

            appendData = '';

            // Append ids
            for(i = 0; i < idArray.length; i++){

                if(class_cleaner(idArray[i]) == ""){
                    continue;
                }

                appendData += "<li>#"+idArray[i]+"</li>";
            }

            globalidlist.append(appendData);

        }

        // Active wireframe if was active before open.
        // Notice: This function close wireframe for getting colors and details of the elements.
        if(washaveWireFrame === true){
            body.addClass("yp-wireframe-mode");
        }

        // setup tooltip and copy api
        setup_color_scheme_copy();

    }


    /* ---------------------------------------------------- */
    /* Setup copy color scheme API                          */
    /* ---------------------------------------------------- */
    function setup_color_scheme_copy(){

        // copy on click
        new ClipboardJS('.info-color-scheme-list div', {
            text: function(trigger) {
                return get_color(trigger.getAttribute('data-color'));
            }
        });

        // destory old
        $('.info-color-scheme-list > div').tooltip("destroy");

        // color scheme copy tooltip
        $('.info-color-scheme-list > div').tooltip({
            animation: true,
            trigger: "manual",
            container: ".advanced-info-box-inner",
            html: true
        });

        $('.info-color-scheme-list > div').on("mouseenter", function(){
            $(this).attr("data-original-title", get_color($(this).attr("data-color"))).tooltip('fixTitle').tooltip("show");
        });

        $('.info-color-scheme-list > div').on("click", function(){
            $(this).attr("data-original-title", "Copied!").tooltip('fixTitle').tooltip("show");
        });

        $('.info-color-scheme-list > div').on("mouseleave", function(){
            $(this).tooltip("hide");
        });


        // ----------------
        // setup page assents click copy

        // copy on click
        new ClipboardJS('.info-image-list img', {
            text: function(trigger) {
                return trigger.getAttribute('src');
            }
        });

        // destory old
        $('.info-image-list img').tooltip("destroy");

        // page assents copy tooltip
        $('.info-image-list img').tooltip({
            placement: 'top',
            animation: true,
            trigger: "manual",
            container: ".advanced-info-box-inner",
            html: true
        });

        $('.info-image-list img').on("mouseenter", function(){
            $(this).attr("data-original-title", "Copy").tooltip('fixTitle').tooltip("show");
        });

        $('.info-image-list img').on("click", function(){
            $(this).attr("data-original-title", "Copied!").tooltip('fixTitle').tooltip("show");
        });

        $('.info-image-list img').on("mouseleave", function(){
            $(this).tooltip("hide");
        });

    }



    /* ---------------------------------------------------- */
    /* Update Box Model                                     */
    /* ---------------------------------------------------- */
    function update_box_model(){

        // Element
        var el = get_selected_element();

        // Margin
        $(".model-margin-top").text(parseInt(el.css("marginTop")));
        $(".model-margin-right").text(parseInt(el.css("marginRight")));
        $(".model-margin-bottom").text(parseInt(el.css("marginBottom")));
        $(".model-margin-left").text(parseInt(el.css("marginLeft")));

        // Padding Model
        $(".model-padding-top").text(parseInt(el.css("paddingTop")));
        $(".model-padding-right").text(parseInt(el.css("paddingRight")));
        $(".model-padding-bottom").text(parseInt(el.css("paddingBottom")));
        $(".model-padding-left").text(parseInt(el.css("paddingLeft")));

        // Border Model
        $(".model-border-top").text(parseInt(el.css("borderTopWidth")));
        $(".model-border-right").text(parseInt(el.css("borderRightWidth")));
        $(".model-border-bottom").text(parseInt(el.css("borderBottomWidth")));
        $(".model-border-left").text(parseInt(el.css("borderLeftWidth")));

        // Size Model
        $(".model-size").text(parseInt(el.width()) + " x " + parseInt(el.height()));

    }


    /* ---------------------------------------------------- */
    /* Lock Properties                                      */
    /* ---------------------------------------------------- */
    $(".lock-btn").on("click",function(){

        // Toggle active
        $(this).toggleClass("active");

        // Close property phone
        $(this).parent().find(".property-size-tabs-visible .phone-icon").trigger("click");

    });


    /* ---------------------------------------------------- */
    /* Getting first Font Family                            */
    /* ---------------------------------------------------- */
    function get_font_name(family){

        if(family.indexOf(",") != -1){
            family = family.split(",")[0];
        }

        family = $.trim(family).replace(/\W+/g, " ");

        return $.trim(family);

    }


    /* ---------------------------------------------------- */
    /* Design information: Close                            */
    /* ---------------------------------------------------- */
    $(".advanced-close-link").on("click",function(){
        $(".advanced-info-box").hide();
        $(".info-btn").removeClass("active");
    });


    /* ---------------------------------------------------- */
    /* Design information: Advanced / Info Section          */
    /* ---------------------------------------------------- */
    $(".info-btn").on("click",function(){

        if(!$(this).hasClass("active")){

            var type = "element";

            if($(".advance-info-btns.active").length == 0){
                $(".element-btn").trigger("click");
            }else if($(".advance-info-btns.active").hasClass("typography-btn")){
                type = "typography";
            }else if($(".advance-info-btns.active").hasClass("advanced-btn")){
                type = "advanced";
            }

            $(".information-updated").removeClass("information-updated");

            update_design_information(type);

            var max = $(window).height() - $(this).offset().top;
            $(".advanced-info-box").css({"top": $(this).offset().top + 1,"height": (max - (max * 5 / 100)) - 6});

        }

        $(".advanced-info-box").toggle();

    });


    /* ---------------------------------------------------- */
    /* Design information: Typography Section               */
    /* ---------------------------------------------------- */
    $(".typography-btn").on("click",function(){

        $(this).parent().find(".active").removeClass("active");
        $(this).addClass("active");
        $(".element-content,.advanced-content").hide();
        $(".typography-content").show();

        if($(this).hasClass("information-updated") == false){
            update_design_information("typography");
            $(this).addClass("information-updated");
        }

    });


    /* ---------------------------------------------------- */
    /* Design information: Element Section                  */
    /* ---------------------------------------------------- */
    $(".element-btn").on("click",function(){

        $(this).parent().find(".active").removeClass("active");
        $(this).addClass("active");
        $(".typography-content,.advanced-content").hide();
        $(".element-content").show();

    });


    /* ---------------------------------------------------- */
    /* Design information: Advanced Section                 */
    /* ---------------------------------------------------- */
    $(".advanced-btn").on("click",function(){
        $(this).parent().find(".active").removeClass("active");
        $(this).addClass("active");
        $(".element-content,.typography-content").hide();
        $(".advanced-content").show();

        if($(this).hasClass("information-updated") == false){
            update_design_information("advanced");
            $(this).addClass("information-updated");
        }

    });


    /* ---------------------------------------------------- */
    /* Design information: Scroll to top on tab click       */
    /* ---------------------------------------------------- */
    $(".advance-info-btns").on("click",function(){
        $(".advanced-info-box-inner").scrollTop(0);
    });



    /* ---------------------------------------------------- */
    /* Easy resize editor panels                            */
    /* ---------------------------------------------------- */
    $(document).on("mousedown", ".ui-resizable-handle", function(){

        if($(this).parents(".yp-anim-process-inner").length == 0){
            mainBody.addClass("fake-layer-x-bg");
            mainBody.append("<div class='fake-layer-x'></div>");
            $(this).addClass("active");
        }

    });


    /* ---------------------------------------------------- */
    /* Easy resize editor panels                            */
    /* ---------------------------------------------------- */
    $(document).on("mouseup", ".ui-resizable-handle,.fake-layer-x", function(){

        if($(this).parents(".yp-anim-process-inner").length == 0){
            mainBody.removeClass("fake-layer-x-bg");
            $(".fake-layer-x").remove();
            $(".ui-resizable-handle").removeClass("active");
        }

    });



    /* ---------------------------------------------------- */
    /* Setting default width for CSS Editor                 */
    /* ---------------------------------------------------- */
    function create_cookie(name,value) {

        var expires = "";

        var date = new Date();
        date.setTime(date.getTime() + (365*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();

        document.cookie = name + "=" + value + expires + "; path=/";

    }



    /* ---------------------------------------------------- */
    /* Setting default width for CSS Editor                 */
    /* ---------------------------------------------------- */
    function read_cookie(name, ifnothave) {

        var nameEQ = name + "=";
        var ca = document.cookie.split(';');

        for(var i=0;i < ca.length;i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return parseInt(c.substring(nameEQ.length,c.length));
        }

        if(mainBody.hasClass("yp-fixed-right-panel") && name == "visualManagerWidth"){
            return parseInt($(".yp-select-bar").width());
        }

        return parseInt(ifnothave);

    }


    /* ---------------------------------------------------- */
    /* Setting default width for Right panel                */
    /* ---------------------------------------------------- */
    var defaultWidth = 288;
    var number = read_cookie("rightPanelWidth", defaultWidth);
    mainBody.append("<style id='rightpanel-personalized-view'>.yp-select-bar{width:"+number+"px !important;}</style>");

    
    /* ---------------------------------------------------- */
    /* Setting default width for visial manager             */
    /* ---------------------------------------------------- */
    defaultWidth = 288;
    number = read_cookie("visualManagerWidth", defaultWidth);
    mainBody.append("<style id='visual-manager-personalized-view'>#visual-css-view{width:"+number+"px !important;}</style>");


    /* ---------------------------------------------------- */
    /* Setting default width for Advanced info box          */
    /* ---------------------------------------------------- */
    number = read_cookie("advancedInfoBoxWidth", 300);
    mainBody.append("<style id='advancedinfobox-personalized-view'>.advanced-info-box {width:"+number+"px !important;}</style>");

    
    /* ---------------------------------------------------- */
    /* Setting default width for CSS Editor                 */
    /* ---------------------------------------------------- */
    number = read_cookie("cssEditorWidth", 400);
    mainBody.append("<style id='csseditor-personalized-view'>#leftAreaEditor, #cssData, #cssEditorBar{width:"+number+"px !important;}body.yp-css-editor-active .metric,body.yp-css-editor-active .breakpoint-bar, body.yp-css-editor-active.yp-responsive-device-mode #iframe, body.yp-css-editor-active:not(.yp-responsive-device-mode) #iframe {left: "+number+"px !important;}body.yp-css-editor-active .breakpoint-bar div{margin-left: calc("+parseFloat(number+10)+"px - 56px) !important;}body.yp-css-editor-active .context-menu-root:not(.dom_contextmenu), body.yp-css-editor-active .metric-top-tooltip {margin-left: "+number+"px !important;}body.yp-css-editor-active .metric-top-border {margin-left: calc("+number+"px - 1px) !important;}body.yp-css-editor-active .metric-left-tooltip {margin-left: calc("+number+"px + 1px) !important;}body.yp-css-editor-active #parent-bar,body.yp-css-editor-active .responsive-size-text{left:"+number+"px !important;}</style>");
    

    /* ---------------------------------------------------- */
    /* Setting default width for CSS Editor                 */
    /* ---------------------------------------------------- */
    number = read_cookie("animManagerHeight", 287);
    mainBody.append("<style id='animmanager-personalized-view'>body.yp-animate-manager-active.yp-responsive-device-mode #iframe{height:calc(80% - "+number+"px) !important;}body.yp-animate-manager-active .responsive-size-text{margin-bottom:"+(number-25)+"px !important;}.yp-animate-manager{height:"+number+"px !important;}</style>");


    /* ---------------------------------------------------- */
    /* Update iframe width when any tool size change        */
    /* ---------------------------------------------------- */
    function draw_iframe(returnValue){

        var size = 0;
        var globalSize = $(window).width(); // LeftBar
        var width;
        var style = $("#iframe-general-style");
        var widthParentBar;

        // delete old style
        if(!returnValue){
            style.remove();
        }

        // Visual manager size
        if(mainBody.hasClass("visual-css-view-active")){
            size = size + $("#visual-css-view").width();
        }

        // CSS editor Size
        if(mainBody.hasClass("yp-css-editor-active")){
            size = size + $("#leftAreaEditor").width();
        }else{
            size = size + 46; // add left bar width if css editor not active.
        }

        // cos fixed right panel not matter
        widthParentBar = globalSize - size;

        // Fixed right panel
        if(mainBody.hasClass("yp-fixed-right-panel") && mainBody.hasClass("yp-clean-look-manual") == false && is_animation_manager() == false){
            size = size + $(".yp-select-bar").width();
        }

        // generate possible width
        width = globalSize - size;

        // return possible width for iframe
        if(returnValue){
            return width;
        }

        // no change iframe width on responsive device.
        if(is_responsive_mod()){
            
            // only parent tree need with on responsive
            mainBody.append("<style id='iframe-general-style'>#parent-bar{width:"+widthParentBar+"px !important;}</style>");

            return false;
        }

        // Apply
        mainBody.append("<style id='iframe-general-style'>#iframe{width:"+width+"px !important;}#parent-bar{width:"+widthParentBar+"px !important;}</style>");

        // hide contextMenu if iframe size change.
        if (iframe.find(".context-menu-active").length > 0) {
            get_selected_element().contextMenu("hide");
        }

    }


    /* ---------------------------------------------------- */
    /* Animation Manager: Generating Manager                */
    /* ---------------------------------------------------- */
    function animation_manager(){

        var selectorList = [];

        // IF alredy has animations, use same order to get animations
        // so it will show animations in same order after updates.
        if($(".yp-anim-process-bar-area").length > 0){

            // getting current selectors
            $(".yp-anim-process-bar-area").each(function(i){

                // current selector
                var selector = $(this).attr("data-selector-full");

                // add to list
                if(selectorList.indexOf(selector) == -1){
                    selectorList.push(selector);
                }

            });

        }


        $(".yp-animate-manager [data-toggle='tooltipAnim']").tooltip("destroy");

        // destory if has.
        if($(".yp-anim-process-bar-delay.ui-resizable-e,.yp-anim-process-bar.ui-resizable-e").length > 0){
            $(".yp-anim-process-bar-delay,.yp-anim-process-bar").resizable('destroy');
        }

        $(".yp-anim-el-column,.yp-animate-bar").remove();

        // Update metric
        $(".yp-anim-metric").empty();
        for(var i = 1; i < 61; i++){
            $(".yp-anim-metric").append('<div class="second"><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><b>'+i+'s</b></div>');
        }


        // all data types.
        var types = ["single", "template", "global"];
        var totalCount = 0;

        // available selectors
        var list, data, device, animateName, animateDelayOr, animateTimeOr, mode, deviceName, deviceHTML, modeName, selectorClean,elementName;

        // each types
        for(var t = 0; t < types.length; t++){

            // get data
            var styles = getStyles(types[t], false);

            var animationStyles = findStyle(styles, "[rule=animation-name]");
            var selector;

            // read data and find all animations 
            for(i = 0; i < animationStyles.length; i++){

                selector = esc_data_selector(animationStyles[i]);

                if(selectorList.indexOf(selector) == -1){
                    selectorList.push(selector);
                }

            }

            if(selectorList.length > 0){

                for(i = 0; i < selectorList.length; i++){

                    list = findStyle(styles, "[selector=" + get_id(selectorList[i]) + "][rule=animation-name]");

                    for(var iX = 0; iX < list.length; iX++){

                        totalCount++;

                        // Variables
                        data = list[iX].replace(/(\/\*)(.*?)\*\//g, "");
                        device = /\[msize\=(.*?)\]/g.exec(list[iX])[1].trim();
                        selector = esc_data_selector(data);
                        animateName = esc_data_value(data);
                        animateDelayOr = "0s";
                        animateTimeOr = "1s";
                        mode = 'yp_onscreen';

                        if(animateName == 'none'){
                            //continue;
                        }

                        if(selector.indexOf("yp_hover") != -1){
                            mode = 'yp_hover';
                        }else if(selector.indexOf("yp_focus") != -1){
                            mode = 'yp_focus';
                        }else if(selector.indexOf("yp_click") != -1){
                            mode = 'yp_click';
                        }else if(selector.indexOf("yp_onscreen") != -1){
                            mode = 'yp_onscreen';
                        }

                        deviceName =  '';
                        deviceHTML = '';
                        modeName = mode.replace("yp_","");

                        if(device == 'desktop'){
                            deviceName = lang.all_devices;
                        }else{
                            deviceName = device;
                        }

                        if(deviceName !== ''){
                            deviceHTML = " <span class='yp-device-responsive'>"+deviceName+"</span><span class='yp-type-anim-text'>"+uppercase_first_letter(types[t])+"</span>";
                        }

                        // Clean Selector
                        selectorClean = selector.replace(/\.(yp_onscreen|yp_hover|yp_click|yp_focus)/g, '');

                        // dont append same selector
                        if($(".yp-anim-el-column-"+get_id(selectorClean)+"[data-anim-media-size='"+device+"']").length > 0){
                            //continue;
                        }

                        // Get Element Name
                        elementName = '';

                        // Generate element name
                        if(iframe.find(selectorClean).length > 0){
                            elementName = uppercase_first_letter(get_tag_information(selectorClean, true, null)).replace(/\(\d+\)/g, '');
                        }else{
                            elementName = uppercase_first_letter(get_tag_information2(selectorClean));
                        }

                        // Duration
                        var durationStyles = findStyle(styles, "[selector="+get_id(selector)+"][rule=animation-duration][msize="+device+"]");
                        if(durationStyles.length > 0){
                            animateTimeOr = durationStyles[0].replace(/(\/\*(.*?)\*\/|\n)/g, "");
                            animateTimeOr = esc_data_value(animateTimeOr);
                        }

                        // Delay
                        var delayStyles = findStyle(styles, "[selector="+get_id(selector)+"][rule=animation-delay][msize="+device+"]");
                        if(delayStyles.length > 0){
                            animateDelayOr = delayStyles[0].replace(/(\/\*(.*?)\*\/|\n)/g, "");
                            animateDelayOr = esc_data_value(animateDelayOr);
                        }

                        var animateTime = $.trim(animateTimeOr.replace('/[^0-9\.]+/g','').replace(/ms/g,"").replace(/s/g,""));
                        var animateDelay = $.trim(animateDelayOr.replace('/[^0-9\.]+/g','').replace(/ms/g,"").replace(/s/g,""));

                        if(animateName.indexOf(",") == -1){

                            animateTime = animateTime * 100;
                            animateDelay = animateDelay * 100;

                            if(animateDelay < 10){
                                animateDelay = 10;
                            }

                        }

                        var extraClass = '';
                        if(animateDelay == 10){
                            extraClass = ' yp-delay-zero';
                        }
                        
                        var animateContent = "<div class='yp-anim-process-bar-delay"+extraClass+"' data-toggle='tooltipAnim' data-placement='top' title='"+lang.delay+" "+parseFloat(animateDelayOr).toFixed(2)+"s' style='width:"+animateDelay+"px;'></div><div class='yp-anim-process-bar' data-toggle='tooltipAnim' data-placement='top' title='"+lang.duration+": "+parseFloat(animateTimeOr).toFixed(2)+"s' style='width:"+animateTime+"px;'><span class='animate-part-icons yp-control-trash' data-toggle='tooltipAnim' data-placement='top' title='"+lang.delete_t+"'><span class='dashicons dashicons-trash'></span></span>"+animateName+"</div>";


                        var childAnimateDelay,childAnimateTimeOr,childAnimateTime;
                        if(animateName.indexOf(",") != -1){

                            animateContent = '';

                            var prevsBeforeAppend = 0;

                            for(var it = 0; it < animateName.split(",").length; it++){

                                if(animateDelay.toString().indexOf(",") != -1){
                                    childAnimateDelay = $.trim(animateDelay.split(",")[it]);
                                }else{
                                    childAnimateDelay = animateDelay;
                                }

                                // default is 1s for child animate delay.
                                if(isUndefined(childAnimateDelay)){
                                    childAnimateDelay = 0;
                                }

                                if(animateTimeOr.toString().indexOf(",") != -1){
                                    childAnimateTimeOr = $.trim(animateTimeOr.split(",")[it]);
                                }else{
                                    childAnimateTimeOr = animateTimeOr;
                                }

                                // default is 1s for child animate time Or.
                                if(isUndefined(childAnimateTimeOr)){
                                    childAnimateTimeOr = "1s";
                                }


                                if(animateTime.toString().indexOf(",") != -1){
                                    childAnimateTime = $.trim(animateTime.split(",")[it]);
                                }else{
                                    childAnimateTime = animateTime;
                                }

                                // default is 1s for child animate.
                                if(isUndefined(childAnimateTime)){
                                    childAnimateTime = 1;
                                }

                                var childAnimate = $.trim(animateName.split(",")[it].replace(/\s+?!important/g,'').replace(/\;$/g,''));

                                childAnimateTime = childAnimateTime * 100;
                                childAnimateDelay = childAnimateDelay * 100;

                                var SmartDelayView = (childAnimateDelay-prevsBeforeAppend);
                                var smartDelayOrView = SmartDelayView/100;
                                if(SmartDelayView <= 10){
                                    SmartDelayView = 10;
                                    smartDelayOrView = "0s";
                                }

                                extraClass = '';
                                if(SmartDelayView == 10){
                                    extraClass = ' yp-delay-zero';
                                }

                                animateContent += "<div class='yp-anim-process-bar-delay"+extraClass+"' data-toggle='tooltipAnim' data-placement='top' title='"+lang.delay+" "+parseFloat(smartDelayOrView).toFixed(2)+"s' style='width:"+SmartDelayView+"px;'></div><div class='yp-anim-process-bar' data-toggle='tooltipAnim' data-placement='top' title='"+lang.duration+": "+parseFloat(childAnimateTimeOr).toFixed(2)+"s' style='width:"+childAnimateTime+"px;'><span class='animate-part-icons yp-control-trash' data-toggle='tooltipAnim' data-placement='top' title='"+lang.delete_t+"'><span class='dashicons dashicons-trash'></span></span>"+childAnimate+"</div>";

                                prevsBeforeAppend = childAnimateDelay+childAnimateTime;

                            }

                        }


                        var cc = "";
                        if(check_selector(selectorClean, true, false, false) == false){
                            cc = " unavailable-animate-bar";
                        }

                        // Append.
                        $(".yp-anim-left-part-column").append("<div class='yp-anim-el-column yp-anim-el-column-"+get_id(selectorClean)+""+cc+"' data-anim-media-size='"+device+"'><i data-title='"+selectorClean+"'></i><span>"+elementName+"</span> <label>"+modeName+"</label>"+deviceHTML+"</div>");

                        $(".yp-anim-right-part-column").append("<div class='yp-animate-bar"+cc+"' id='yp-animate-bar-"+totalCount+"'><div class='yp-anim-process-bar-area' data-responsive='"+device+"' data-selector='"+selectorClean+"' data-selector-full='"+selector+"' data-anim-type='"+types[t]+"'><div class='yp-anim-process-inner'>"+animateContent+"</div><a class='yp-anim-add' data-toggle='tooltipAnim' data-placement='right' title='"+lang.add_new_anim+"'></a></div>");

                    }

                }

            }

        }

    
        $(".yp-delay-zero").each(function(){

            var allLeft = $(".yp-anim-process-inner").offset().left-5;
            var left = $(this).next(".yp-anim-process-bar").offset().left-allLeft;
            $(this).css("left",left);

            $(this).next(".yp-anim-process-bar").addClass("yp-anim-has-zero-delay");

        });

        // Get current selector
        var Cselector = get_current_selector();
        var currentScreen = get_media_condition();
        var Lineway = $(".yp-anim-el-column-"+get_id(Cselector)+"[data-anim-media-size='"+currentScreen+"']");

        // has selected element and there not have same element in manager list
        if(isDefined(Cselector) && Lineway.length === 0){

            // Get Element Name
            elementName = '';
            if(iframe.find(Cselector).length > 0){
                elementName = uppercase_first_letter(get_tag_information(Cselector, true, null)).replace(/\(\d+\)/g, '');
            }else{
                elementName = uppercase_first_letter(get_tag_information2(Cselector));
            }

            if(currentScreen == 'desktop'){
                deviceHTML = " <span class='yp-device-responsive'>"+lang.all_devices+"</span>";
            }else{
                deviceHTML = " <span class='yp-device-responsive'>"+currentScreen+"</span>";
            }

            // Bar
            $(".yp-anim-left-part-column").append("<div class='yp-anim-el-column anim-active-row yp-anim-el-column-"+get_id(Cselector)+"' data-anim-media-size='"+currentScreen+"'><i data-title='"+Cselector+"'></i><span>"+elementName+"</span> <label>onscreen</label>"+deviceHTML+"<span class='yp-type-anim-text'>"+uppercase_first_letter(get_active_type())+"</span></div>");

            // Adding
            $(".yp-anim-right-part-column").append("<div class='yp-animate-bar anim-active-row' id='yp-animate-bar-current'><div class='yp-anim-process-bar-area' data-responsive='"+currentScreen+"' data-anim-type='"+$('.active-customizing-list').attr('data-value')+"' data-selector='"+Cselector+"' data-selector-full='"+(Cselector+".yp_onscreen")+"'><div class='yp-anim-process-inner'></div><a class='yp-anim-add' data-toggle='tooltipAnim' data-placement='right' title='"+lang.add_new_anim+"'></a></div>");

        }else{
            Lineway.addClass("anim-active-row");
        }

        // resizable
        $( ".yp-anim-process-bar-delay,.yp-anim-process-bar" ).resizable({
            handles: 'e',
            minWidth: 10,
            start: function() {

                $(".yp-anim-process-bar-delay,.yp-anim-process-bar").not(this).tooltip("disable").tooltip("hide");

            },
            resize: function( event, ui ) {

                var that = $(this);
                var w = ui.size.width;
                var s = parseFloat(w/100).toFixed(2);

                var newTitle;
                if(that.hasClass("yp-anim-process-bar-delay")){

                    if(w == 10){
                        s = "0";
                    }
                    newTitle = lang.delay + ": "+s;

                    // Delay zero
                    if(w <= 10){
                        that.addClass("yp-delay-zero");
                        that.next(".yp-anim-process-bar").addClass("yp-anim-has-zero-delay");
                    }else if(that.hasClass("yp-delay-zero")){
                        that.removeClass("yp-delay-zero").css("left","0");
                        that.next(".yp-anim-process-bar").removeClass("yp-anim-has-zero-delay");
                    }

                }else{

                    newTitle = lang.duration + ": "+s;

                }


                $(this).parents(".yp-animate-bar").find(".yp-delay-zero").each(function(){

                    var allLeft = $(".yp-anim-process-inner").offset().left-5;
                    var left = $(this).next(".yp-anim-process-bar").offset().left-allLeft;
                    $(this).css("left",left);

                });
                    

                that.attr('data-original-title', newTitle+"s").tooltip('show');

            },
            stop: function() {

                update_animation_manager();
                $(this).tooltip("hide");
                $(".yp-anim-process-bar-delay,.yp-anim-process-bar").tooltip("enable");

            }

        });

        
        // Animation manager tooltip
        $('[data-toggle="tooltipAnim"]').tooltip({
            animation: false,
            container: ".yp-animate-manager",
            html: true
        });
        

        $("[data-toggle='tooltipAnim']").on('show.bs.tooltip', function(){
            $("[data-toggle='tooltipAnim']").not(this).tooltip("hide");
        });

        if($(".yp-animate-bar").length === 0){
            $(".animation-manager-empty").show();
            $(".yp-anim-list-menu").hide();
        }else{
            $(".animation-manager-empty").hide();
        }

        // Find largest line for play/stop.
        var maxWidth = Math.max.apply( null, $( '.yp-anim-process-inner' ).map( function (){
            return $( this ).outerWidth( true );
        }).get() );

        // Always add more px to animate bar width on update.
        $(".yp-anim-process-bar-area").width(maxWidth+$(window).width());

        draw_iframe();

    }


    /* ---------------------------------------------------- */
    /* Animation Manager: Update Manager                    */
    /* ---------------------------------------------------- */
    function update_animation_manager(){

        body.addClass("yp-animate-manager-mode");

        // Find largest line for play/stop.
        var maxWidth = Math.max.apply( null, $( '.yp-anim-process-inner' ).map( function (){
            return $( this ).outerWidth( true );
        }).get() );

        // Always add more px to animate bar width on update.
        $(".yp-anim-process-bar-area").width(maxWidth+$(window).width());

        // Each all lines
        $(".yp-animate-bar").each(function(){

            // Get selector with mode.
            var selector = $(this).find(".yp-anim-process-bar-area").attr("data-selector-full");

            // Animate name array.
            var sMultiNames = [];

            // Find all delays in this line.
            var sMulti = [];
            var sMultiDuration = [];

            // delay
            var delay = 0;
            var offets = '';

            // Get size
            var size = $(this).find(".yp-anim-process-bar-area").attr("data-responsive");

            // Get type
            var type = $(this).find(".yp-anim-process-bar-area").attr("data-anim-type");

            // Each all animate bars
            $(this).find(".yp-anim-process-bar,.yp-anim-process-bar-delay").each(function(){

                // Get width.
                var w = $(this).width();

                // Width to Second.
                var s = w/100;

                // If delay and its not a multiple line.
                if($(this).hasClass("yp-anim-process-bar-delay") && $(this).parent().find(".yp-anim-process-bar-delay").length == 1){

                    if(w == 10){
                        s = "0";
                    }

                    // Update one delay.
                    // append as "0s" val cos 0 is not acceptable value.
                    insert_rule(selector, "animation-delay", Math.round(s * 100) / 100 + "s", '', size, type);

                // If animate bar and not a multiple line.
                }else if($(this).hasClass("yp-anim-process-bar") && $(this).parent().find(".yp-anim-process-bar").length == 1){

                    // Update one duration.
                    insert_rule(selector, "animation-duration", s, 's', size, type);
                    insert_rule(selector, "animation-name", $(this).text(), '', size, type);
                    sMultiNames.push($(this).text());

                // If multi line and its delay or animate bar.
                }else if($(this).parent().find(".yp-anim-process-bar-delay").length > 1 || $(this).parent().find(".yp-anim-process-bar").length > 1){

                    // Delay.. Multi..
                    if($(this).hasClass("yp-anim-process-bar-delay")){

                        offets = $(this).offset().left-$(this).parent(".yp-anim-process-inner").offset().left;
                        offets = offets/100;
                        offets = Math.round(offets * 100) / 100;

                        if($(this).width() > 10){

                            delay = $(this).width()/100;
                            delay = Math.round(delay * 100) / 100;
                            sMulti.push(delay+offets+"s");

                        }else{

                            sMulti.push(offets+"s");

                        }
                        
                    }

                    // Duration.. Multi..
                    if($(this).hasClass("yp-anim-process-bar")){

                        var xy = $(this).width()/100;

                        sMultiDuration.push(xy+"s");
                        sMultiNames.push($(this).text());
                        
                    }

                }

            });

            // Insert multi delays.
            if(sMulti.length > 1){
                insert_rule(selector, "animation-delay", sMulti.toString(), '', size, type);
                insert_rule(selector, "animation-duration", sMultiDuration.toString(), '', size, type);
                insert_rule(selector, "animation-name", sMultiNames.toString(), '', size, type);

            }else if(sMultiNames.length === 0 && body.hasClass("yp-anim-removing")){
                insert_rule(selector, "animation-delay", "disable", '', size, type);
                insert_rule(selector, "animation-duration", "disable", '', size, type);
                insert_rule(selector, "animation-name", "disable", '', size, type);
            }

            option_change();

        });

        body.removeClass("yp-animate-manager-mode");

    }


    /* ---------------------------------------------------- */
    /* AnimationManager Fix left panel                      */
    /* ---------------------------------------------------- */
    $(".yp-animate-manager-inner").on("scroll", function(){
        $(".yp-anim-left-part-column").css("left", $(this).scrollLeft());
    });


    /* ---------------------------------------------------- */
    /* Window Click                                         */
    /* ---------------------------------------------------- */
    $(window).click(function() {
        
        if($(".yp-anim-list-menu").is(":visible")){
            $(".yp-anim-list-menu").hide();
        }

    });


    /* ---------------------------------------------------- */
    /* Add Animation: Animation list click                  */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-anim-list-menu ul li", function(e) {

        // Clean old.
        iframe.find(".yp_onscreen,.yp_hover,.yp_click,.yp_focus").removeClass("yp_onscreen yp_hover yp_click yp_focus");

        var p = $(".yp-anim-add.active");

        mainBody.addClass("yp-animate-manager-mode");
        var selector = p.parent().attr("data-selector-full");
        var allAnimNames = [];
        var allDurations = [];
        var allDelays = [];

        // Get size
        var size = p.parents(".yp-anim-process-bar-area").attr("data-responsive");
        
        var type = p.parents(".yp-anim-process-bar-area").attr("data-anim-type");

        // If empty, so this new.
        if(p.parent().find(".yp-anim-process-inner").is(':empty')){

            insert_rule(selector, "animation-name", $(this).data("value"), '',size,type);

        }else{

            // push older animations
            p.parent().find(".yp-anim-process-inner .yp-anim-process-bar").each(function(){
                allAnimNames.push($(this).text());
                allDurations.push(($(this).width()/100)+"s");
            });

            // push older animations
            p.parent().find(".yp-anim-process-inner .yp-anim-process-bar-delay").each(function(){
                var offets = ($(this).offset().left-p.parent().find(".yp-anim-process-inner").offset().left)/100;

                if($(this).hasClass("yp-delay-zero")){
                    allDelays.push(offets+"s");
                }else{
                    allDelays.push(offets+($(this).width()/100)+"s");
                }

            });

            // push new animation too
            allAnimNames.push($(this).data("value"));
            allDurations.push("1s");

            var lastAnim = p.parent().find(".yp-anim-process-inner .yp-anim-process-bar").last();
            var offets = ((lastAnim.offset().left+lastAnim.width())-p.parent().find(".yp-anim-process-inner").offset().left)/100;
            allDelays.push(offets+"s");

            insert_rule(selector, "animation-name",allAnimNames.toString(), '',size,type);
            insert_rule(selector, "animation-duration",allDurations.toString(), '',size,type);
            insert_rule(selector, "animation-delay",allDelays.toString(), '',size,type);

        }

        mainBody.removeClass("yp-animate-manager-mode");

        setTimeout(function(){
            animation_manager();
            update_animation_manager();
        },100);

    });


    /* ---------------------------------------------------- */
    /* Animation Manager: Add Animation icon                */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-anim-add", function(e) {

        e.stopPropagation();
        var t = $(this).offset().top;
        var l = $(this).offset().left;

        // Empty Menu in animation manager
        var menu = $(".yp-anim-list-menu ul");
        $(".yp-anim-list-menu").removeAttr("style").removeClass("yp-anim-list-top");
       
        // More fast than append
        var menuHTML = "";

        // Add all animations again to animation manager list
        $.each(JSON.parse($("#animation-name-group textarea").val()), function(i, v){

            // If not none
            if(v.value != "none"){
                menuHTML += "<li data-value='"+v.value+"' data-text='"+v.label+"' data-content='"+v.label+"'>"+v.label+"</li>";
            }

        });

        // Update
        menu.html(menuHTML);


        var d = $(window).height()-t-46;

        if(d < 150){
            $(".yp-anim-list-menu").addClass("yp-anim-list-top");
        }else{
            if(menu.height() > d){
                menu.height(d);
            }
        }

        $(".yp-anim-list-menu").css("left",l).css("top",t).show();

        $(".yp-anim-list-menu").css("margin-left", "-" + parseInt(($(".yp-anim-list-menu").width()/2) - 10) + "px");

        $(".yp-anim-add").removeClass("active");
        $(this).addClass("active");

    });


    /* ---------------------------------------------------- */
    /* Lite version modal close                             */
    /* ---------------------------------------------------- */
    $(".yp-info-modal-close").click(function() {
        $(this).parent().parent().fadeOut("fast");
        $(".yp-popup-background").fadeOut("fast");
    });

    /* ---------------------------------------------------- */
    /* Background Upload popup close                        */
    /* ---------------------------------------------------- */
    $(".yp-popup-background").click(function() {
        $(this).fadeOut();
        $(".yp-info-modal").fadeOut("fast");
    });


    /* ---------------------------------------------------- */
    /* Element Inspector button: Click                      */
    /* ---------------------------------------------------- */
    $(".cursor-main-btn").mousedown(function() {

        if($(this).hasClass("active") == false){

            $(this).addClass("active");

            $(".yp-ruler-btn").removeClass("active");
            body.toggleClass("yp-metric-disable");

        }else{

            $(".inspector-sublist").toggle();

        }

    });


    /* ---------------------------------------------------- */
    /* Element Inspector sublist: Click                     */
    /* ---------------------------------------------------- */
    $(".inspector-sublist li").click(function() {

        // get action
        var action = $(this).attr("data-cursor-action");

        // Disable Ruler
        if($(".yp-ruler-btn").hasClass("active")){
            $(".yp-ruler-btn").trigger("click");
        }

        // Default inspector
        if(action == 'default'){

            // Disable single
            body.removeClass("yp-sharp-selector-mode-active");
            iframeBody.removeClass("yp-sharp-selector-mode-active");
            window.singleInspector = false;
                
            // apply default
            body.addClass("yp-body-selector-mode-active");

        }else if(action == 'single'){

            // Apply single
            body.addClass("yp-sharp-selector-mode-active");

            // Update variable
            window.singleInspector = true;

        }else{

            // disable single and default
            body.removeClass("yp-body-selector-mode-active yp-sharp-selector-mode-active");
            clean();

        }

        // Toggle
        $(".inspector-sublist").toggle();
        $(".inspector-sublist li").removeClass("active");
        $(this).addClass("active");

    });            


    /* ---------------------------------------------------- */
    /* Hide Inspector group on blur                         */
    /* ---------------------------------------------------- */
    body.on("click", function(e){

        // Hide on outside click
        if($(".inspector-sublist").css("display") == "block" && $(e.target).is(".cursor-main-btn,.cursor-main-btn *,.inspector-sublist,.inspector-sublist *") == false){

            $(".inspector-sublist").hide();

        }

        // Hide on outside click
        if($(".interface-settings").css("display") == "block" && $(e.target).is(".left-menu-btn,.left-menu-btn *,.interface-settings,.interface-settings *") == false){

            $(".left-menu-btn").toggleClass("yhover");
            $(".interface-settings").hide();

        }

    });



    /* ---------------------------------------------------- */
    /* Draw Responsive Handles                              */
    /* ---------------------------------------------------- */
    function draw_responsive_handle() {

        if (is_responsive_mod() === false) {
            return false;
        }

        // variables
        var iframeElement = $("#iframe");

        if(isUndefined(window.FrameleftOffset)){
            var offset = iframeElement.offset();
            window.FrameleftOffset = offset.left;
            window.FrametopOffset = offset.top;
        }

        var w = iframeElement.width();
        var h = iframeElement.height();

        var left = window.FrameleftOffset + w;

        $(".responsive-right-handle").css("left", left)
        .css("top", window.FrametopOffset - 2)
        .css("height", h + 2);

    }

    // Right
    window.responsiveModeRMDown = false;
    window.SelectorDisableResizeRight = false;
    window.rulerWasActive = false;
    window.selectorWasActive = false;


    /* ---------------------------------------------------- */
    /* Responsive Right Handle                              */
    /* ---------------------------------------------------- */
    $(".responsive-right-handle").on("mousedown", function(e) {

        window.responsiveModeRMDown = true;
        body.addClass("yp-clean-look yp-responsive-resizing yp-responsive-resizing-right yp-hide-borders-now");

        $(".property-size.active").removeClass("active");
        update_responsive_size_notice();

        if($(".yp-selector-mode").hasClass("active")){
            window.selectorWasActive = true;
        }else{
            window.selectorWasActive = false;
        }

        if ($(".yp-ruler-btn").hasClass("active")) {
            window.rulerWasActive = true;
        } else {
            window.rulerWasActive = false;
            $(".yp-ruler-btn").trigger("click").removeClass("active");
        }

        if ($(".yp-selector-mode").hasClass("active") && is_content_selected() === false) {
            $(".yp-selector-mode").trigger("click");

            window.SelectorDisableResizeRight = true;
        }

        // Update tooltip content
        setTimeout(function(){
            $(".metric-left-tooltip").html("X : <span>" + parseInt($("#iframe").width()) + "</span> px");
        }, 1);

    });

    
    /* ---------------------------------------------------- */
    /* Responsive Right Handle                              */
    /* ---------------------------------------------------- */
    mainDocument.on("mousemove", function(e) {

        if (window.responsiveModeRMDown === true) {

            var possibleWidth = draw_iframe(true); // get mode

            if (mainBody.hasClass("yp-css-editor-active")) {
                e.pageX = e.pageX - read_cookie("cssEditorWidth", 400) - 10;
            } else {
                e.pageX = e.pageX - window.leftbarWidth - 10;
            }

            // Min 320
            if (e.pageX < 320) {
                e.pageX = 320;
            }

            // Max full-80px W
            if (e.pageX > possibleWidth - 80 - 49) {
                e.pageX = possibleWidth - 80 - 49;
            }

            $("#iframe").width(e.pageX);

            draw_responsive_handle();
            update_responsive_size_notice();
            
            // remove old breakpoint active class
            $(".breakpoint-bar div").removeClass("active");

            // add active class to current
            var thisBreakpoint = $(".breakpoint-bar div[data-breakpoint="+e.pageX+"]");

            // add active class to same breakpoint
            if(thisBreakpoint.length > 0){
                thisBreakpoint.addClass("active");
            }

        }
    });


    /* ---------------------------------------------------- */
    /* Responsive Right Handle                              */
    /* ---------------------------------------------------- */
    mainDocument.on("mouseup", function() {

        if (window.responsiveModeRMDown === true) {

            if(is_animation_manager()){
                animation_manager();
            }

            window.responsiveModeRMDown = false;

            body.removeClass("yp-clean-look yp-responsive-resizing yp-responsive-resizing-right");

            setTimeout(function() {
                body.removeClass("yp-hide-borders-now");
                draw();
            }, 25);

            if (window.SelectorDisableResizeRight === true) {
                window.SelectorDisableResizeRight = false;
            }

            if (window.rulerWasActive === false) {
                $(".yp-ruler-btn").addClass("active").trigger("click");
            }


            if(window.selectorWasActive === true){
                if($(".yp-selector-mode").hasClass("active") === false){
                    $(".yp-selector-mode").trigger("click");
                }
            }else{
                if($(".yp-selector-mode").hasClass("active")){
                    $(".yp-selector-mode").trigger("click");
                }
            }

            if($(".breakpoint-bar .active").length > 0){

                // Get media query
                var activeBreakpoint = process_media_query($(".breakpoint-bar .active").attr("data-media-content"));

                // Be sure this data valid
                if(isDefined(activeBreakpoint)){

                    // Convert to string
                    activeBreakpoint = activeBreakpoint.toString();

                    // if has same media here
                    if($(".property-size[data-property-size='"+activeBreakpoint+"']").length > 0){
                        $(".property-size[data-property-size='"+activeBreakpoint+"']").addClass("active");
                    }

                }

            }

            // Update options
            insert_default_options();

            // Update editor
            if(is_content_selected()){
                editor_update(true);
            }

        }

    });

        
    // Last Key
    var lastKeyUpAt = 0;

    /* ---------------------------------------------------- */
    /* Shortcuts & Keys : KeyUp                             */
    /* ---------------------------------------------------- */
    mainDocument.on("keyup", function(e) {

        lastKeyUpAt = new Date();

        // Getting current tag name.
        var tag = e.target.tagName.toLowerCase();

        // Control
        var ctrlKey = false;
        var tagType = false;

        // Check If is CTRL Key.
        if ((e.ctrlKey === true || e.metaKey === true)) {
            ctrlKey = true;
        }

        // Stop if this target is input or textarea.
        if (tag == 'input' || tag == 'textarea') {
            tagType = true;
        }

        // Multi selecting support
        if(ctrlKey === false && tagType === false){
            body.removeClass("yp-control-key-down");
            iframe.find(".yp-multiple-selected").removeClass("yp-multiple-selected");
            paintCanvas.other.find(".yp-selected-others-multiple-box").remove();
        }

    });


    /* ---------------------------------------------------- */
    /* Shortcuts & Keys : KeyDown                           */
    /* ---------------------------------------------------- */
    mainDocument.on("keydown", function(e) {

        // get current time
        var keyDownAt = new Date();

        // Getting current tag name.
        var tag = e.target.tagName.toLowerCase();

        // Getting Target Element
        var targetElement = $(e.target);

        // Getting Keycode.
        var code = e.keyCode || e.which;

        // Control
        var ctrlKey = false;
        var shifted = e.shiftKey ? true : false;
        var tagType = false;
        var selector;

        // Check If is CTRL Key.
        if ((e.ctrlKey === true || e.metaKey === true)){
            ctrlKey = true;
        }

        // Stop if this target is input or textarea.
        if (tag == 'input' || tag == 'textarea') {
            tagType = true;
        }

        // Hide. delete
        if (code == 46 && ctrlKey === false && tagType === false) {
            insert_rule(null, "display", "none", '');
            option_change();
            clean();
            gui_update();
        }

        // go parent element
        if (code == 80 && ctrlKey === false && tagType === false) {
            if(is_content_selected()){
                if(get_selected_element().parent().length > 0){

                    if (get_selected_element().parent().prop("tagName").toLowerCase() != "html") {

                        // add class to parent.
                        get_selected_element().parent().addClass("yp-will-selected");

                        // clean
                        clean();

                        // Get parent selector.
                        var parentSelector = $.trim(get_parents(iframe.find(".yp-will-selected"), "default"));

                        // Set Selector
                        set_selector(parentSelector, null, false);

                        return false;

                    }

                }
            }
        }

        // ESC for custom selector.
        if (code == 27 && ctrlKey === false) {

            // Was resizing?
            if(is_resizing() || is_visual_editing()){
                return false;
            }

            if($(".sweet-alert").css("display") == 'none' || $(".sweet-alert").length === 0){

                if($(".yp-popup-background").css("display") != 'none'){
                    $(".yp-info-modal-close").trigger("click");
                    return false;
                }

                if (body.hasClass("yp-selector-editor-active")) {
                    $("#yp-selector-editor").val("");
                    apply_selector_editor("#yp-selector-editor");
                    return false;
                }

            }

        }

        if(ctrlKey === false && tagType === false && shifted === true && mainBody.hasClass("yp-iframe-mouseleave") == false){

            if(code != 37 && code != 38 && code != 39 && code != 40){

                setTimeout(function() {

                    // Compare key down time with key up time
                    if (+keyDownAt > +lastKeyUpAt && is_content_selected()){
                        
                        body.addClass("yp-control-key-down");

                        var recentElement = iframe.find(".yp-recent-hover-element");

                        if(recentElement.length > 0){
                            window.mouseoverTrigger = true;
                            recentElement.trigger("mouseover");
                            window.mouseoverTrigger = false;
                        }

                    }

                }, 200);

            }

        }


        // UP DOWN keys for move selected element
        if (ctrlKey === false && tagType === false){
            if(code == 38 || code == 40 || code == 37 || code == 39){
                if(is_content_selected() && is_dragging() === false && mainBody.hasClass("yp-iframe-mouseleave") == false){
                    
                    e.preventDefault();

                    clearTimeout(window.KeymovingDelay);
                    window.KeymovingDelay = setTimeout(function(){

                        var el = get_selected_element();
                        var t = parseInt(el.css("top"));
                        var l = parseInt(el.css("left"));

                        // auto mean 0
                        if(isNaN(t)){t = 0;}
                        if(isNaN(l)){l = 0;}

                        var f = 1;
                        if(shifted){
                            f = 10;
                        }

                        if(code == 38){
                            t = t-f;
                        }else if(code == 40){
                            t = t+f;
                        }

                        if(code == 37){
                            l = l-f;
                        }else if(code == 39){
                            l = l+f;
                        }

                        t = t+"px";
                        l = l+"px";

                        // Insert new data. TOP BOTTOM
                        if(code == 38 || code == 40){

                            insert_rule(null, "top", t, '');

                            // Get bottom
                            var b = parseInt(el.css("bottom"));
                            if(isNaN(b)){b = 0;}

                            if (parseFloat(t) + parseFloat(b) !== 0) {
                                insert_rule(null, "bottom", "auto", '');
                            }
                        
                        }

                        // Insert new data. LEFT RIGHT
                        if(code == 37 || code == 39){

                            insert_rule(null, "left", l, '');

                            // Get Right
                            var r = parseInt(el.css("right"));
                            if(isNaN(r)){r = 0;}

                            if (parseFloat(l) + parseFloat(r) !== 0) {
                                insert_rule(null, "right", "auto", '');
                            }

                        }

                        var position = el.css("position");

                        if(position == 'static' || position == 'relative'){
                            insert_rule(null, "position", "relative", '');
                        }                    

                        // Set default values for top and left options.
                        if ($("li.position-option.active").length > 0) {
                            $("#top-group,#left-group").each(function() {
                            set_default_value(get_option_id(this));
                        });

                        } else {
                            $("li.position-option").removeAttr("data-loaded"); // delete cached data.
                        }

                        option_change();

                    }, 40);

                }
            }
        }

        // Disable backspace key.
        if (code == 8 && ctrlKey === false && tagType === false) {
            e.preventDefault();
            return false;
        }

        // Z Key
        if (code == 90 && ctrlKey == true && tagType === false) {

            e.preventDefault();

            clearTimeout(window.historyDelay);

            if(mainBody.hasClass("yp-history-delay")){
                
                window.historyDelay = setTimeout(function(){
                    undo_history();
                },220);

            }else{
                setTimeout(function(){
                    undo_history();
                },50);
            }

            return false;

        }


        // G Key | Toggle smart guide
        if (code == 71 && ctrlKey === true && tagType === false) {
            e.preventDefault();

            body.toggleClass("yp-smart-guide-disabled");
            return false;
        }


        // Y Key
        if (code == 89 && ctrlKey === true && tagType === false) {

            e.preventDefault();

            clearTimeout(window.historyDelay);

            if(mainBody.hasClass("yp-history-delay")){
                    
                window.historyDelay = setTimeout(function(){
                    redo_history();
                },220);

            }else{
                setTimeout(function(){
                    redo_history();
                },50);
            }

            return false;

        }

        // ESC
        if (code == 27 && ctrlKey === false) {

            e.preventDefault();

            if($(".ui-draggable-dragging").length > 0){
                return false;
            }

            // ESC close customize type window.
            if($("#yp-customizing-type-frame").length > 0 && tagType == false){
                if($("#yp-customizing-type-frame").css("display") == 'block'){
                        $("#yp-current-page").removeClass("active");
                        $("#yp-customizing-type-frame").css("display", "none");
                    return false;
                }
            }

            // ESC hide image uplaoder
            if($("#image_uploader").css("display") == 'block' && tagType == false){
                $("#image_uploader").toggle();
                $("#image_uploader_background").toggle();
                $(".yp-upload-btn").toggleClass("active");
                return false;
            }

            // ESC hide search box
            if(tagType == false || targetElement.is("#search")){

                if($(".yp-search-btn:not(.active)").length > 0){
                    $(".yp-search-btn:not(.active)").trigger("click");
                    return false;
                }
                    
            }

            if(targetElement.hasClass("wqcolorpicker")) {
                targetElement.blur();
                targetElement.next(".iris-picker").hide();
                return false;
            }

            // ESC Hide design information tool
            if($(".info-btn.active").length > 0){
                $(".info-btn.active").trigger("click");
                return false;
            }

            // ESC Disable picker
            if(mainBody.hasClass("yp-element-picker-active") && tagType == false){
                $(".yp-element-picker.active").trigger("click");
                return false;
            }

            // closing advanced 
            if (mainBody.hasClass("autocomplete-active") === false && $(".iris-picker:visible").length === 0 && ($(".sweet-alert").css("display") == 'none') || $(".sweet-alert").length === 0 && tagType == false) {

                if (!mainBody.hasClass("css-editor-close-by-editor")) {


                    if ($("#cssEditorBar").css("display") == 'block') {
                        $(".css-editor-btn").trigger("click");
                        return false;
                    }else if(mainBody.hasClass("visual-css-view-active") && tagType == false){
                        close_visual_manager();
                        return false;
                    }else if ($("#context-menu-layer:visible").length > 0) {
                        $("#context-menu-layer,.context-menu-list").hide();
                        return false;
                    } else if (is_content_selected()) {
                        clean();
                        gui_update();
                        return false;
                    }

                } else {
                    mainBody.removeClass("css-editor-close-by-editor");
                    return false;
                }

            }

        }


        // Space key go to selected element
        if (code == 32 && shifted === false && ctrlKey === false && tagType === false && is_content_selected()) {

            e.preventDefault();

            scroll_to_element(null, false);

            return false;

        }

        // Space key select hovered element
        if (code == 32 && shifted === false && tagType === false && is_content_selected() === false && $(".yp-selector-mode").hasClass("active")) {

            e.preventDefault();

            if(iframe.find(".yp-selected").length > 0){

                if(mainBody.hasClass("yp-sharp-selector-mode-active")){
                    selector = $.trim(get_parents(null, "sharp"));
                }else{
                    selector = $.trim(get_parents(null, "default"));
                }

                set_selector(selector, get_selected_element(), true);

            }

            return false;

        }

        // Space key select multiple hovered element
        if (code == 32 && shifted === true && tagType === false && is_content_selected() === true && $(".yp-selector-mode").hasClass("active")) {

            e.preventDefault();

            if(iframe.find(".yp-multiple-selected").length == 0){
                return false;
            }

            var selectorCurrent = get_current_selector();
            var selectorNew = get_parents(iframe.find(".yp-multiple-selected"), "sharp");
            paintCanvas.other.find(".yp-selected-others-multiple-box").remove();
            iframe.find(".yp-multiple-selected").addClass("yp-selected-others").removeClass("yp-multiple-selected");
            set_selector(selectorCurrent+","+selectorNew, get_selected_element(), true);

            return false;

        }

        // R Key
        if (code == 82 && ctrlKey === false && tagType === false) {
            e.preventDefault();
            $(".yp-responsive-btn").trigger("click");
            return false;
        }

        // M Key
        if (code == 77 && ctrlKey === false && tagType === false) {
            e.preventDefault();
            $(".yp-ruler-btn").trigger("click");
            return false;
        }

        // W Key
        if (code == 87 && ctrlKey === false && tagType === false) {
            e.preventDefault();
            $(".yp-wireframe-btn").trigger("click");
            return false;
        }

        // D Key
        if (code == 68 && ctrlKey === false && tagType === false) {
            e.preventDefault();
            $(".info-btn:not(.active)").trigger("click");
            return false;
        }

        // H Key
        if (code == 72 && ctrlKey === false && tagType === false) {
            e.preventDefault();
            panel_toggle();
            return false;
        }

        // " Key
        if($(".css-editor-btn").length > 0){
            if (code == 162 && ctrlKey === false && tagType === false && mainBody.hasClass("process-by-code-editor") === false) {
                e.preventDefault();

                if (is_animate_creator()) {
                    ypMessage({title: lang.sorry,text: lang.cantEditor,animation: false,customClass: "editor-style-ok"});
                    return false;
                }

                $(".css-editor-btn").trigger("click");
                return false;
            }
        }

        // " For Chrome Key
        if (code == 192 && ctrlKey === false && tagType === false && mainBody.hasClass("process-by-code-editor") === false) {
            e.preventDefault();

            if (is_animate_creator()) {
                ypMessage({title: lang.sorry,text: lang.cantEditor,animation: false,customClass: "editor-style-ok"});
                return false;
            }

            $(".css-editor-btn").trigger("click");
            return false;
        }

        // F Key
        if (code == 70 && ctrlKey === false && tagType === false) {

            e.preventDefault();
            $(".yp-search-btn.active").trigger("click");

            if($(".yp-search-btn.active").length == 0){
                $("#search").focus();
            }

            return false;
        }

    });



    /* ---------------------------------------------------- */
    /* ESC Close Ace Editor                                 */
    /* ---------------------------------------------------- */
    editor.commands.addCommand({

        name: 'close',
        bindKey: {
            win: 'ESC',
            mac: 'ESC'
        },
        exec: function() {

            $(".css-editor-btn").trigger("click");
            mainBody.addClass("css-editor-close-by-editor");

        },

        readOnly: false

    });

    
    /* ---------------------------------------------------- */
    /* Disable Form submission in iframe                    */
    /* ---------------------------------------------------- */
    iframe.find("form").submit(function(e) {
        e.preventDefault();
        return false;
    });


    /* ---------------------------------------------------- */
    /* apply yp-live-css-data style                         */
    /* ---------------------------------------------------- */
    function apply_css_data(data){

        // Append all css to iframe.
        if (iframe.find("#yp-live-css-data").length === 0) {
            editor_data_element().after("<style id='yp-live-css-data'></style>");
        }

        // convert normal CSS hover/active etc styles to native codes.
        data = css_editor_filter(data);

        // Comments
        update_comment_live(data);

        // Need to process.
        mainBody.addClass("yp-need-to-process");

        // Update css source.
        iframe.find("#yp-live-css-data").html(data);

        // Empty data.
        editor_data_element().empty();

        // Remove ex.
        iframe.find(".yp-live-css").remove();

        // Update
        $(".yp-save-btn").html(lang.save).removeClass("yp-disabled").addClass("waiting-for-save");

        // Update current data
        editor_data_element().addClass("yp-data-updated");
        $(".active-customizing-list").addClass("customizing-type-updated");

    }


    /* ---------------------------------------------------- */
    /* Undo Changes                                         */
    /* ---------------------------------------------------- */
    function undo_history(){

        if(editor.session.getUndoManager().hasUndo() === false){
            return false;
        }

        if(is_resizing() || is_visual_editing() || is_dragging() || mainBody.hasClass("yp-processing-now")){
            return false;
        }

        if (is_animate_creator()) {
            ypMessage({title: lang.sorry,text: lang.cantUndo,animation: false,customClass: "editor-style-ok"});
            return false;
        }

        if (is_animation_manager()) {
            ypMessage({title: lang.sorry,text: lang.cantUndoAnimManager,animation: false,customClass: "editor-style-ok"});
            return false;
        }

        editor.commands.exec("undo", editor);
        var newData = editor.getValue();
        apply_css_data(newData);

        check_undoable_history();

        if(is_responsive_mod()){
            update_responsive_breakpoints();
        }

        insert_default_options();

        // Update visual view if active
        if(mainBody.hasClass("visual-css-view-active")){

            update_visual_view();

            active_view_group();

        }

        // must
        setTimeout(function(){
            gui_update();
        }, 10);

        draw();

    }


    /* ---------------------------------------------------- */
    /* Redo the changes                                     */
    /* ---------------------------------------------------- */
    function redo_history(){

        if(editor.session.getUndoManager().hasRedo() === false){
            return false;
        }

        if(is_resizing() || is_visual_editing() || is_dragging() || mainBody.hasClass("yp-processing-now")){
            return false;
        }

        if (is_animate_creator()) {
            ypMessage({title: lang.sorry,text: lang.cantUndo,animation: false,customClass: "editor-style-ok"});
            return false;
        }

        if (is_animation_manager()) {
            ypMessage({title: lang.sorry,text: lang.cantUndoAnimManager,animation: false,customClass: "editor-style-ok"});
            return false;
        }

        editor.commands.exec("redo", editor);
        var newData = editor.getValue();
        apply_css_data(newData);

        check_undoable_history();

        if(is_responsive_mod()){
            update_responsive_breakpoints();
        }

        insert_default_options();

        // Update visual view if active
        if(mainBody.hasClass("visual-css-view-active")){

            update_visual_view();

            active_view_group();

        }

        // must
        setTimeout(function(){
            gui_update();
        }, 10);

        draw();

    }

    

    /* ---------------------------------------------------- */
    /* Has Redo? Has Undo?                                  */
    /* ---------------------------------------------------- */
    function check_undoable_history(){

        // Has Undo?
        if(editor.session.getUndoManager().hasUndo() === false){
            $(".undo-btn").addClass("disabled");
        }else{
            $(".undo-btn").removeClass("disabled");
        }

        // Has Redo?
        if(editor.session.getUndoManager().hasRedo() === false){
            $(".redo-btn").addClass("disabled");
        }else{
            $(".redo-btn").removeClass("disabled");
        }

    }



    /* ---------------------------------------------------- */
    /* Measuring Tool                                       */
    /* ---------------------------------------------------- */
    $(".yp-ruler-btn").click(function() {

        iframe.find(".yp-recent-hover-element").removeClass("yp-recent-hover-element");

        if(is_content_selected() === false){
            clean();
        }

        body.toggleClass("yp-metric-disable");
        gui_update();

        $(".cursor-main-btn").toggleClass("active");

        return false;

    });

    
    /* ---------------------------------------------------- */
    /* Up / Down keys for property input value              */
    /* ---------------------------------------------------- */
    $(".yp-after-css-val").keydown(function(e) {

        var code = e.keyCode || e.which;

        if (code == 38) {
            e.preventDefault();
            $(this).val(parseFloat($(this).val()) + parseFloat(1));
        }

        if (code == 40) {
            e.preventDefault();
            $(this).val(parseFloat($(this).val()) - parseFloat(1));
        }

    });


    /* ---------------------------------------------------- */
    /* Select all value on input click                      */
    /* ---------------------------------------------------- */
    $(".yp-after-css-val").on("click", function(){
        
        if(!$(this).hasClass("select-able")){
            $(this)[0].setSelectionRange(0, $(this).val().length);
        }
        $(this).addClass("select-able");

    }).on("blur", function(){
        $(this).removeClass("select-able");
    });

    
    /* ---------------------------------------------------- */
    /* Getting option ID                                    */
    /* ---------------------------------------------------- */
    function get_option_id(element) {
        return $(element).attr("id").replace("-group", "");
    }


    /* ---------------------------------------------------- */
    /* hasAttr Fn                                           */
    /* ---------------------------------------------------- */
    $.fn.hasAttr = function(name) {  
       return this.attr(name) !== undefined;
    };

    /* ---------------------------------------------------- */
    /* getCursorPosition Fn                                 */
    /* ---------------------------------------------------- */
    $.fn.getCursorPosition = function() {
        var input = this.get(0);
        if (!input) return; // No (input) element found
        if ('selectionStart' in input) {
            // Standard-compliant browsers
            return input.selectionStart;
        } else if (document.selection) {
            // IE
            input.focus();
            var sel = document.selection.createRange();
            var selLen = document.selection.createRange().text.length;
            sel.moveStart('character', -input.value.length);
            return sel.text.length - selLen;
        }
    };


    /* ---------------------------------------------------- */
    /* IsDefined                                            */
    /* ---------------------------------------------------- */
    function isDefined(a){
        if(typeof a !== typeof undefined && a !== false && a != '' && a != ' ' && a != 'undefined' && a !== null){
            return true;
        }else{
            return false;
        }
    }


    /* ---------------------------------------------------- */
    /* IsUndefined                                          */
    /* ---------------------------------------------------- */
    function isUndefined(a){
        if(typeof a === typeof undefined || a === false || a === '' || a == ' ' || a == 'undefined' || a === null){
            return true;
        }else{
            return false;
        }
    }


    /* ---------------------------------------------------- */
    /* CSSImportant Fn                                      */
    /* ---------------------------------------------------- */
    $.fn.cssImportant = function(rule, value) {

        // Set default CSS.
        this.css(rule, value);

        // add important
        $(this).attr("style", this.attr("style").replace(rule + ": " + value, rule + ": " + value + " !important"));

    };


    /* ---------------------------------------------------- */
    /* Live Preview Button                                  */
    /* ---------------------------------------------------- */
    $(".yp-button-live").click(function() {

        var el = $(this);
        var href = el.attr("data-href");
        el.addClass("live-btn-loading");

        if (mainBody.hasClass("yp-yellow-pencil-demo-mode")) {
            ypMessage({title: lang.live_preview_alert,type: "info",animation: false,customClass: "editor-style-ok"});
            el.removeClass("live-btn-loading");
            return false;
        }

        var type, allcss = '';
        iframe.find(".yp-inline-data").each(function(){

            // Current source type: Global, template, single.
            type = $(this).attr("data-source-mode");

            // Get clean CSS
            allcss += get_clean_css(true, type, false);

        });

        var previewAjax = $.post( ajaxurl, {
            action: "yp_preview_data_save",
            yp_data: allcss
        });

        // Done.
        previewAjax.always(function(data) {
            el.removeClass("live-btn-loading");
            window.open(href, href);
            return false;
        });

    });


    /* ---------------------------------------------------- */
    /* Setting the Selector                                 */
    /* ---------------------------------------------------- */
    function set_selector(selector, selected, cleanm) {

        // Trigger mouseover
        window.mouseoverTrigger = true;

        // Cleans
        if(cleanm){
            clean();
        }

        if(selector.trim() == "*"){
            return false;
        }

        // check and get element
        var element = check_selector(get_foundable_query(selector,true,true,false,false),true,false,false);

        // stop if not valid
        if(element == false){
            return false;
        }

        if (iframe.find(".yp-will-selected").length > 0) {
            iframe.find(".yp-will-selected").trigger("mouseover").trigger("click");
            iframe.find(".yp-will-selected").removeClass("yp-will-selected");
        } else if(selected !== null){
            selected.trigger("mouseover").trigger("click");
        }else{
            element.filter(":visible").first().trigger("mouseover").trigger("click");
        }

        if (element.length > 1) {
            iframe.find(selector).not(".yp-selected,.yp-multiple-selected").addClass("yp-selected-others");
        }

        body.addClass("yp-content-selected");

        // can draw again when cursor already out from element after select
        if(!mainBody.hasClass("yp-control-key-down")){
            window.firstSelectLimit = true;
        }

        // sizes
        window.orginalHeight = parseFloat(element.css("height").replace(/px/g,''));
        window.orginalWidth = parseFloat(element.css("width").replace(/px/g,''));

        // Float support
        if(element.css("float") == 'right'){
            body.addClass("yp-element-float");
        }else{
            body.removeClass("yp-element-float");
        }

        // list
        var ttag = element.prop("tagName").toLowerCase();
        if(ttag == 'ul' || ttag == 'ol' || ttag == 'li'){
            body.addClass("yp-element-list");
            }else{
            body.removeClass("yp-element-list");
        }

        // flex container
        var display = element.css("display");
        if(display == "flex" || display == "inline-flex"){
            body.addClass("yp-flex-container");
            $("li.flex-option").insertBefore($("li.grid-option")); // take before to run same property.
        }

        // flex element
        if(element.parent().length > 0){
            display = element.parent().css("display");
            if(display == "flex" || display == "inline-flex"){
                body.addClass("yp-flex-element");
                $("li.flex-option").insertBefore($("li.grid-option")); // take before to run same property.
            }
        }

        // grid option
        display = element.css("display");
        if(display == "grid" || display == "inline-grid"){
            body.addClass("yp-grid-element");
            $("li.grid-option").insertBefore($("li.flex-option")); // take before to run same property.
        }

        var tooltip = paintCanvas.general.find(".yp-selected-tooltip");
        tooltip.html("<small class='yp-tooltip-small'>" + paintCanvas.general.find(".yp-selected-tooltip small").html() + "</small> " + selector);

        // If have any : symbol
        if(/:/g.test(selector)){

            // Use native hover system
            if(/:hover/g.test(selector)){

                body.addClass("yp-selector-hover");
                body.attr("data-yp-selector", ":hover");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:hover/g, "");

            }

            // Use native focus system
            if(/:focus/g.test(selector)){

                body.addClass("yp-selector-focus");
                body.attr("data-yp-selector", ":focus");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:focus/g, "");

            }

            // Use native visited system
            if(/:visited/g.test(selector)){

                body.addClass("yp-selector-visited");
                body.attr("data-yp-selector", ":visited");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:visited/g, "");

            }

            // Use native link system
            if(/:link/g.test(selector)){

                body.addClass("yp-selector-link");
                body.attr("data-yp-selector", ":link");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:link/g, "");

            }

            // Use native active system
            if(/:active/g.test(selector)){

                body.addClass("yp-selector-active");
                body.attr("data-yp-selector", ":active");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:active/g, "");

            }

            // Use native checked system
            if(/:checked/g.test(selector)){

                body.addClass("yp-selector-checked");
                body.attr("data-yp-selector", ":checked");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:checked/g, "");

            }

            // Use native disabled system
            if(/:disabled/g.test(selector)){

                body.addClass("yp-selector-disabled");
                body.attr("data-yp-selector", ":disabled");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:disabled/g, "");

            }

            // Use native enabled system
            if(/:enabled/g.test(selector)){

                body.addClass("yp-selector-enabled");
                body.attr("data-yp-selector", ":enabled");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:enabled/g, "");

            }

            // Use native invalid system
            if(/:invalid/g.test(selector)){

                body.addClass("yp-selector-invalid");
                body.attr("data-yp-selector", ":invalid");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:invalid/g, "");

            }

            // Use native valid system
            if(/:valid/g.test(selector)){

                body.addClass("yp-selector-valid");
                body.attr("data-yp-selector", ":valid");
                paintCanvas.general.find(".yp-selected-tooltip span").remove();
                selector = selector.replace(/:valid/g, "");

            }

        }

        // Update selector
        window.setSelector = selector;
        body.attr("data-clickable-select", selector);

        // Update States
        states_changes_on_rule_group();

        // Update CSS Editor
        if(mainBody.hasClass("yp-css-editor-active")){
            editor_update();
        }

        // update visual manager if is open
        active_view_group();

        // update parent tree
        if(window.targetIsParentTree == false && ypOption.show_parent_tree == true){
            parent_tree_bar();
        }

        insert_default_options();

        gui_update();

        draw();

        if(is_animation_manager()){
            animation_manager();
        }

        // Update the element informations.
        if($(".advanced-info-box").css("display") == 'block'){
            update_design_information("element");
        }

        window.setSelector = false;

        // trigger mouseover
        window.mouseoverTrigger = false;

        update_tooltip_comment();

    }

    
    /* ---------------------------------------------------- */
    /* Default starter                                      */
    /* ---------------------------------------------------- */
    window.cacheFirstLoad = [get_active_type()];

    var types = ["single", "template", "global"];
    for(var i = 0; i < types.length; i++){

        if(types[i] != window.cacheFirstLoad){

            update_customize_type(types[i]);
            editor.setValue(get_clean_css(true, types[i], true));
            editor.getSession().setUndoManager(new ace.UndoManager());

        }

    }

    // Default starter
    update_customize_type();
    editor.setValue(get_clean_css(true, null, true));
    editor.getSession().setUndoManager(new ace.UndoManager());


    
    /* ---------------------------------------------------- */
    /* Tooltips                                             */
    /* ---------------------------------------------------- */
    $('[data-toggle="tooltipTopBottom"]').tooltip({
        animation: false,
        container: ".yp-select-bar",
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        html: true
    });

    $('[data-toggle="tooltip-bar"]').tooltip({
        animation: false,
        container: "body",
        html: true
    });

    $('.info-btn').on('show.bs.tooltip', function () {
        if($(this).hasClass("active")){
            return false;
        }
    });

    $(".yp-none-btn").tooltip({
        animation: false,
        container: '.yp-select-bar',
        title: lang.none,
        delay: { show: 50, hide: 0 }
    });

    $('[data-toggle="tooltipAnimGenerator"]').tooltip({
        animation: false,
        html: true
    });

    $('[data-toggle="tooltip"]').tooltip({

        animation: false,
        container: ".yp-select-bar",
        html: true

    }).on('shown.bs.tooltip', function () {
        
        // Don't show if popover visible
        if($(".popover").length > 0){
            $(this).tooltip("hide");
        }

    });


    /* ---------------------------------------------------- */
    /* Popovers                                             */
    /* ---------------------------------------------------- */
    $('[data-toggle="popover"]').popover({
        animation: false,
        trigger: 'hover',
        container: ".yp-select-bar"
    });

    $('.yp-option-group,.yp-advanced-option').on('shown.bs.popover', function () {
        
        // Don't show if popover visible
        if(parseFloat($(".popover").css("top")) < 80){
            $(this).popover("hide");
        }

    });



    /* ---------------------------------------------------- */
    /* Editor Panel: Draggable                              */
    /* ---------------------------------------------------- */
    $(".yp-select-bar").draggable({

        handle: ".yp-editor-top",
        cancel: ".yp-editor-top *",

        start: function(){

            // create a fake layer
            mainBody.append("<div class='fake-layer' style='background-color:rgba(0,0,0,0.05);'></div>");

            // Disable fixed right panel
            if(mainBody.hasClass("yp-fixed-right-panel")){

                // Update option
                $(".fixed_right_panel_checkbox input").prop('checked', false).trigger("change");
                save_option('fixed_right_panel', "false");

                // be sure panel visible
                panel_toggle(true);

                draw_iframe();

                draw();

                update_gradient_pointers();

            }

        },
        drag: function(event, ui){

            // Max & Min
            ui.position.top = Math.max(-30, ui.position.top);
            ui.position.top = Math.min($(window).height() - 30, ui.position.top);

            // Show placeover for fixed right
            if(ui.position.left > ($(window).width() - $(".yp-select-bar").width())){
                $(".yp-right-panel-placeholder").show();
            }else{
                $(".yp-right-panel-placeholder").hide();
            }

            gui_update();

        },
        stop: function(event, ui){

            $(".fake-layer").remove();

            setTimeout(function(){
                update_gradient_pointers();
            },5);

            // remove placeholder
            $(".yp-right-panel-placeholder").hide();

            // Go fixed right mode.
            if(ui.position.left > ($(window).width() - $(".yp-select-bar").width())){

                $(".fixed_right_panel_checkbox input").prop('checked', true).trigger("change");
                save_option('fixed_right_panel', "true");

                draw_iframe();

                gui_update();

                draw();

                update_gradient_pointers();

            }

        }
    });


    /* ---------------------------------------------------- */
    /* Animation Generator Bar:  Draggable                  */
    /* ---------------------------------------------------- */
    $(".anim-bar").draggable({

        handle: ".anim-bar-title",

        start: function(){

            mainBody.append("<div class='fake-layer'></div>");

        },
        drag: function(event, ui){

            ui.position.top = Math.max( -30, ui.position.top );

        },

        stop: function() {

            $(".anim-bar").addClass("anim-bar-dragged");

            $(".fake-layer").remove();

            setTimeout(function(){
                update_gradient_pointers();
            },5);

        }

    });



    /* ---------------------------------------------------- */
    /* Hide Borders on panel hover                          */
    /* ---------------------------------------------------- */
    $(".top-area-btn-group,.yp-select-bar,.metric,.search-box,#visual-css-view,#leftAreaEditor,.advanced-info-box,.yp-animate-manager").hover(function() {
        if (is_content_selected() === false) {
            clean();
        }
    });


    /* ---------------------------------------------------- */
    /* Align center animation generator panel               */
    /* ---------------------------------------------------- */
    function update_animate_creator_view() {
        if (!$(".anim-bar").hasClass("anim-bar-dragged")) {
            $(".anim-bar").css("left", parseFloat($(window).width() / 2) - ($(".anim-bar").width() / 2));
        }
    }

    
    /* ---------------------------------------------------- */
    /* Editing Scene 10% 50% 100%                           */
    /* ---------------------------------------------------- */
    $(document).on('keydown keyup', '.scenes .scene input', function(e){

        $(this).val(number_filter($(this).val().replace(/\-/g,'')));

        if (parseFloat($(this).val()) > 100) {
            $(this).val('100');
        }

        if (parseFloat($(this).val()) < 0) {
            $(this).val('0');
        }

    });



    /* ---------------------------------------------------- */
    /* Remove no-click-yet class from scene                 */
    /* ---------------------------------------------------- */
    $(document).on('click', '.scenes .scene-no-click-yet', function(e){

        // Remove Class
        $(this).removeClass("scene-no-click-yet");

    });
    


    /* ---------------------------------------------------- */
    /* Last Scene always 100%                               */
    /* ---------------------------------------------------- */
    $(document).on('keyup keydown blur', '.scenes .scene:not(.scene-add):last input', function(e) {

        $(this).val('100');

    });


    /* ---------------------------------------------------- */
    /* First scene always 0%                                */
    /* ---------------------------------------------------- */
    $(document).on('keyup keydown blur', '.scenes .scene:first-child input', function(e) {

        $(this).val('0');

    });


    /* ---------------------------------------------------- */
    /* Creating Animation                                   */
    /* ---------------------------------------------------- */
    function yp_create_anim(name) {

        // Variables
        var total = $(".scenes .scene").length;
        var scenesData = '';
        var i;

        // Create animation from data.
        for (i = 1; i < total; i++) {

            scenesData = scenesData + $(".scenes .scene-" + i + " input").val() + "% {";

            iframe.find("#yp-anim-scenes").find(".style-scene-" + i).each(function() {
                scenesData = scenesData + (($(this).html().match(/\{(.*?)\}/g)).toString().replace("{", "").replace("}", "")) + ";";
            });

            scenesData = scenesData + "}";

        }

        var scenesDataReverse = scenesData.replace(/\}/g, "}YKSYXA");
        var scenesDataReverseArray = scenesDataReverse.split("YKSYXA").reverse();

        // wait
        var watingForAdd = [];
        var added = '{';
        var x,lineData,rules,countT,count,lineAll;

        for (i = 1; i < scenesDataReverseArray.length; i++) {

            // Anim part example data.
            lineData = $.trim(scenesDataReverseArray[i]);
            lineAll = $.trim(scenesDataReverseArray[i]);
            lineData = lineData.split("{")[1].split("}")[0];

            // If is last ie first. ie 0%, no need.
            if (scenesDataReverseArray.length - 1 == i) {

                for (var k = 0; k < watingForAdd.length; k++) {

                    countT = 0;

                    // Search in before
                    var crex = new RegExp("(\{|;)" + watingForAdd[k] + ":");
                    
                    // Find current count
                    if (lineAll.match(crex) !== null) {
                        countT = parseInt(lineAll.match(crex).length);
                    }

                    if (countT === 0) {

                        var el = get_selected_element();
                        var val = el.css(watingForAdd[k]);

                        if (watingForAdd[k] == 'top' && val == 'auto') {
                            val = "0px";
                        }

                        if (watingForAdd[k] == 'left' && val == 'auto') {
                            val = "0px";
                        }

                        if (watingForAdd[k] == 'width' && val == 'auto') {
                            val = el.width();
                        }

                        if (watingForAdd[k] == 'height' && val == 'auto') {
                            val = el.height();
                        }

                        if (watingForAdd[k] == 'opacity' && val == 'auto') {
                            val = "1";
                        }

                        if (watingForAdd[k] != 'right' && val != 'auto') {
                            if (watingForAdd[k] != 'bottom' && val != 'auto') {
                                var all = watingForAdd[k] + ":" + val + ";";
                                lineAll = lineAll.toString().replace(/\}$/, '') + all + "}";
                                scenesData = scenesData.replace("0% {", "0% {" + all);
                                added = added + all;
                            }
                        }

                    }

                }

            }

            // Rules of this part.
            rules = lineData.split(";");

            // get only rules names.
            for (x = 0; x < rules.length; x++) {
                if (rules[x].split(":")[0] != '') {

                    var founded = rules[x].split(":")[0];
                    count = 0;

                    // Search in before
                    if (scenesData.match("{" + founded + ":") !== null) {
                        count = parseInt(scenesData.match("{" + founded + ":").length);
                    }

                    if (scenesData.match(";" + founded + ":") !== null) {
                        count = count + parseInt(scenesData.match(";" + founded + ":").length);
                    }

                    if (count < parseInt(total - 1)) {
                        watingForAdd.push(founded);
                    }

                }
            }

        }

        /* Adding current line data to next line datas. */
        var scenesDataNormal = scenesData.replace(/\}/g, "}TYQA");
        var scenesDataNormalArray = scenesDataNormal.split("TYQA");

        var rulesNames = [];
        var rulesValues = [];

        for (i = 0; i < scenesDataNormalArray.length; i++) {

            // Anim part example data.
            lineData = $.trim(scenesDataNormalArray[i]);

            if (lineData != '' && lineData != ' ') {

                lineData = lineData.split("{")[1].split("}")[0];

                // Rules of this part.
                rules = lineData.split(";");

                // Each all rules
                for (x = 0; x < rules.length; x++) {
                    if (rules[x].split(":")[0] != '') {

                        // Get rule name
                        var foundedName = rules[x].split(":")[0];
                        var foundedValue = rules[x].replace(/^(.*?):(.*?)$/g, "$2");

                        // Clean important prefix.
                        foundedValue = $.trim(foundedValue).replace(/\s+?!important/g,'').replace(/\;$/g,'');

                        // If same rule have in rulesNames, get index.
                        var index = rulesNames.indexOf(foundedName);

                        // Delete ex rule data.
                        if (index != -1) {
                            rulesNames.splice(index, 1);
                            rulesValues.splice(index, 1);
                        }

                        // Update with new rules.
                        rulesNames.push(foundedName);
                        rulesValues.push(foundedValue);

                    }

                }

                var updatedLine = "{" + lineData;

                for (var t = 0; t < rulesNames.length; t++) {

                    var current = rulesNames[t];
                    var currentVal = rulesValues[t];

                    countT = 0;

                    // Search in this line
                    if (updatedLine.match("{" + current + ":") !== null) {
                        countT = parseInt(updatedLine.match("{" + current + ":").length);
                    }

                    if (updatedLine.match(";" + current + ":") !== null) {
                        countT = count + parseInt(updatedLine.match(";" + current + ":").length);
                    }

                    // If any rule have in rulesnames and not have in this line,
                    // so add this rule to this line.
                    if (countT < 1) {
                        updatedLine = "{" + current + ":" + currentVal + ";" + updatedLine.replace("{", "");
                    }

                }

                // update return value.
                var pre = $.trim(scenesDataNormalArray[i]).split("{")[0] + "{" + lineData.replace("{", "") + "}";
                var upNew = $.trim(scenesDataNormalArray[i]).split("{")[0] + "{" + updatedLine.replace("{", "") + "}";
                scenesData = scenesData.replace(pre, upNew);

            }

        }

        // Add animation name.
        scenesData = "@keyframes " + name + "{\r" + scenesData + "\r}";

        scenesData = scenesData.replace(/\}/g, "}\r");

        scenesData = scenesData.replace(";;","");

        return scenesData;

    }


    /* ---------------------------------------------------- */
    /* Play & Stop Animation                                */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-anim-play", function() {

        var element = $(this);

        // pause
        if(mainBody.hasClass("yp-animate-test-playing")){

            $(".scenes .scene-" + window.willActive + "").trigger("click");

            element.html('<span class="dashicons dashicons-controls-play"></span>');
            element.attr("data-original-title","Play").tooltip('fixTitle').tooltip("show");
            
            body.removeClass("yp-animate-test-playing");
            iframe.find("#animate-test-drive").empty();
            body.removeClass("yp-hide-borders-now");

            element_animation_end();

            draw();

            clear_animation_timer();

            return false;
            
        }

        var animName = 'animationGeneratorTestAnimate';

        window.willActive = 1;

        $(".scenes .scene").each(function(i) {

            if ($(this).hasClass("scene-active")) {
                window.willActive = (i + 1);
            }

        });

        if (iframe.find("#yp-anim-scenes style").length === 0) {
            ypMessage({title: lang.all_scenes_empty,text: lang.allScenesEmpty,animation: false,customClass: "editor-style-ok"});
            return false;
        }

        // first scene default.
        $(".scenes .scene-1").trigger("click");

        // Generate keyframe
        var anim = yp_create_anim(animName);

        // add webkit for test.
        anim = anim + " " + anim.replace(/@keyframes/g, '@-webkit-keyframes');

        var delay,delayWait;

        body.addClass("yp-hide-borders-now");

        // Clean scene classes.
        var newClassList = $.trim(mainBody.attr("class").replace(/yp-scene-[0-9]/g, ''));
        mainBody.attr("class", newClassList);

        newClassList = $.trim(iframeBody.attr("class").replace(/yp-scene-[0-9]/g, ''));
        iframeBody.attr("class", newClassList);

        // AddClass
        body.addClass("yp-animate-test-playing");

        // Clean
        iframe.find("#animate-test-drive").empty();

        // Animate
        iframe.find("#animate-test-drive").append("<style>" + get_minimized_css(anim, false) + "</style>");

        // Getting duration.
        delay = $('#animation-duration-value').val();
        if ($('#animation-duration-after').val() == 's') {
            delayWait = delay * 1000; // second to milisecond.
        } else {
            delayWait = delay; //milisecond
        }

        // time out
        delayWait = delayWait - 10;

        // ex: 50s, for apped style.
        delay = delay + $('#animation-duration-after').val();

        // Play.
        iframe.find("#animate-test-drive").append("<style>body.yp-animate-test-playing .yp-selected,body.yp-animate-test-playing .yp-selected-others{animation-name:" + animName + " !important;animation-duration:" + delay + " !important;animation-iteration-count:1 !important;}</style>");

        // playing.
        element.html('<span class="dashicons dashicons-controls-pause"></span>');
        element.attr("data-original-title","Pause").tooltip('fixTitle').tooltip("show");

        clear_animation_timer();

        // Wait until finish. END.
        window.animationTimer4 = setTimeout(function() {

            element.html('<span class="dashicons dashicons-controls-play"></span>');
            element.attr("data-original-title","Play").tooltip('fixTitle');

            if(element.is(":hover")){
                element.tooltip('show');
            }

            body.removeClass("yp-animate-test-playing");
            iframe.find("#animate-test-drive").empty();
            body.removeClass("yp-hide-borders-now");

            $(".scenes .scene-" + window.willActive + "").trigger("click");

            element_animation_end();

            draw();

        }, delayWait);

    });

    /* ---------------------------------------------------- */
    /* Animation name filter                                */
    /* ---------------------------------------------------- */
    $(document).on("keyup", ".editor-style-input input", function(){
        $(this).val(get_basic_id($(this).val()));
    });

    
    /* ---------------------------------------------------- */
    /* Save Animation                                       */
    /* ---------------------------------------------------- */
    $(".yp-anim-save").click(function() {

        if (iframe.find("#yp-anim-scenes style").length === 0) {
            ypMessage({title: lang.sorry,text: lang.allScenesEmpty,animation: false,customClass: "editor-style-ok"});
            return false;
        }

        setTimeout(function(){

            // update animation name.
            var animID = get_basic_id(uppercase_first_letter(get_tag_information(get_current_selector(), false, null)))+"_Animate_" + parseInt(JSON.parse($("#animation-name-group textarea").val()).length + 1);

            $(".editor-style-input input").val(animID).trigger("focus");

        }, 20);

        ypMessage({
            title: lang.animation_name,
            confirmButtonText: lang.save_animation,
            showCancelButton: true,
            text: lang.set_animation_name,
            animation: false,
            customClass: "editor-style-input"
        },function(isConfirm){

            if(isConfirm == false){
                return false;
            }

            // first scene default.
            $(".scenes .scene-1").trigger("click");

            var animName = $(".editor-style-input input").val();
            var anim = yp_create_anim(animName);

            // don't save on demo mode
            if(mainBody.hasClass("yp-yellow-pencil-demo-mode") == false){

                // post animation
                $.post(ajaxurl, {

                    action: "yp_add_animation",
                    yp_anim_data: anim,
                    yp_anim_name: animName

                });

            }

            // Add animation name
            var textareaData = $("#animation-name-group textarea");
            textareaData.val(textareaData.val().replace(/\}\]$/, '},{"value":"'+animName+'","label":"'+animName+'"}]'));

            // Update Autocomplete script
            $("#yp-animation-name").autocomplete({
                source: JSON.parse(decodeURIComponent(textareaData.val()))
            });

            // Append style
            iframe.find("#yp-animate-data").append("<style id='" + animName + "style'>" + anim + "</style>");
            iframe.find("#yp-animate-data").append("<style id='webkit-" + animName + "style'>" + anim.replace("@keyframes", "@-webkit-keyframes") + "</style>");

            // close
            close_animation_generator(false);

            // apply animation to selected element
            setTimeout(function() {
                insert_rule(null, "animation-name", animName, '');
                insert_rule(null, "animation-fill-mode", 'both', '');
                $("li.animation-option").removeAttr("data-loaded");
                $("#yp-animation-name").val(animName).trigger("blur");
                focus_option("animation-name");
            }, 500);


        });

        return false;

    });


    /* ---------------------------------------------------- */
    /* Cancel Animation Generating                          */
    /* ---------------------------------------------------- */
    function close_animation_generator(disable) {

        // Clean classes.
        body.removeClass("yp-anim-creator").removeAttr("data-anim-scene").removeClass("yp-animate-test-playing");

        body.removeAttr("data-anim-scene");

        // Clean scene classes.
        var newClassList = $.trim(mainBody.attr("class").replace(/yp-scene-[0-9]/g, ''));
        mainBody.attr("class", newClassList);

        newClassList = $.trim(iframeBody.attr("class").replace(/yp-scene-[0-9]/g, ''));
        iframeBody.attr("class", newClassList);

        // Clean all scene data.
        iframe.find("#yp-anim-scenes #scene-1,#yp-anim-scenes #scene-2,#yp-anim-scenes #scene-3,#yp-anim-scenes #scene-4,#yp-anim-scenes #scene-5,#yp-anim-scenes #scene-6").empty();

        // Set default data again.
        insert_default_options();

        // Delete 3,4,5,6scenes.
        $(".anim-bar .scenes .scene:not(.scene-1):not(.scene-2):not(.scene-add)").each(function(){
            $(this).remove();
        });

        // delete test data
        iframe.find("#animate-test-drive").empty();

        // show again.
        $(".scene-add").show();

        // re set default value
        if(disable){
            insert_rule(null, "animation-name", window.animGeneratorOldAnim, '');
            insert_rule(null, "animation-duration", window.animGeneratorOldAnimDuration, window.animGeneratorOldAnimDurationF);
            insert_rule(null, "animation-delay", window.animGeneratorOldAnimDelay, window.animGeneratorOldAnimDelayF);
            insert_rule(null, "animation-fill-mode", window.animGeneratorOldAnimFillMode, '');
        }

        gui_update();

        draw();

    }



    /* ---------------------------------------------------- */
    /* Focus To Option                                      */
    /* ---------------------------------------------------- */
    function focus_option(id){

        var group = $("#" + id + "-group");
        $(".yp-this-content").hide();
        $(".yp-editor-list > li").removeClass("active");
        group.parent().prev("h3").trigger("click");
        group.parent().parent("li").show(); // be sure it visible.
        group.addClass("focus-option");

        setTimeout(function(){
            group.removeClass("focus-option");
        }, 1600);

        gui_update();

    }



    /* ---------------------------------------------------- */
    /* Delete scene                                         */
    /* ---------------------------------------------------- */
    $(document).on("click", ".scenes .scene .scene-delete", function() {

        var current = $(this).parent().attr("data-scene").replace("scene-", "");
        var next = $(".scenes .scene").length - 1;

        // delete all
        $(".scenes .scene:not('.scene-add')").remove();

        for (var i = 1; i < next; i++) {
            $(".scene-add").trigger("click");
        }

        if (next == 6) {
            $(".scene-add").show();
            update_animate_creator_view();
        }

        // Delete all styles for this scene.
        iframe.find("#yp-anim-scenes #scene-" + current + "").empty();

        // prev active
        $(".scenes .scene-" + (current - 1) + "").trigger("click");

        return false;

    });


    /* ---------------------------------------------------- */
    /* Scene properties popover                             */
    /* ---------------------------------------------------- */
    $(document).on("mouseover", '.scene-info', function(){

        var activeScene = $(this).parent().parent().attr("data-scene");

        var content = '';

        iframe.find("#yp-anim-scenes #" + activeScene + " style").each(function(){

            content += "<span class='anim-info-rule'>" + $(this).attr("data-rule") + ": </span>";
            content += "<span class='anim-info-value'>" + esc_data_value($(this).html()) + "</span>";
            content += "<span class='anim-info-border'></span>";

        });

        $(this).tooltip("destroy");
        $(this).popover("destroy");

        if(content != ''){

            $(this).popover({
                animation: false,
                title: lang.scene_properties + " " + $(".anim-bar ." + activeScene + " input").val() + "%",
                content: content,
                trigger: 'hover',
                placement: "top",
                container: ".anim-bar",
                html: true
            }).popover("show");

        }else{

            $(this).tooltip({

                title: lang.no_property_yet,
                animation: false,
                placement: 'top',
                trigger: 'hover',
                container: ".anim-bar",
                html: true
            }).tooltip("show");

        }

    });


    /* ---------------------------------------------------- */
    /* Add Scene                                            */
    /* ---------------------------------------------------- */
    $(document).on("click", ".scenes .scene", function() {

        // if is scene add.
        if ($(this).hasClass("scene-add")) {

            var next = $(".scenes .scene").length;

            $(".scenes .scene-let-delete").removeClass("scene-let-delete");

            $(".scene-add").before('<div class="scene-let-delete scene scene-' + next + '" data-scene="scene-' + next + '"><span class="dashicons dashicons-trash scene-delete"></span><p><span class="scene-info">i</span>' + lang.scene + ' ' + next + '<span><input type="text" value="100" /></span></p></div>');

            // select added scene.
            $(".scenes .scene-" + next + "").trigger("click");

            $(".scene-1 input").val("0");
            $(".scene-2 input").val("100");

            if (next == 3) {
                $(".scene-1 input").val("0");
                $(".scene-2 input").val("50");
                $(".scene-3 input").val("100");
            }

            if (next == 4) {
                $(".scene-1 input").val("0");
                $(".scene-2 input").val("33.3");
                $(".scene-3 input").val("66.6");
                $(".scene-4 input").val("100");
            }

            if (next == 5) {
                $(".scene-1 input").val("0");
                $(".scene-2 input").val("25");
                $(".scene-3 input").val("50");
                $(".scene-4 input").val("75");
                $(".scene-5 input").val("100");
            }

            if (next == 6) {
                $(".scene-1 input").val("0");
                $(".scene-2 input").val("20");
                $(".scene-3 input").val("40");
                $(".scene-4 input").val("60");
                $(".scene-5 input").val("80");
                $(".scene-6 input").val("100");
            }

            if (next == 6) {
                $(".scene-add").hide();
            }

            // scan current scene styles
            var rule, style, prevStyle;
            iframe.find("#yp-anim-scenes #scene-" + next + " style").each(function(){

                style = $(this);
                rule = style.attr("data-rule");

                // check if same rule has in previous scene
                prevStyle = iframe.find("#yp-anim-scenes #scene-" + parseInt(next - 1) + " style[data-rule='"+rule+"']");

                // skip if not has
                if(prevStyle.length == 0){
                    return true;
                }

                // apply previous rule style to current scene rule style
                style.html(prevStyle.html().replace(/body\.yp-scene-(\d+)/g, 'body.yp-scene-' + next));

            });

            // scan previous scene styles

            update_animate_creator_view();

            return false;

        }

        // Set active class
        $(".scene-active").removeClass("scene-active");
        $(this).addClass("scene-active");

        // Update current scene.
        body.attr("data-anim-scene", $(this).attr("data-scene"));

        // Delete ex scene classes.
        var newClassList = $.trim(mainBody.attr("class").replace(/yp-scene-[0-9]/g, ''));
        mainBody.attr("class", newClassList);

        newClassList = $.trim(iframeBody.attr("class").replace(/yp-scene-[0-9]/g, ''));
        iframeBody.attr("class", newClassList);

        // Add new scene class.
        body.addClass("yp-" + $(this).attr("data-scene"));

        // loop
        for (var currentVal = parseInt($(this).attr("data-scene").replace("scene-", ""));currentVal > 1; currentVal--) {
            body.addClass("yp-scene-" + currentVal);
        }

        insert_default_options();

        $(".yp-disable-btn.active").trigger("click");

        draw();

    });


    /* ---------------------------------------------------- */
    /* Cancel Animation Generating                          */
    /* ---------------------------------------------------- */
    $(".yp-anim-cancel").click(function() {

        ypMessage({
            title: lang.closeAnim,
            showCancelButton: true,
            animation: false,
            customClass: "editor-style",
            confirmButtonText: "Close",
        },function(isConfirm){

            if(isConfirm){

                swal.close();
                close_animation_generator(true);

            }

        });

    });


    /* ---------------------------------------------------- */
    /* Open Animation Generator                             */
    /* ---------------------------------------------------- */
    $(".yp-add-animation-link").click(function() {

        window.animGeneratorOldAnim = $("#yp-animation-name").val();
        window.animGeneratorOldAnimDuration = $("#yp-animation-duration").val();
        window.animGeneratorOldAnimDelay = $("#yp-animation-delay").val();
        window.animGeneratorOldAnimDurationF = $("#animation-duration-after").val();
        window.animGeneratorOldAnimDelayF = $("#animation-delay-after").val();
        window.animGeneratorOldAnimFillMode = $("#yp-animation-fill-mode").val();

        if(window.animGeneratorOldAnim == 'none'){
            window.animGeneratorOldAnim = 'disable';
        }

        insert_rule(null, 'animation-name', 'disable', '');

        if ($("#animation-duration-value").val() == '0' || $("#animation-duration-value").val() == '0.00'){
            $("#animation-duration-value").val("1");
            $("#animation-duration-value").trigger("blur");
        }

         // append anim data area.
        if (iframe.find("#yp-anim-scenes").length === 0) {

            // Append anim style area.
            iframe.find("#yp-animate-data").after('<div id="yp-anim-scenes"><div id="scene-1"></div><div id="scene-2"></div><div id="scene-3"></div><div id="scene-4"></div><div id="scene-5"></div><div id="scene-6"></div></div><div id="animate-test-drive"></div>');
            
        }

        // close css editor
        if (mainBody.hasClass("yp-css-editor-active")) {
            $(".yp-css-close-btn").trigger("click");
        }

        // Start
        body.addClass("yp-anim-creator");

        body.addClass("yp-scene-1");
        body.attr("data-anim-scene", "scene-1");

        $(".scene-active").removeClass("scene-active");

        $(".scenes .scene:first-child").addClass("scene-active");

        // Resize scenes area.
        update_animate_creator_view();

        // Back to list.
        $(".animation-option.active > h3").trigger("click");

        // update states when start animation generator
        states_changes_on_rule_group();

        gui_update();

        return false;

    });
       


    /* ---------------------------------------------------- */
    /* Inline Collapse, used for transform                  */
    /* ---------------------------------------------------- */
    $(".yp-advanced-link").click(function() {

        if ($(this).hasClass("yp-add-animation-link")) {
            return false;
        }

        $(".yp-on").not(this).removeClass("yp-on");

        $(".yp-advanced-option").not($(this).next(".yp-advanced-option")).hide(0);

        $(this).next(".yp-advanced-option").toggle(0);

        $(this).toggleClass("yp-on");

        gui_update();

    });


    /* ---------------------------------------------------- */
    /* Updating Responsive handles on CSS editor toggle     */
    /* ---------------------------------------------------- */
    $(".top-area-btn,.yp-css-close-btn").click(function(){
        setTimeout(function(){
            window.FrameleftOffset = undefined;
            draw_responsive_handle();
        },50);
    });


    /* ---------------------------------------------------- */
    /* Active Classes Left Panel                            */
    /* ---------------------------------------------------- */
    $(".top-area-btn:not(.left-menu-btn):not(.undo-btn):not(.redo-btn):not(.css-editor-btn):not(.cursor-main-btn)").click(function(){

        if(is_animate_creator() === false){

            $(this).toggleClass("active");
            $(this).tooltip("hide");

        }else if($(this).hasClass("yp-selector-mode") === false && $(this).hasClass("yp-search-btn") === false){

            $(this).toggleClass("active");
            $(this).tooltip("hide");

        }
        
    });



    /* ---------------------------------------------------- */
    /* Toggle interface setting menu                        */
    /* ---------------------------------------------------- */
    $(".left-menu-btn").click(function(){
        $(this).toggleClass("yhover");
        $(".interface-settings").toggle();
    });

    
    /* ---------------------------------------------------- */
    /* Undo                                                 */
    /* ---------------------------------------------------- */
    $(".undo-btn").click(function() {

        clearTimeout(window.historyDelay);

        if(mainBody.hasClass("yp-history-delay")){
                
            window.historyDelay = setTimeout(function(){
                undo_history();
            },220);

        }else{
            undo_history();
        }

    });


    /* ---------------------------------------------------- */
    /* Redo                                                 */
    /* ---------------------------------------------------- */
    $(".redo-btn").click(function() {

        clearTimeout(window.historyDelay);

        if(mainBody.hasClass("yp-history-delay")){
                
            window.historyDelay = setTimeout(function(){
                redo_history();
            },220);

        }else{
            redo_history();
        }

    });


    // setup json first
    $(".yp-flat-colors,.yp-meterial-colors,.yp-nice-colors").click(function(){

        // Only when colorsReady not true
        if(window.colorsReady != true){

            // Get colors json
            $.getJSON(pluginurl + "library/json/colors.json", function(result){
                   
                // -- FLAT

                // Empty Colors
                var html = "";

                // Add all colors
                $.each(result.flat, function(i, v){
                    html += "<div class='yp-flat-c' data-color='#"+v+"' style='background:#"+v+"'></div>";
                });

                // Append
                $(".yp_flat_colors_area").html(html);


                // -- METERIAL

                // Empty Colors
                html = "";

                // Add all colors
                $.each(result.meterial, function(i, v){
                    html += "<div class='yp-meterial-c' data-color='#"+v+"' style='background:#"+v+"'></div>";
                });

                // Append
                $(".yp_meterial_colors_area").html(html);


                // -- NICE

                // Empty Colors
                html = "";

                // Add all colors
                $.each(result.nice, function(i, v){
                    html += "<div class='yp-nice-c' data-color='#"+v+"' style='background:#"+v+"'></div>";
                });

                // Append
                $(".yp_nice_colors_area").html(html);

                window.colorsReady = true;

            }).fail(function() {
                show_notification("Could Not Load Json library. (colors.json)", "jsonError");
            });

        }

    });


    /* ---------------------------------------------------- */
    /* Open Pattern section and dynamic loads               */
    /* ---------------------------------------------------- */
    $(".yp-bg-img-btn").click(function() {

        // Element
        var el = $(this);

        // LOAD PATTERNS JSON
        if(el.hasAttr("data-json")){

            // Load pattern json
            $.getJSON(el.attr("data-json"), function(result){

                // Append only one time
                var appendHtml = '';

                // Create html
                $.each(result.patterns, function(i, v){
                    appendHtml += '<div class="yp_bg_assets" data-url="'+v+'"></div>';
                });

                // Append
                $(".yp_background_assets").append(appendHtml);

                // remove load json
                el.removeAttr("data-json");

                // After loaded, start to loading visible images
                pattern_first_load_near();

            }).fail(function() {
                show_notification("Could Not Load Json library. (patterns.json)", "jsonError");
            });

        }
        // load end

        // Show pattern section
        el.toggleClass("active");
        $(".yp_background_assets").toggle();

        // sample image
        if(el.hasClass("active")){
            $(".yp-background-image-show").hide();
        }else{
            $(".yp-background-image-show").show();
        }

        // get CSS
        var val = $("#yp-background-image").val();

        // Update active pattern
        if(val.indexOf("yellow-pencil") == -1){
            $(".yp_bg_assets").removeClass("active");
        }else{
            $(".yp_bg_assets[data-url='" + val.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, "") + "']").addClass("active");
        }
        
        // If not json loading
        if(el.hasAttr("data-json") == false){

            // Delay
            pattern_first_load_near();

        }

        gui_update();

    });


    function pattern_first_load_near(){

        setTimeout(function(){

            var activePattern = 0;

            if($(".yp_bg_assets.active").length > 0){

                var index = $(".yp_bg_assets.active").index();

                activePattern = (parseInt(index/4)-1.5) * 68;
            
            }

            // ScrollTop
            $(".yp_background_assets").scrollTop(activePattern);

            // Wait 10ms to load
            load_near_patterns();

        },10);

    }


    /* ---------------------------------------------------- */
    /* Adds focus class to mouseenter pattern               */
    /* ---------------------------------------------------- */
    $(".yp_bg_assets").on("mouseenter mouseover",function(){
        $(".yp_bg_assets").removeClass("focus");
        $(this).addClass("focus");
    });


    /* ---------------------------------------------------- */
    /* Loads background patterns on scrolling               */
    /* ---------------------------------------------------- */
    $(".yp_background_assets").on("scroll", function(){
        
        load_near_patterns();

    });


    /* ---------------------------------------------------- */
    /* Loads background patterns on scrolling               */
    /* ---------------------------------------------------- */
    function load_near_patterns(){

        $(".yp_background_assets .yp_bg_assets:in-viewport").each(function(){

            $(this).css("backgroundImage", "url(" + pluginurl + "assets/" + $(this).data("url") + ")");

        });

    }


    /* ---------------------------------------------------- */
    /* Flat color toggle                                    */
    /* ---------------------------------------------------- */
    $(".yp-flat-colors").click(function() {

        $(this).toggleClass("active");
        $(this).parent().find(".yp_flat_colors_area").toggle();

        gui_update();

    });


    /* ---------------------------------------------------- */
    /* Theme color toggle                                   */
    /* ---------------------------------------------------- */
    $(".yp-theme-colors").click(function() {

        // cache
        var el = $(this);
        var area = el.parent().find(".yp_theme_colors_area");

        // show
        el.toggleClass("active");
        area.toggle();

        // read colors
        if(isUndefined(window.colorJsonList)){
            update_design_information("typography");
        }

        // loop colors
        var html = "", v;
        for(var i = 0; i < window.colorJsonList.length; i++){
            v = window.colorJsonList[i];
            html += "<div class='yp-theme-c' data-color='"+v+"'><i style='background:"+v+"'></i></div>";
        }

        // append
        area.html(html);

        gui_update();

    });


    /* ---------------------------------------------------- */
    /* Gradient Toggle                                      */
    /* ---------------------------------------------------- */
    $(".yp-gradient-btn").on("click", function(){

        var el = $(this);

        // LOAD GRADIENT JSON
        if(el.hasAttr("data-json")){

            // Load gradient json
            $.getJSON(el.attr("data-json"), function(result){

                // Append only one time
                var appendHtml = '';

                // Create html
                $.each(result, function(i, v){

                    if(i < 8){
                        appendHtml += '<div class="yp-gradient-demo free-gradient" data-gradient="'+v.gradient+'"><span style="background-image:'+v.gradient+'"></span> <div>'+v.name+'</div></div>';
                    }else{
                        appendHtml += '<div class="yp-gradient-demo" data-gradient="'+v.gradient+'"><span style="background-image:'+v.gradient+'"></span> <div>'+v.name+'</div></div>';
                    }

                });

                // Append
                $(".yp-gradient-list").append(appendHtml);

                // remove load json
                el.removeAttr("data-json");

            }).fail(function() {
                show_notification("Could Not Load Json library. (gradient.json)", "jsonError");
            });

        }
        // load end

        if(el.hasClass("active")){

            // Add active class
            el.toggleClass("active");

            // show gradient tool
            $(".yp-gradient-section").toggle();

            $(".yp-background-image-show").show();

            // update gui
            gui_update();

        }else{

            // Background image data
            var data = $("#yp-background-image").val();

            // if has gradient, read it
            if(data.indexOf("linear-gradient(") != -1){

                // CSS to gradient tool
                read_gradient(data);

            }else{

                // Read default gradient
                read_gradient('linear-gradient(141deg, #0fb8ad 0%, #2cb5e8 100%)');

            }

            // Add active class
            setTimeout(function(){
                el.toggleClass("active");
            }, 1);

            // show gradient tool
            $(".yp-gradient-section").toggle();

            $(".yp-background-image-show").hide();

            // scroll to active
            setTimeout(function(){

                // go to active
                if($(".yp-gradient-demo.active").length > 0){
                    $(".yp-gradient-list").scrollTop(30 * ($(".yp-gradient-demo.active").index() - 3));
                }else{
                    $(".yp-gradient-list").scrollTop(0);
                }

            }, window.YellowDelay);

            // update gui
            gui_update();

        }

    });


    /* ---------------------------------------------------- */
    /* Unsplash Toggle                                      */
    /* ---------------------------------------------------- */
    $(".yp-unsplash-btn").on("click", function() {

        var el = $(this);

        if(el.hasClass("active")){

            // Add active class
            el.toggleClass("active");

            // show gradient tool
            $(".yp-unsplash-section").toggle();

            // update gui
            gui_update();

            $(".yp-background-image-show").show();

        }else{

            // Add active class
            setTimeout(function(){
                el.toggleClass("active");
            }, 1);

            // show gradient tool
            $(".yp-unsplash-section").toggle();

            // update gui
            gui_update();

            // load images
            unsplash_image_loader();

            $(".yp-background-image-show").hide();

        }

    });


    /* ---------------------------------------------------- */
    /* Preset Gradeints toggle                              */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-gradient-demo", function(){

        read_gradient($(this).attr("data-gradient"));
        update_gradient("insert");
        $(".yp-unsplash-list > span.active,.yp-gradient-demo.active,.yp_bg_assets.active").removeClass("active");
        $(this).addClass("active");
        $(".yp-background-image-show").remove();

    });


    /* ---------------------------------------------------- */
    /* Meterial Colors toggle                               */
    /* ---------------------------------------------------- */
    $(".yp-meterial-colors").click(function() {

        $(this).toggleClass("active");
        $(this).parent().find(".yp_meterial_colors_area").toggle();

        gui_update();

    });


    /* ---------------------------------------------------- */
    /* Nice Colors toggle                                   */
    /* ---------------------------------------------------- */
    $(".yp-nice-colors").click(function() {

        $(this).parent().find(".yp_nice_colors_area").toggle();
        $(this).toggleClass("active");

        gui_update();

    });


    /* ---------------------------------------------------- */
    /* Image uploader toggle                                */
    /* ---------------------------------------------------- */
    $(".yp-upload-btn").click(function() {

        // Get iframe contents.
        ($('#image_uploader iframe')[0].contentWindow || $('#image_uploader iframe')[0].contentDocument).location.replace($('#image_uploader iframe').attr('data-url'));

        $('#image_uploader iframe').attr('src', function(i, val){
            return val;
        });

        window.send_to_editor = function(output) {

            var imgurl = output.match(/src="(.*?)"/g);
            var imgNew = '';

            imgurl = imgurl.toString().replace('src="', '').replace('"', '');

            // Always get full size.
            if (imgurl != '') {

                var y = imgurl.split("-").length - 1;

                if (imgurl.split("-")[y].match(/(.*?)x(.*?)\./g) !== null) {

                    imgNew = imgurl.replace("-" + imgurl.split("-")[y], '');

                    // format
                    if (imgurl.split("-")[y].indexOf(".") != -1) {
                        imgNew = imgNew + "." + imgurl.split("-")[y].split(".")[1];
                    }

                } else {
                    imgNew = imgurl;
                }

            }

            if($(".background-option.active").length > 0){
                $("#yp-background-image").val(imgNew).trigger("keyup");
            }else{
                $("#yp-list-style-image").val(imgNew).trigger("keyup");
            }

            window.send_to_editor = window.restore_send_to_editor;

            $("#image_uploader").toggle();
            $("#image_uploader_background").toggle();
            $(".yp-upload-btn").toggleClass("active");

        };

        $("#image_uploader").toggle();
        $("#image_uploader_background").toggle();
        $(".yp-upload-btn").toggleClass("active");

    });


    /* ---------------------------------------------------- */
    /* Close Image uploader on background click             */
    /* ---------------------------------------------------- */
    $("#image_uploader_background").click(function() {
        $("#image_uploader").toggle();
        $("#image_uploader_background").toggle();
        $(".yp-upload-btn").toggleClass("active");
        $('#image_uploader iframe').attr('src', function(i, val) {
            return val;
        });
    });


    // WP Window Upload
    window.restore_send_to_editor = window.send_to_editor;


    /* ---------------------------------------------------- */
    /* Image Uploader callback                              */
    /* ---------------------------------------------------- */
    window.send_to_editor = function(html) {

        var imgurl = $('img', html).attr('src');

         if($(".background-option.active").length > 0){
            $("#yp-background-image").val(imgurl);
        }else{
            $("#yp-list-style-image").val(imgurl);
        }

        window.send_to_editor = window.restore_send_to_editor;

        $("#image_uploader").toggle();
        $("#image_uploader_background").toggle();
        $(".yp-upload-btn").toggleClass("active");
        $('#image_uploader iframe').attr('src', function(i, val) {
            return val;
        });

    };


    // Setup the title
    $("title").html(title_case($("#yp-current-page").text().replace(/('|")/g, "").toLowerCase()) + " - YellowPencil");


    // Check before exit page / Don't ask on demo mode.
    if(mainBody.hasClass("yp-yellow-pencil-demo-mode") == false){
        window.onbeforeunload = confirm_exit;
    }


    /* ---------------------------------------------------- */
    /* Alert before exit                                    */
    /* ---------------------------------------------------- */
    function confirm_exit() {

        if ($(".yp-save-btn").hasClass("waiting-for-save")) {
            return confirm(lang.sure);
        }

    }


    /* ---------------------------------------------------- */
    /* Save button                                          */
    /* ---------------------------------------------------- */
    $(".yp-save-btn").on("click", function() {

        // If all changes already saved, So Stop.
        if ($(this).hasClass("yp-disabled")) {
            return false;
        }

        // Getting Customized page id.
        var id = window.location.href.split("&yp_page_id=");
        id = id[1].split("&");
        id = id[0];

        // Getting Customized Post Type
        var type = window.location.href.split("&yp_page_type=");
        type = type[1].split("&");
        type = type[0];

        // Send Ajax If Not Demo Mode.
        if (!mainBody.hasClass("yp-yellow-pencil-demo-mode")) {

            // Current data
            var data = iframe.find(".yp-inline-data").text();

            // Also adds live data
            var liveDataElement = iframe.find("#yp-live-css-data");
            if(liveDataElement.length > 0){
                data += liveDataElement.html();
            }
            
            // Lite Version Checking.
            var status = true;

            if (mainBody.hasClass("wtfv")) {

                if (
                    /(\s|\{)font-family\:/g.test(data) == true ||
                    /(\s|\{)color\:/g.test(data) == true ||
                    /(\s|\{)background-image\:/g.test(data) == true ||
                    /(\s|\{)background-color\:/g.test(data) == true ||
                    /(\s|\{)width\:/g.test(data) == true ||
                    /(\s|\{)height\:/g.test(data) == true ||
                    /(\s|\{)animation-name\:/g.test(data) == true){

                    status = false;

                    $(".wt-save-btn").html(lang.save).removeClass("waiting-for-save").removeClass("wt-disabled");

                    $(".yp-info-modal,.yp-popup-background").fadeIn("fast");

                } else {

                    // BeforeSend
                    $(".yp-save-btn").html(lang.saving).addClass("yp-disabled");

                }

            } else {

                // BeforeSend
                $(".yp-save-btn").html(lang.saving).addClass("yp-disabled");

            }

            // Convert CSS To Data and save.
            if (mainBody.hasClass("yp-need-to-process")) {

                if (status) {

                    process();

                    // wait for process end
                    setTimeout(function(){
                        yp_ajax_save(id,type);
                    }, 100);

                    return false;
                }

            } else {

                if (status) {
                    yp_ajax_save(id,type);
                }

            }

        } else {

            ypMessage({title: lang.save_alert,type: "info",animation: false,customClass: "editor-style-ok"});
            $(".yp-save-btn").html(lang.saved).addClass("yp-disabled").removeClass("waiting-for-save");

        }

    });
    



    /* ---------------------------------------------------- */
    /* Saving Changes Ajax                                  */
    /* ---------------------------------------------------- */
    function yp_ajax_save(id, page_type){

        var type, editorData, data, alloutputCSS = '';
        var index = 0, completeIndex = 0;
        iframe.find(".yp-data-updated").each(function(){

            // +1
            index++;

            // Current source type: Global, template, single.
            type = $(this).attr("data-source-mode");

            // Get Editor Data
            editorData = get_editor_data(type);

            // to forbidden 403 error.
            editorData = editorData.replace(/\/\*\s+\[/g, "YPOGRP");
            editorData = editorData.replace(/\]\s+\*\//g, "YPEGRP");

            // Get clean CSS
            data = get_clean_css(true, type, false);

            // home
            if(id == "home" && type == "single"){
                type = "template";
                page_type = id;
            }

            // Save login vs single as template but load as single.
            if(id == "login" || id == "lostpassword" || id == "register"){
                if(type == "single"){
                    type = "template"; // Hack
                    page_type = id; // Hack
                }
            }

            // All data styles
            alloutputCSS += data;

            if(type == 'single'){

                // Single Save
                $.post(ajaxurl, {
                    action: "yp_ajax_save",
                    yp_page_id: id,
                    yp_page_type: '',
                    yp_data: data,
                    yp_editor_data: editorData
                }).done(function(data){
                    completeIndex++;
                }).fail(function(){

                    $(".yp-save-btn").html(lang.save).removeClass("yp-disabled").addClass("waiting-for-save");
                    clearInterval(window.savingChecker);
                    
                    ypMessage({title: lang.save_error,text: lang.save_error_msg,animation: false,customClass: "editor-style-ok"});

                });

            }else if(type == 'template'){

                // Template Save
                $.post(ajaxurl, {
                    action: "yp_ajax_save",
                    yp_page_id: '',
                    yp_page_type: page_type,
                    yp_data: data,
                    yp_editor_data: editorData
                }).done(function(data){
                    completeIndex++;
                }).fail(function(){

                    $(".yp-save-btn").html(lang.save).removeClass("yp-disabled").addClass("waiting-for-save");
                    clearInterval(window.savingChecker);
                    
                    ypMessage({title: lang.save_error,text: lang.save_error_msg,animation: false,customClass: "editor-style-ok"});

                });

            }else{

                // Global Save
                $.post(ajaxurl, {
                    action: "yp_ajax_save",
                    yp_page_id: '',
                    yp_page_type: '',
                    yp_data: data,
                    yp_editor_data: editorData
                }).done(function(data){
                    completeIndex++;
                }).fail(function(){

                    $(".yp-save-btn").html(lang.save).removeClass("yp-disabled").addClass("waiting-for-save");
                    clearInterval(window.savingChecker);
                    
                    ypMessage({title: lang.save_error,text: lang.save_error_msg,animation: false,customClass: "editor-style-ok"});

                });

            }


        });

        // live preview update (because maybe user save changes and refresh the live preview page).
        $.post(ajaxurl, {
            action: "yp_preview_data_save",
            yp_data: alloutputCSS
        }).done(function(data){
            completeIndex++;
        }).fail(function(){

            $(".yp-save-btn").html(lang.save).removeClass("yp-disabled").addClass("waiting-for-save");
            clearInterval(window.savingChecker);
                    
            ypMessage({title: lang.save_error,text: lang.save_error_msg,animation: false,customClass: "editor-style-ok"});

        });

        // Comments update
        $.post( ajaxurl, {
            action: "yp_save_comments_option",
            yp_selector_comments: JSON.stringify(window.selectorComments)
        }).done(function(data){
            completeIndex++;
        }).fail(function(){

            $(".yp-save-btn").html(lang.save).removeClass("yp-disabled").addClass("waiting-for-save");
            clearInterval(window.savingChecker);
                    
            ypMessage({title: lang.save_error,text: lang.save_error_msg,animation: false,customClass: "editor-style-ok"});

        });

        // Done.
        window.savingChecker = setInterval(function(){

            if(completeIndex == index+(2)){

                $(".yp-save-btn").html(lang.saved).addClass("yp-disabled").removeClass("waiting-for-save");
                clearInterval(window.savingChecker);
                iframe.find(".yp-data-updated").removeClass("yp-data-updated");
                $(".customizing-type-updated").removeClass("customizing-type-updated");

                // generate a new custom.css file.
                $.post(ajaxurl, {
                    action: "yp_ajax_update_css"
                });

                // Update iframe content after changes.
                update_type_frame(true);

            }

        }, 200);

    }


    /* ---------------------------------------------------- */
    /* Check the CSS value with parents                     */
    /* ---------------------------------------------------- */
    function check_with_parents(element, css, value, comparison){

        var checkElements = element.add(element.parents());
        var animation_fill_mode,el,returnValue = true;

        checkElements.each(function(){

            el = $(this);

            animation_fill_mode = null;

            // Be sure there not have any element animating.
            if(el.hasClass("yp-animating") === false){

                // nowdays a lot website using animation on page loads.
                // the problem is a lot animations has transfrom, opacity etc.
                // This break the system and can't get real value.
                // So I will fix this issue.
                animation_fill_mode = el.css("animationFillMode");

                // Disable it until we get real value.
                if(animation_fill_mode == 'forwards' || animation_fill_mode == 'both'){

                    // Continue after done.
                    returnValue = check_with_parents_last(el, css, value, comparison, animation_fill_mode);

                    if(returnValue === true){
                        return false;
                    }

                }else{

                    // Continue to last part.
                    returnValue = check_with_parents_last(el, css, value, comparison);

                    if(returnValue === true){
                        return false;
                    }

                }

            }else{

                // Continue to last part.
                returnValue = check_with_parents_last(el, css, value, comparison);

                if(returnValue === true){
                    return false;
                }

            }

        });
        
        return returnValue;

    }


    /* ---------------------------------------------------- */
    /* A part of check_with_parents                         */
    /* ---------------------------------------------------- */
    function check_with_parents_last(el, css, value, comparison, animation_fill_mode){

        var isVal = false;

        // Get CSS
        var cssValue = el.css(css);

        // If not none but and not have any transform.
        if(css == 'transform' && cssValue == 'matrix(1, 0, 0, 1, 0, 0)'){
            cssValue = 'none';
        }

        if (comparison == '==') {

            if (cssValue === value) {
                if(animation_fill_mode !== undefined){el.css("animationFillMode",animation_fill_mode);}
                return true;

            }

        } else {

            if (cssValue !== value) {
                if(animation_fill_mode !== undefined){el.css("animationFillMode",animation_fill_mode);}
                return true;

            }

        }

        if(animation_fill_mode !== undefined){el.css("animationFillMode",animation_fill_mode);}
        return isVal;

    }


    /* ---------------------------------------------------- */
    /* Close contextMenu on scroll                          */
    /* ---------------------------------------------------- */
    $(document).on("mousewheel DOMMouseScroll", "#context-menu-layer", function(){

        if (iframe.find(".context-menu-active").length > 0) {
            get_selected_element().contextMenu("hide");
        }

    });


    /* ---------------------------------------------------- */
    /* Hide parent's view element on hover                  */
    /* ---------------------------------------------------- */
    $(document).on("mouseover", "#context-menu-layer", function(){

        // delete focus
        paintCanvas.extra.find(".yp-element-viewer").remove();

    });


    /* ---------------------------------------------------- */
    /* Close contextMenu on scroll                          */
    /* ---------------------------------------------------- */
    var timerx = null, timer = null, timer8 = null;
    iframe.scroll(function() {

        // Draw tooltip
        if(timer !== null) {
            clearTimeout(timer);        
        }

        timer = setTimeout(function(){
            if(is_content_selected()){
                draw_tooltip();
            }
        }, 120);


        // Draw transform boxes
        if(timerx !== null) {
            clearTimeout(timerx);
        }

        if(is_content_selected()){

            // Set outline border while scrolling if its is fixed.
            // Need to reflesh the position on scrolling and this will make feel slow the editor.
            if (check_with_parents(get_selected_element(), "position", "fixed", "==") === true) {

                if (!mainBody.hasClass("yp-has-transform")){ // if not have.

                    body.addClass("yp-has-transform"); // add

                }else{

                    // back to normal borders and update position. 
                    timerx = setTimeout(function(){

                        body.removeClass("yp-has-transform");

                        draw();

                    },120);

                }

            }

        }

        // Draw other boxes
        if(timer8 !== null) {
            clearTimeout(timer8);        
        }

        // Draw visible other boxes after scroll delay
        timer8 = setTimeout(function(){

            // Update only if still have element that didnt draw yet
            draw_other_boxes();

        }, 120);

    });


    /* ---------------------------------------------------- */
    /* Set as Background Image                              */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp_background_assets div", function() {

        var el = $(this);

        $(".yp-unsplash-list > span.active,.yp-gradient-demo.active,.yp_bg_assets.active").removeClass("active");
        el.parent().parent().find(".yp-input").val(pluginurl + "assets/" + el.data("url")).trigger("keyup");
        el.addClass("active");
        $(".yp-background-image-show").remove();

        // set auto repeat
        if(get_selected_element().css("background-repeat") == "no-repeat"){
            insert_rule(null, "background-repeat", "repeat");
            set_default_value("background-repeat");
        }

        // set auto size
        if(get_selected_element().css("background-size") != "auto"){
            insert_rule(null, "background-size", "auto");
            set_default_value("background-size");
        }

    });

    
    /* ---------------------------------------------------- */
    /* Set Color                                            */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp_flat_colors_area div,.yp_meterial_colors_area div,.yp_nice_colors_area div,.yp_theme_colors_area div", function() {

        var element = $(this);
        var elementParent = element.parent();

        $(".yp_flat_colors_area,.yp_meterial_colors_area,.yp_nice_colors_area,.yp_theme_colors_area").find(".active").removeClass("active");
        elementParent.parent().parent().parent().find(".wqcolorpicker").val($(this).data("color")).trigger("change");
        $(this).addClass("active");

    });


    /* ---------------------------------------------------- */
    /* Blur the editor                                      */
    /* ---------------------------------------------------- */
    function blur_editor(event){

        if(!event.originalEvent){
            return false;
        }

        if(window.documentClick == false){
            return false;
        }

        var el = $(event.target);

        // popup clicks dont close anything in the editor
        if(el.parents(".yp-info-modal").length == 0 && el.hasClass("yp-popup-background") == false){
        

        // Customize type
        if($("#customizing-type-list").css("display") == 'block' && el.hasClass("yp-type-menu-link") == false && $(".sweet-overlay").css("display") != "block"){
            if(el.parents("#customizing-type-list").length == 0){
                $("#customizing-mode,#customizing-type-list").removeClass("active");
                $("#customizing-type-list").toggle();
                $(".starter-notice").removeClass("padded-starter-notice");
                return false;
            }
        }

        var irisWasOpen = false;

        // Iris
        if (el.is(".iris-picker") === false && el.is(".iris-square-inner") === false && el.is(".iris-square-handle") === false && el.is(".iris-slider-offset") === false && el.is(".iris-slider-offset .ui-slider-handle") === false && el.is(".iris-picker-inner") === false && el.is(".wqcolorpicker") === false) {

            // first hide iris, later gradient. not all in one click.
            if($(".yp-gradient-section .iris-picker:visible").length > 0){
                irisWasOpen = true;
            }

            if($(".iris-picker .ui-state-active").length == 0 && $(".iris-picker .iris-dragging").length == 0 && el.hasClass("iris-square") == false){
                $(".iris-picker").hide();
                gui_update();
            }

            $(".yp-gradient-pointer-area").removeClass("gradient-pointer-no-cursor");

        }

        // Assets
        if (el.is('.yp_bg_assets') === false && el.is('.yp-none-btn') === false && el.is('.yp-bg-img-btn') === false && $(".yp_background_assets:visible").length > 0) {
            $(".yp_background_assets").hide();
            $(".yp-bg-img-btn").removeClass("active");
            gui_update();
        }

        // Flat
        if (el.is('.yp-flat-c') === false && el.is('.yp-flat-colors') === false && $(".yp_flat_colors_area:visible").length > 0) {
            $(".yp_flat_colors_area").hide();
            $(".yp-flat-colors").removeClass("active");
            gui_update();
        }

        // Meterial
        if (el.is('.yp-meterial-c') === false && el.is('.yp-meterial-colors') === false && $(".yp_meterial_colors_area:visible").length > 0) {
            $(".yp_meterial_colors_area").hide();
            $(".yp-meterial-colors").removeClass("active");
            gui_update();
        }

        // Nice
        if (el.is('.yp-nice-c') === false && el.is('.yp-nice-colors') === false && $(".yp_nice_colors_area:visible").length > 0) {
            $(".yp_nice_colors_area").hide();
            $(".yp-nice-colors").removeClass("active");
            gui_update();
        }

        // Nice
        if (el.is('.yp-theme-c') === false && el.is('.yp-theme-colors') === false && $(".yp_theme_colors_area:visible").length > 0) {
            $(".yp_theme_colors_area").hide();
            $(".yp-theme-colors").removeClass("active");
            gui_update();
        }

        // Gradient
        if (el.parents('.yp-gradient-section').length === 0 && $(".yp-gradient-section:visible").length > 0 && el.is(".yp-gradient-btn") == false && irisWasOpen == false && $(".iris-picker:visible").length == 0 && $(".yp-gradient-pointer.ui-draggable-dragging").length == 0 && $(".yp-gradient-orientation .ui-draggable-dragging").length == 0) {

            $(".yp-gradient-section").hide();
            $(".yp-gradient-pointer,.yp-gradient-btn").removeClass("active");
            gui_update();

        }

        // Unsplash
        if (el.parents('.yp-unsplash-section').length === 0 && $(".yp-unsplash-section:visible").length > 0 && el.is(".yp-unsplash-btn") == false && irisWasOpen == false && $(".iris-picker:visible").length == 0) {

            $(".yp-unsplash-section").hide();
            $(".yp-unsplash-btn").removeClass("active");
            gui_update();

        }

        // element color picker
        if(el.is(".yp-element-picker.active") == false && $(".yp-element-picker.active").length > 0){
            $(".yp-element-picker.active").trigger("click");
        }

        }// popup close

    }


    /* ---------------------------------------------------- */
    /* blur_editor on click                                 */
    /* ---------------------------------------------------- */
    $(document).on("click", blur_editor);



    /* ---------------------------------------------------- */
    /* Toggle CSS Editor                                    */
    /* ---------------------------------------------------- */
    function panel_toggle(status) {

        // Params
        var iframe_height = iframe.height();
        var frame_height = $("#iframe").height();

        $(".yp-panel-show").css("top", $(".yp-panel-hide").offset().top);

        if (iframe_height > frame_height) {
            $(".yp-panel-show").css("right", get_scroll_bar_width() + "px");
        } else {
            $(".yp-panel-show").css("right", "0px");
        }
        

        if (status === true) {
            mainBody.removeClass("yp-clean-look yp-clean-look-manual");
        } else {
            mainBody.toggleClass("yp-clean-look-manual");
        }

        draw();

        draw_iframe();

    }


    /* ---------------------------------------------------- */
    /* Scrolling the page to the target element             */
    /* ---------------------------------------------------- */
    function scroll_to_element(element, onlyVisible){

        var type = 'any';

        // selected element
        if(element == null){

            // Don't scroll if element hidden.
            if(mainBody.hasClass("yp-element-not-visible")){
                return false;
            }

            element = iframe.find(".yp-selected");
            type = 'selected';

            // be sure element out of screen.
            if(paintCanvas.general.find(".yp-selected-tooltip").hasClass("yp-fixed-tooltip") == false && paintCanvas.general.find(".yp-selected-tooltip").hasClass("yp-fixed-tooltip-bottom") == false && onlyVisible == true) {
                return false;
            }

        // Another element, must be 1 length.
        }else{

            if(element.length != 1){
                return false;
            }

        }

        // Don't scroll on fixed
        if (check_with_parents(get_selected_element(), "position", "fixed", "==")){
            return false;
        }

        // Scroll
        var height = parseInt($(window).height() / 2);
        var elementHeight = parseInt(element.height() / 2);

        if (elementHeight < height) {
        var scrollPosition = elementHeight + element.offset().top - height;
            iframe.scrollTop(scrollPosition);
        }

        if(type == "selected"){
            draw_tooltip();
        }

    }


    /* ---------------------------------------------------- */
    /* Search Element Engine                                */
    /* ---------------------------------------------------- */
    function new_2searchEngine(word, limit, type){

        // Vars
        var arrayList = [];
        var matchTerm = null;
        var resultName = null;
        var formula = [];
        var tagTerm = '';
        var term;

        // clean input
        word = word.replace(/\s+/g, " ");

        // doesnt support :hover etc
        if(word.indexOf(":") != -1){
            return [];
        }

        // Getting last character
        var lastChar = word.substr(word.length - 1);

        // generate array
        var selectorArray = get_selector_array(word);

        // Get last part
        var lastPart = selectorArray[selectorArray.length - 1];

        if(lastChar == ' '){
            lastPart = ' ';
        }

        // Previous Selector
        var previousSelector = selectorArray;

        if(lastChar != ' '){
            previousSelector.pop();
        }

        previousSelector = previousSelector.join(" ");

        // Previous Word only
        var previousWord = previousSelector.replace(/(\s+$|\.$|#$)/g, "");

        // other vars
        var regex, className = lastPart.replace(/(\.|#)/g, ''), classes, matches, elements, tagFilterCheck;

        var tagList = ["body","h1","h2","h3","h4","h5","h6","p","br","hr","abbr","address","b","bdi","bdo","blockquote","center","cite","code","del","dfn","em","font","i","ins","kbd","mark","meter","pre","progress","q","rp","rt","ruby","s","samp","small","strike","strong","sub","sup","time","tt","u","var","wbr","form","input","textarea","button","select","optgroup","option","label","fieldset","legend","datalist","output","frame","iframe","img","map","area","canvas","figcaption","figure","picture","audio","source","track","video","a","link","nav","ul","ol","li","dir","dl","dt","dd","menu","menuitem","table","caption","th","tr","td","thead","tbody","tfoot","col","colgroup","div","span","header","footer","main","section","article","aside","details","dialog","summary"];

        // tag. formula
        if(/^[a-z-A-Z0-9_-]+\.$/g.test(lastPart) == true){
            tagTerm = lastPart.split(".")[0];
            formula.push(tagTerm + "[class]");
        }

        // tag# formula
        if(/^[a-z-A-Z0-9_-]+#$/g.test(lastPart) == true){
            tagTerm = lastPart.split("#")[0];
            formula.push(tagTerm + "[id]");
        }

        // tag.className formula
        if(/^[a-z-A-Z0-9_-]+\.[a-z-A-Z0-9_-]+$/g.test(lastPart) == true){
            tagTerm = lastPart.split(".")[0];
            term = lastPart.split(".")[1];
            formula.push(tagTerm + "[class*='"+term+"']");
        }

        // tag#myid formula
        if(/^[a-z-A-Z0-9_-]+#[a-z-A-Z0-9_-]+$/g.test(lastPart) == true){
            tagTerm = lastPart.split("#")[0];
            term = lastPart.split("#")[1];
            formula.push(tagTerm + "[id^='"+term+"']");
        }

        // # formula
        if(/^\#$/g.test(lastPart) == true){
            formula.push("[id]");
        }

        // . formula
        if(/^\.$/g.test(lastPart) == true){
            formula.push("[class]");
        }

        // .className formula
        if(/^\.[a-z-A-Z0-9_-]+$/g.test(lastPart) == true){
            term = lastPart.split(".")[1];
            formula.push("[class*='"+term+"']");
        }

        // #myid formula
        if(/^\#[a-z-A-Z0-9_-]+$/g.test(lastPart) == true){
            term = lastPart.split("#")[1];
            formula.push("[id^='"+term+"']");
        }

        // header tag
        if(/^[a-z-A-Z0-9_-]+$/g.test(lastPart) == true){
            formula.push("[tag*='"+lastPart+"']");
        }

        // tag
        if(lastPart == ' '){
            formula.push("[tag]");
        }

        // only word formula
        if(/^[a-z-A-Z0-9_-]+$/g.test(lastPart) == true){
            formula.push("[id^='"+lastPart+"']");
        }

        // only word formula
        if(/^[a-z-A-Z0-9_-]+$/g.test(lastPart) == true){
            formula.push("[class*='"+lastPart+"']");
        }

        var i;

        // Each All formulas
        for(var f = 0; f < formula.length; f++){

            // Tag Find
            if(formula[f] == "[tag]" || formula[f].indexOf("[tag*=") != -1){

                // tag regex
                regex = new RegExp("^" + lastPart + "(.+)?");

                // Checks tag lists
                for(i = 0; i < tagList.length; i++){

                    // Filtering tag
                    if(formula[f] != "[tag]"){
                        tagFilterCheck = regex.test(tagList[i]);
                    }else{
                        tagFilterCheck = true;
                    }

                    // advanced tag filter or only show avaiable tags
                    if(tagFilterCheck){

                        // Search in children
                        try{
                            if(previousWord.length > 0){
                                elements = iframe.find(previousWord).find(tagList[i]).not(window.simple_not_selector);
                            }else{
                                elements = iframe.find(tagList[i]).not(window.simple_not_selector);
                            }
                        }catch(e){
                            continue;
                        }

                        // Add until limit
                        if(elements.length > 0){

                            // Append Result
                            resultName = previousSelector + " " + tagList[i];

                            // Add until limit
                            if(check_selector(resultName, true, false, false)){
                                arrayList.push(resultName);
                            }

                            // Limit
                            if (array_cleaner(arrayList).length >= limit) {
                                break;
                            }

                        }

                    }

                } // For end

            }

            // Find Element
            try{
                if(previousWord.length > 0){
                    elements = iframe.find(previousWord).find(formula[f]).not(window.simple_not_selector);
                }else{
                    elements = iframe.find(formula[f]).not(window.simple_not_selector);
                }
            }catch(e){
                continue;
            }

            // Each elements
            elements.each(function(i, v){

                // Advanced Class
                if(/^\[class\*\=/g.test(formula[f]) == true){

                    // Getting classes
                    classes = $(this).attr('class').split(' ');

                    // Class Regex
                    regex = new RegExp("^" + className + "(.+)?");

                    // Each
                    for (i = 0; i < classes.length; i++) {
                                
                        // Rex Class
                        matches = regex.exec(classes[i]);

                        // Check if valid
                        if (matches !== null) {

                            // Append Result
                            resultName = previousSelector + " ." + matches[0];

                            // Add
                            if(check_selector(resultName, true, false, false)){
                                arrayList.push(resultName);
                            }

                            // Limit
                            if (array_cleaner(arrayList).length >= limit) {
                                break;
                            }

                        }

                    }

                // Any class
                }else if(formula[f].indexOf("[class]") != -1){

                    // Get ClassArray
                    matchTerm = $(this).attr("class");

                    // Get First Class
                    if(matchTerm.indexOf(" ") != -1){
                        matchTerm = matchTerm.split(" ")[0];
                    }

                    if(matchTerm == ''){
                        return true;
                    }

                    // Append Result
                    if(tagTerm != ''){
                        resultName = previousSelector + " " + tagTerm + "." + matchTerm;
                    }else{
                        resultName = previousSelector + " ." + matchTerm;
                    }

                    // Add
                    if(check_selector(resultName, true, false, false)){
                        arrayList.push(resultName);
                    }

                    // Limit
                    if (array_cleaner(arrayList).length >= limit) {
                        return false;
                    }

                // any id
                }else if(formula[f].indexOf("[id]") != -1 || formula[f].indexOf("[id^=") != -1){

                    // Append Result
                    if(tagTerm != ''){
                        resultName = previousSelector + " " + tagTerm + "#" + $(this).attr('id');
                    }else{
                        resultName = previousSelector + " #" + $(this).attr('id');
                    }

                    // Add
                    if(check_selector(resultName, true, false, false)){
                        arrayList.push(resultName);
                    }

                    // Limit
                    if (array_cleaner(arrayList).length >= limit) {
                        return false;
                    }

                // tag[class*=".."]
                }else if(/^[a-z-A-Z0-9_-]+\[class\*\=/g.test(formula[f]) == true){

                    // Getting classes
                    classes = $(this).attr('class').split(' ');

                    // Each
                    for (i = 0; i < classes.length; i++) {

                        // Class Regex
                        regex = new RegExp("^" + word.split(".")[1] + "(.+)?");

                        // Rex Class
                        matches = regex.exec(classes[i]);

                        // Check if valid
                        if (matches !== null) {
                            
                            // Append Result
                            resultName = previousSelector + " " + tagTerm + "." + matches[0];

                            // Add
                            if(check_selector(resultName, true, false, false)){
                                arrayList.push(resultName);
                            }

                            // Limit
                            if (array_cleaner(arrayList).length >= limit) {
                                return false;
                            }

                        }

                    }

                }

            });

        }

        // Clean duplice items
        arrayList = array_cleaner(arrayList);

        // Clean the editor classes from result
        for(var k = 0; k < window.plugin_classes_list.split("|").length; k++){

            for (i = arrayList.length - 1; i >= 0; i--) {

                if(arrayList[i].replace(/\./g, "").trim().indexOf(window.plugin_classes_list.split("|")[k]) != -1){

                    arrayList.splice(i, 1);

                }

            }

        }

        // Getting body classes
        var bodyClasses = [];
        if(iframeBody.hasAttr("class")){
            bodyClasses = get_classes_array(iframeBody.attr("class"));
        }

        // Clean spaces
        for(i = 0; i < arrayList.length; i++){
            arrayList[i] = arrayList[i].replace(/(^\s+|\s+$)/g, '').replace(/\s\s+/g, " ");

            // If is class
            if(arrayList[i].indexOf(".") != -1){

                // Add body to class for user understand that, target class is body.
                if(bodyClasses.indexOf(arrayList[i].replace(/\./g, "")) != -1){
                    arrayList[i] = "body" + arrayList[i];
                }

            }

        }

        // PrePare
        if(arrayList.length == 1 && type == 'autocomplate'){
            if(arrayList[0] == word){
                arrayList = [];
            }
        }

        return arrayList;

    }            


    /* ---------------------------------------------------- */
    /* Creating Similar Selectors for Search Tool           */
    /* ---------------------------------------------------- */
    function generate_search_selectors() {

        // Clean autocomplates
        $("#autocomplate-selector-list li").remove();

        // Vars
        var selector;

        // Getting current selector or value of search input
        selector = $("#yp-selector-editor").val();

        // Don't generate any autocomplate
        if (isUndefined(selector)) {
            return false;
        }

        // Stop of generating if word is empty
        if (selector == '  ' || selector == ' ' || selector == '') {
            return false;
        }

        // Generating
        var arrayList = new_2searchEngine(selector, 10, "autocomplate");

        // Add generated results like autocomplate.
        for(var i = 0; i < arrayList.length; i++){

            // Max 10 result
            if ($("#autocomplate-selector-list li").length < 10) {

                if (iframe.find(arrayList[i]).length === 0) {
                    return false;
                }

                if ($("#" + get_id(arrayList[i])).length > 0) {
                    return false;
                }

                $("#autocomplate-selector-list").append("<li id='" + get_id(arrayList[i]) + "'>" + arrayList[i] + "</li>");

            }

        }

        // Reset active number
        window.selectorActive = -1;

    }


    /* ---------------------------------------------------- */
    /* Click to similar selectors                           */
    /* ---------------------------------------------------- */
    $(document).on("click", "#autocomplate-selector-list li", function() {

        // Get value
        var value = $(this).text().split(" |")[0];

        // Apply selector to input
        $("#yp-selector-editor").val(value).trigger("keyup").trigger("focus");

    });


    /* ---------------------------------------------------- */
    /* Open Selector Editor                                 */
    /* ---------------------------------------------------- */
    function open_selector_editor(){

        // Hide ContextMenu
        if (iframe.find(".context-menu-active").length > 0) {
            get_selected_element().contextMenu("hide");
        }

        // Disable unvalid class on open
        $("#yp-selector-editor").removeClass("selecor-is-unvalid");

        // Active editor
        body.addClass("yp-selector-editor-active");

        // Get current selector
        var selector = get_current_selector();

        // Check hover
        if (body.attr("data-yp-selector") == ':hover') {
            selector = selector + ":hover";
        }

        // Check focus
        if (body.attr("data-yp-selector") == ':focus') {
            selector = selector + ":focus";
        }

        // Check link
        if (body.attr("data-yp-selector") == ':link') {
            selector = selector + ":link";
        }

        // Check active
        if (body.attr("data-yp-selector") == ':active') {
            selector = selector + ":active";
        }

        // Check visited
        if (body.attr("data-yp-selector") == ':visited') {
            selector = selector + ":visited";
        }

        // Check checked
        if (body.attr("data-yp-selector") == ':checked') {
            selector = selector + ":checked";
        }

        // Check disabled
        if (body.attr("data-yp-selector") == ':disabled') {
            selector = selector + ":disabled";
        }

        // Check enabled
        if (body.attr("data-yp-selector") == ':enabled') {
            selector = selector + ":enabled";
        }

        // Check invalid
        if (body.attr("data-yp-selector") == ':invalid') {
            selector = selector + ":invalid";
        }

        // Check valid
        if (body.attr("data-yp-selector") == ':valid') {
            selector = selector + ":valid";
        }

        // Empty if selector undefined
        if (isUndefined(selector)) {
            selector = '';
        }

        // Enter value and focus to editor
        $("#yp-selector-editor").trigger("focus").val(selector).trigger("keyup");

        // Generate
        generate_search_selectors();

    }


    /* ---------------------------------------------------- */
    /* Apply new selector and close editor                  */
    /* ---------------------------------------------------- */
    function apply_selector_editor(input){

        // Disable unvalid class after change
        $(input).removeClass("selecor-is-unvalid");

        // Getting current selector
        var selector = $(input).val();

        // Close if selector is empty
        if(selector == '' || selector == ' '){

            if(input == "#yp-selector-editor"){
                body.removeClass("yp-selector-editor-active");
                window.selectorActive = -1;
            }

            return false;
        }

        // Be sure hover and focus to last because just support hover&focus in last.
        var hoverPosition = selector.match(/:hover(.*?)$/g);
        var focusPosition = selector.match(/:focus(.*?)$/g);
        var visitedPosition = selector.match(/:visited(.*?)$/g);
        var activePosition = selector.match(/:active(.*?)$/g);
        var linkPosition = selector.match(/:link(.*?)$/g);
        var checkedPosition = selector.match(/:checked(.*?)$/g);
        var disabledPosition = selector.match(/:disabled(.*?)$/g);
        var enabledPosition = selector.match(/:enabled(.*?)$/g);
        var invalidPosition = selector.match(/:invalid(.*?)$/g);
        var validPosition = selector.match(/:valid(.*?)$/g);

        // Clean hover
        if(hoverPosition !== null){
            hoverPosition = hoverPosition.toString().trim().replace(/:hover/g,'').trim().length;
        }else{
            hoverPosition = 0;
        }

        // Clean focus
        if(focusPosition !== null){
            focusPosition = focusPosition.toString().trim().replace(/:focus/g,'').trim().length;
        }else{
            focusPosition = 0;
        }

        // Clean visited
        if(visitedPosition !== null){
            visitedPosition = visitedPosition.toString().trim().replace(/:visited/g,'').trim().length;
        }else{
            visitedPosition = 0;
        }

        // Clean active
        if(activePosition !== null){
            activePosition = activePosition.toString().trim().replace(/:active/g,'').trim().length;
        }else{
            activePosition = 0;
        }

        // Clean link
        if(linkPosition !== null){
            linkPosition = linkPosition.toString().trim().replace(/:link/g,'').trim().length;
        }else{
            linkPosition = 0;
        }

        // Clean checked
        if(checkedPosition !== null){
            checkedPosition = checkedPosition.toString().trim().replace(/:checked/g,'').trim().length;
        }else{
            checkedPosition = 0;
        }

        // Clean disabled
        if(disabledPosition !== null){
            disabledPosition = disabledPosition.toString().trim().replace(/:disabled/g,'').trim().length;
        }else{
            disabledPosition = 0;
        }

        // Clean enabled
        if(enabledPosition !== null){
            enabledPosition = enabledPosition.toString().trim().replace(/:enabled/g,'').trim().length;
        }else{
            enabledPosition = 0;
        }

        // Clean invalid
        if(invalidPosition !== null){
            invalidPosition = invalidPosition.toString().trim().replace(/:invalid/g,'').trim().length;
        }else{
            invalidPosition = 0;
        }

        // Clean valid
        if(validPosition !== null){
            validPosition = validPosition.toString().trim().replace(/:valid/g,'').trim().length;
        }else{
            validPosition = 0;
        }

        // Generating new selector
        var selectorNew = selector.replace(/\:(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g, "");

        // Check if selector is valid
        var checkResult = check_selector(selectorNew, true, false, true);
        if(checkResult == false){
            $(input).addClass("selecor-is-unvalid");
            return false;
        }

        // If element is foundable
        if (iframe.find(selectorNew).length > 0 && selectorNew != '*' && hoverPosition === 0 && focusPosition === 0 && visitedPosition == 0 && activePosition == 0 && linkPosition == 0 && checkedPosition == 0 && disabledPosition == 0 && enabledPosition == 0 && invalidPosition == 0 && validPosition == 0) {

            // sing the target element
            if (iframe.find(selector).hasClass("yp-selected")) {
                get_selected_element().addClass("yp-will-selected");
            }

            // Set Selector
            set_selector(space_cleaner(selector), null, true);

            // Scroll to element if not visible on screen.
            scroll_to_element(null, false);

            // Close
            if(input == "#yp-selector-editor"){
                body.removeClass("yp-selector-editor-active");
                window.selectorActive = -1;
            }

        }

    }


    /* ---------------------------------------------------- */
    /* Writing to Search Selector Tool                      */
    /* ---------------------------------------------------- */
    window.selectorActive = -1;
    $("#yp-selector-editor").keyup(function(e) {

        // Get value
        var value = $(this).val();
        var lastChar = value.substr(value.length - 1);


        // Space auto complate
        if(e.keyCode == 32 && /(\#|\.)/g.test(value) == false && check_selector(value,true,false,false) == false){

            var focusedResult = $("#autocomplate-selector-list li.active");

            // Has focused result
            if(focusedResult.length > 0 && value != focusedResult.text()){

                // Set focused result
                $(this).val(focusedResult.text() + " ").trigger("keyup");

                return false;

            }

        }


        // Generate List
        if(e.keyCode != 40 && e.keyCode != 38){
            generate_search_selectors();
        }

        // Remove unvalid color
        $("#yp-selector-editor").removeClass("selecor-is-unvalid");

        // Remove Active list
        $("#autocomplate-selector-list li").removeClass("active");

        // If has result and lastchar is a alphanum
        if($("#autocomplate-selector-list li").length > 0 && /[a-z-A-Z0-9_-]/g.test(lastChar) == true){

            var shortest = 10000;
            $("#autocomplate-selector-list li").each(function(){

                if($(this).text().length < shortest){

                    shortest = $(this).text().length;
                    $("#autocomplate-selector-list li").removeClass("active");
                    $(this).addClass("active");

                }

            });

        }

        // Enter
        if (e.keyCode == 13) {

            // Has focused result
            if($("#autocomplate-selector-list li.active").length > 0 && $(this).val() != $("#autocomplate-selector-list li.active").text()){

                // Set focused result
                $(this).val($("#autocomplate-selector-list li.active").text());

                // Remove
                $("#autocomplate-selector-list li").remove();

                return false;

            }

            apply_selector_editor("#yp-selector-editor");

            return false;

        }

        // Active
        var active = $("#autocomplate-selector-list li.active");

        // Update active number if not set
        if(active.length > 0 && window.selectorActive == -1){
            window.selectorActive = $("#autocomplate-selector-list li.active").prevAll().length;
        }

        // Down
        if(e.keyCode == 40 && $("#autocomplate-selector-list li").length >= (window.selectorActive + 2)){

            // Go Down
            window.selectorActive++;

        }else if(e.keyCode == 38 && (window.selectorActive - 1) >= 0){

            // Go Up
            window.selectorActive--;

        }else if(e.keyCode == 38 && window.selectorActive < 0){

            // Go Up
            window.selectorActive = $("#autocomplate-selector-list li").length - 1;

        }

        // Down or up
        if(e.keyCode == 40 || e.keyCode == 38){

            // Remove Active Class
            $("#autocomplate-selector-list li").removeClass("active");

            // Add Active
            $("#autocomplate-selector-list li").eq(window.selectorActive).addClass("active");

            if($("#autocomplate-selector-list li").eq(window.selectorActive).length > 0){

                $(this).val($("#autocomplate-selector-list li").eq(window.selectorActive).text());

            }

        }

    });


    /* ---------------------------------------------------- */
    /* Disable default arrow key events on search inputs    */
    /* ---------------------------------------------------- */
    $("#yp-selector-editor").on("keyup keydown", function(e) {
        if(e.keyCode == 40 || e.keyCode == 38){
            return false;
        }
    });


    /* ---------------------------------------------------- */
    /* Background click: Close search selector              */
    /* ---------------------------------------------------- */
    $("#selector-editor-background").click(function() {

        $("#yp-selector-editor").val("");
        apply_selector_editor("#yp-selector-editor");

    });


    /* ---------------------------------------------------- */
    /* Open Search Selector Tool                            */
    /* ---------------------------------------------------- */
    $(".yp-search-btn").click(function(e) {

        if($(this).hasClass("active")){
            $(".search-box").hide();
            $(".search-live-result li").remove();
            $(".search-box").css("height", "80px");
        }else{

            $(".search-box").css({"top": $(this).offset().top + 1});
            $(".search-box").show();
            $("#search").removeClass("selecor-is-unvalid").val("").focus();
            $("#search").trigger('autogrow');

        }

    });


    /* ---------------------------------------------------- */
    /* Close search box                                     */
    /* ---------------------------------------------------- */
    $(".search-close-link").click(function(){
        $(".search-box").hide();
        $(".yp-search-btn").addClass("active");
    });


    /* ---------------------------------------------------- */
    /* Filtersing search results                            */
    /* ---------------------------------------------------- */
    $(document).on("keyup", "#search", function(e){

        var elementLength;

        // Getting current selector or value of search input
        var value = $("#search").val();

        var selector = value;
        var focusedResult;

        // Space auto complate
        if(e.keyCode == 32 && /(\#|\.)/g.test(selector) == false && check_selector(selector,true,false,false) == false){

            $("#search").trigger('autogrow');

            focusedResult = $(".search-live-result li.focus");

            // Has focused result
            if(focusedResult.length > 0 && selector != focusedResult.nodeText()){

                // Set focused result
                $(this).val(focusedResult.nodeText() + " ").trigger("keyup");

                return false;

            }

        }

        // Enter
        if (e.keyCode == 13) {

            $("#search").trigger('autogrow');

            focusedResult = $(".search-live-result li.focus");

            // Has focused result
            if(focusedResult.length > 0 && selector != focusedResult.nodeText()){

                // Set focused result
                $(this).val(focusedResult.nodeText()).trigger("keyup");

                return false;

            }

            // select
            apply_selector_editor("#search");

            $(".yp-search-btn:not(.active)").trigger("click");

            return false;

        }

        // Clean autocomplates
        $(".search-live-result li").remove();

        // Update, must check again to know if unvalid.
        $("#search").removeClass("selecor-is-unvalid");

        // Stop of generating if word is empty
        if (selector == '  ' || selector == ' ' || selector == '') {
            return false;
        }

        // Generating
        var arrayList = new_2searchEngine(selector, 10, "autocomplate");

        // Add generated results like autocomplate.
        for(var i = 0; i < arrayList.length; i++){

            // Max 10 result
            if ($(".search-live-result li").length < 10) {

                elementLength = iframe.find(arrayList[i]).length;

                if (elementLength === 0) {
                    return false;
                }

                if ($("#search-" + get_id(arrayList[i])).length > 0) {
                    return false;
                }

                $(".search-live-result").append("<li class='element-list' data-search-selector='"+arrayList[i]+"' id='search-" + get_id(arrayList[i]) + "'>" + arrayList[i] + "<i>"+elementLength+"</i></li>");

            }

        }

        // If has result and lastchar is a alphanum
        if($(".search-live-result li").length > 0 && /[a-z-A-Z0-9_-]/g.test(value.substr(value.length - 1)) == true){

            var shortest = 10000;
            $(".search-live-result li").each(function(){

                if($(this).nodeText().length < shortest){

                    shortest = $(this).nodeText().length;
                    $(".search-live-result li").removeClass("focus");
                    $(this).addClass("focus");

                }

            });

        }

    });

    
    /* ---------------------------------------------------- */
    /* Adding up, down key support for left-bar search tool */
    /* ---------------------------------------------------- */
    $("#search").on("keyup", function(e) {

        var active = $(".element-list.focus");

        if(e.keyCode == 40 && active.length == 0 && $(".search-live-result li").length > 0){
            $(".search-live-result li").first().addClass("focus");
            $("#search").val($(".element-list.focus").nodeText());
        }

        if(e.keyCode == 38 && active.length == 0 && $(".search-live-result li").length > 0){
            $(".search-live-result li").last().addClass("focus");
            $("#search").val($(".element-list.focus").nodeText());
        }

        if(e.keyCode == 38 && active.prev(".element-list").length > 0){
            active.removeClass("focus");
            active.prev(".element-list").addClass("focus");
            $("#search").val($(".element-list.focus").nodeText());
        }

        if(e.keyCode == 40 && active.next(".element-list").length > 0){
            active.removeClass("focus");
            active.next(".element-list").addClass("focus");
            $("#search").val($(".element-list.focus").nodeText());
        }


    });


    /* ---------------------------------------------------- */
    /* Disable default arrow key events on search inputs    */
    /* ---------------------------------------------------- */
    $("#search").on("keyup keydown", function(e) {

        if(e.keyCode == 40 || e.keyCode == 38){
            return false;
        }
        
    });


    /* ---------------------------------------------------- */
    /* Dynamic Height for search bar                        */
    /* ---------------------------------------------------- */
    $(document).on("keyup keydown", "#search", function(){

        if($(".search-live-result li").length == 0){
            $(".search-box").css("height", "80px");
        }else{
            $(".search-box").css("height", 82 + $(".search-live-result").outerHeight() + "px");
        }

    });


    /* ---------------------------------------------------- */
    /* Selecting element from search tool                   */
    /* ---------------------------------------------------- */
    $(document).on("click", ".search-live-result li", function(){

        $("#search").val($(this).nodeText()).focus().trigger("keyup");

    });


    /* ---------------------------------------------------- */
    /* Setup iris picker                                    */
    /* ---------------------------------------------------- */
    var wIris = 223;


    /* ---------------------------------------------------- */
    /* Class, ID hover show the element: LEAVE              */
    /* ---------------------------------------------------- */
    $(document).on("mouseout", ".info-global-id-list li,.info-global-class-list li,.info-element-class-list li", function(){
        clearTimeout(window.focusElementTimer);
        paintCanvas.extra.find(".yp-element-viewer").remove();
    });



    /* ---------------------------------------------------- */
    /* Class, ID hover show the element                     */
    /* ---------------------------------------------------- */
    $(document).on("click", ".info-global-id-list li,.info-global-class-list li,.info-element-class-list li", function(){

        var selector = $(this).text();

        // 40ms delay
        window.focusElementTimer = setTimeout(function(){

            scroll_to_element(iframe.find(selector), null);
            element_focus(iframe.find(selector));

        }, 80); // delay.

    });



    /* ---------------------------------------------------- */
    /* Breakpoint bar click                                 */
    /* ---------------------------------------------------- */
    $(document).on("mouseover click",".breakpoint-bar div",function(e){

        // Breakpoint element
        var el = $(this);

        var delay = 40;

        // 40ms delay
        window.breakpointHoverTimer = setTimeout(function(){

            // Delete all old viewers
            paintCanvas.extra.find(".yp-element-viewer").remove();

            // variables
            var element,topBoxesI,leftBoxesI,widthBoxesI,heightBoxesI,selector,elements;

            // each all founded data
            var sameSizeStyles = findStyle(getStyles(null, false), "[msize=" + el.attr('data-breakpoint-data') + "]");

            for(var i = 0; i < sameSizeStyles.length; i++){

                // find selectors
                selector = get_foundable_query(sameSizeStyles[i].replace(/(\/\*(.*?)\*\/|\n)/g, "").match(/\{(.*?)\{/g).toString().replace(/\{/g,""),true, true,true,true);

                // element object
                elements = iframe.find(selector);

                // Each all founded elements
                elements.each(function(){

                    // element object
                    element = $(this);

                    // Get Element Self
                    var elementGet = element.get(0);

                    // Skip if this not valid
                    if(isUndefined(elementGet)){
                        return true;
                    }

                    // generate box size
                    var boxSize = elementGet.getBoundingClientRect();

                    // getting element positions
                    topBoxesI = boxSize.top + iframe.scrollTop();
                    leftBoxesI = boxSize.left;

                    if (leftBoxesI < 0) {
                        leftBoxesI = 0;
                    }

                    // Getting element sizes
                    widthBoxesI = boxSize.width;
                    heightBoxesI = boxSize.height;

                    var id = "yp-element-viewer-"+parseInt(widthBoxesI)+"-"+parseInt(heightBoxesI)+"-"+parseInt(topBoxesI)+"-"+parseInt(leftBoxesI)+"";

                    // add the viewer
                    if(iframe.find("#"+id).length == 0){
                        paintCanvas.extra.append("<div class='yp-element-viewer' id='"+id+"' style='width:"+widthBoxesI+"px;height:"+heightBoxesI+"px;top:"+topBoxesI+"px;left:"+leftBoxesI+"px;'></div>");
                    }                    

                }); // elements each

            } // for founded breakpoint datas

        },delay); // delay.

    });


    /* ---------------------------------------------------- */
    /* Hide breakpoint on click                             */
    /* ---------------------------------------------------- */
    $(document).on("mousedown",".breakpoint-bar div",function(e){

        $(this).tooltip("hide");

    });


    /* ---------------------------------------------------- */
    /* Shows affected elements when mouseover the breakpoint*/
    /* ---------------------------------------------------- */
    $(document).on("mouseout",".breakpoint-bar div",function(e){

        clearTimeout(window.breakpointHoverTimer);
        paintCanvas.extra.find(".yp-element-viewer").remove();

    });


    /* ---------------------------------------------------- */
    /* Shows the current media queries                      */
    /* ---------------------------------------------------- */
    function update_responsive_breakpoints(){
        
        // Bar Element
        var bar = $(".breakpoint-bar");

        bar.find("div").tooltip('destroy');

        // Empty
        bar.empty();

        // Show breakpoint information.
        if($(".media-control").attr("data-code") == 'max-width'){
            bar.append("<span class='breakpoint-right-notice'>"+lang.define_breakpoints+"</span>"); 
        }else{
            bar.append("<span class='breakpoint-left-notice'>"+lang.define_breakpoints+"</span>"); 
        }

        // Getting all media queries as array
        var queries = get_media_queries(true, false);

        // number Value
        var val = 0;

        var num = 0;

        var query;

        // Window Width
        var winWidth = $(window).width();

        // Has queries?
        if(queries.length > 0){

            // Each all Queries
            $.each(queries, function(index, value) {

                // delete decilmels
                value = value.replace(/(\d+)\.(\d+)/g, "$1");

                // Simple query.
                query = process_media_query(value);

                // isset?
                if(isDefined(query)){

                    // String
                    query = query.toString();

                    // clean < and > symbols.
                    val = parseInt(number_filter(query.replace(/\</g,"").replace(/\>/g,"")));

                    // Real number value. non proccesed.
                    // proccessed convert rem, em to PX
                    // we using NUM for find the media in data
                    num = space_cleaner(value.match(/\:(.*?)\)/g).toString().replace(/\:/g,"").replace(/\)/g,""));

                    // be sure it a simple media query.
                    if(query.indexOf(",") == -1 && query.indexOf("and") == -1){

                        // Just Min Width
                        if(query.indexOf(">") != -1 && $(".media-control").attr("data-code") == 'min-width'){

                            // If not has
                            if($(document).find("#min-breakpoint-"+val+"").length == 0){

                                // Append
                                bar.append("<div data-breakpoint='"+val+"' data-media-content='"+value+"' data-breakpoint-data='(min-width:"+num+")' class='min-width' id='min-breakpoint-"+val+"' style='left:"+(46+parseInt(val))+"px;width:"+(winWidth-(46+parseInt(val)))+"px;'>"+val+"</div>");

                            }


                        }

                        // Just Max Width
                        if(query.indexOf("<") != -1 && $(".media-control").attr("data-code") == 'max-width'){

                            // If not has
                            if($(document).find("#max-breakpoint-"+val+"").length == 0){

                                // Append
                                bar.append("<div data-breakpoint='"+val+"' data-media-content='"+value+"' data-breakpoint-data='(max-width:"+num+")' class='max-width' id='max-breakpoint-"+val+"' style='width:"+val+"px;'>"+val+"</div>");

                            }

                        }

                    }

                }

            });
    

            // Sorting breakpoints by value
            bar.find('div').sort(function(a, b) {
                return +a.dataset.breakpoint - +b.dataset.breakpoint;
            }).appendTo(bar);


            // Updating Max Width Bar
            var prevWidth = 0;
            bar.find("div").each(function(i,v){

                // Object
                var element = $(this);
                var nextElement = element.next(".max-width");

                // Next Width
                var nextWidth = parseFloat(nextElement.css("width"));

                // Fix Max width format
                if(element.hasClass("max-width")){
                    prevWidth = parseFloat(element.css("width")) + prevWidth;
                }

                // Updating Positions
                nextElement.css("width",nextWidth-prevWidth);
                nextElement.css("left",46+prevWidth);
                element.css("z-index",i);

            });


            // Updating Min Width Bar
            bar.find(".min-width").each(function(i,v){

                // Object
                var element = $(this);
                var nextElement = element.nextAll(".min-width");

                // If has next
                if(nextElement.length > 0){

                    // Getting Breakpoint Values
                    var elementPoint = parseInt(element.attr("data-breakpoint"));
                    var nextPoint = parseInt(nextElement.attr("data-breakpoint"));

                    // Find Dif
                    var maxUntil = nextPoint-elementPoint;

                    // Updating width
                    element.css("width",maxUntil+"px");

                }

            });


            // Fix small media queries
            bar.find("div").each(function(){

                var element = $(this);

                if(parseInt(element.css("width")) <= 100){
                    element.css("background-image","none").css("text-align","center").css("padding","0px").css("min-width","13px");
                }

                if(parseInt(element.css("width")) <= 40){
                    element.css("font-size","10px");
                }

                // add active class to current
                if(element.attr("data-breakpoint") == $("#iframe").width()){

                    if($(".property-size-tabs-visible .property-size.active").length > 0){

                        if($(".property-size-tabs-visible .property-size.active").attr("data-property-size").indexOf(",") == -1){

                            bar.find("div").removeClass("active");
                            element.addClass("active");

                        }

                    }else{

                        bar.find("div").removeClass("active");
                        element.addClass("active");

                    }
                    
                }

            });


            // Adding Toolip to breakponts
            $(".breakpoint-bar div").tooltip({

                // Set dynamic title
                title: function(){
                    var text = $(".media-control").text();
                    var breakpoint = $(this).attr("data-breakpoint");
                    return lang.breakpoint_size.replace("{$1}", breakpoint).replace("{$2}", text);
                },

                // Tooltip settings
                animation: false,
                template: '<div class="tooltip small-tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
                delay: { show: 50, hide: 0 },
                placement: 'bottom',
                trigger: 'hover',
                container: "body",
                html: true

            });


        }

    }


    /* ---------------------------------------------------- */
    /* Breakpoint bar click                                 */
    /* ---------------------------------------------------- */
    $(document).on("click", ".breakpoint-bar div", function(e){

        if($(this).hasClass("active")){
            return false;
        }

        // Getting breakpoint value
        var n = $(this).attr("data-breakpoint");

        // Go
        $("#iframe").width(n);

        // Updates
        draw();

        scroll_to_element(null, false);

        draw_responsive_handle();

        update_responsive_size_notice();

        // wait
        setTimeout(function(){

            insert_default_options();
            
            draw();

            scroll_to_element(null, false);

            draw_responsive_handle();

            update_responsive_size_notice();

        }, window.YellowDelay);

    });

    
    /* ---------------------------------------------------- */
    /* Updating Responsive Size Notice                      */
    /* ---------------------------------------------------- */
    function update_responsive_size_notice() {

        if (is_responsive_mod() === false) {
            return false;
        }

        // property size text
        if($(".property-size-tabs-visible .property-size.active").length > 0 && $(".property-size-tabs-visible .property-size.active").attr("data-property-size").indexOf(",") != -1){

            var propertySizeText = $(".property-size-tabs-visible .property-size.active").attr("data-original-title");

            $(".property-size-text").html(propertySizeText);

            $(".responsive-size-text").show();
            $(".default-responsive-text").hide();

        }else{

            $(".responsive-size-text").hide();
            $(".default-responsive-text").show();

        }

        var s = $("#iframe").width();
        var device = '';

        // Set device size.
        $(".device-size").text(s);

        if ($(".media-control").attr("data-code") == 'max-width') {

            device = '('+lang.phones+')';

            if (s >= 375) {
                device = '('+lang.large_phones+')';
            }

            if (s >= 414) {
                device = '('+lang.tablet_landscape_phones+')';
            }

            if (s >= 736) {
                device = '('+lang.tablets+')';
            }

            if (s >= 768) {
                device = '('+lang.small_desktop_tablets_phones+')';
            }

            if (s >= 992) {
                device = '('+lang.medium_desktops_tablets_phones+')';
            }

            if (s >= 1200) {
                device = '('+lang.large_desktops_tablets_phones+')';
            }

        } else {

            device = '('+lang.phones_tablets_desktops+')';

            if (s >= 375) {
                device = '('+lang.phones_tablets_desktops+')';
            }

            if (s >= 414) {
                device = '('+lang.large_phones_tablets_desktops+')';
            }

            // Not mobile.
            if (s >= 736) {
                device = '('+lang.landscape_phones_tablets_desktops+')';
            }

            // Not tablet
            if (s >= 768) {
                device = '('+lang.desktops+')';
            }

            // Not small desktop
            if (s >= 992) {
                device = '('+lang.medium_large_desktops+')';
            }

            // Not medium desktop
            if (s >= 1200) {
                device = '('+lang.large_desktops+')';
            }

        }

        // Set device name
        $(".device-name").text(device);

    }

    /* ---------------------------------------------------- */
    /* Smarrt Insert Default Values                         */
    /* ---------------------------------------------------- */
    function insert_default_options() {

        if (is_content_selected() === false) {
            return false;
        }

        // current options
        var options = $(".yp-editor-list > li.active .yp-option-group");

        // delete all cached data.
        $("li[data-loaded]").removeAttr("data-loaded");

        // UpData current active values.
        if (options.length > 0) {
            options.each(function() {

                var check = 1;
                if ($(this).attr("id") == 'animation-duration-group' && is_animate_creator() === true) {
                    check = 0;
                }

                if (check == 1) {
                    set_default_value(get_option_id(this));
                }
                
            });
        }

        // cache to loaded data.
        options.parent().attr("data-loaded", "true");

        // Updating properties size tabs.
        if(window.resizedByPropertySize == false){
            update_property_sizes(null);
        }

        // Update states when insert_default_values
        states_changes_on_rule_group(); 

    }

    /* ---------------------------------------------------- */
    /* Setup AutoComplete                                   */
    /* ---------------------------------------------------- */
    function autocomplete_option(elements){

        // Each all target elements
        elements.each(function(){

            // Get Information
            var id = $(this).parent().parent().attr("data-css");
            var data = $(this).parent().parent().find("textarea");

            // If not URL
            if(/^http/g.test(data.val()) == false){
                data = JSON.parse(decodeURIComponent(data.val()));
            }else{
                data = data.val(); // URL
            }

            // Autocomplete script
            $(this).autocomplete({
                source: data,
                delay: 0,
                minLength: 0,
                autoFocus: true,
                close: function(event, ui) {

                    $(".active-autocomplete-item").removeClass("active-autocomplete-item");
                    $(this).removeClass("active");

                    setTimeout(function(){
                        mainBody.removeClass("autocomplete-active");
                    },300);

                    if ($(this).parent().find('select option:contains(' + $(this).val() + ')').length) {
                        $(this).val($(this).parent().find('select option:contains(' + $(this).val() + ')').val());
                    }

                },
                open: function(event, ui) {

                    // Variables
                    var input = $(this);
                    var group = input.parents(".yp-option-group");

                    // val when open
                    window.openVal = $(this).val();

                    $(this).addClass("active");
                    mainBody.addClass("autocomplete-active");

                    var current = $(this).val();

                    // Show more as possible.
                    var inputHeight = input.outerHeight();

                    // Find free space on screen
                    var freeSpace = $(".yp-editor-panel").height() - input.offset().top + inputHeight - 98; // 98 remove a litte, not full.

                    // Remove old style
                    $("#autocomplete-custom-style-"+id).remove();
                    $(".up-style-autocomplete").removeClass("up-style-autocomplete");
                    $(".up-style-autocomplete-input").removeClass("up-style-autocomplete-input");

                    // already min 300
                    if(freeSpace > group.find(".ui-autocomplete.ui-menu").outerHeight()){

                        // Getting each other li
                        var li = group.find(".ui-autocomplete.ui-menu li").outerHeight();

                        // get maximum free space for each item
                        var maxList = parseInt(freeSpace/li);

                        // Maximum 14 list item
                        if(maxList > 14){
                            maxList = 14;
                        }

                        // update free space
                        freeSpace = maxList * li;

                        // Add new
                        mainBody.append('<style id="autocomplete-custom-style-'+id+'">#'+id+'-group .ui-autocomplete.ui-menu{max-height:'+(freeSpace+2)+'px;}</style>');

                    // If less space than 300, check for up
                    }else if(id != "font-family"){ // no need check for font family

                        // getting scroll top
                        var scrollTop = $(".yp-editor-panel").scrollTop();

                        // property gruop name (text, animation) height and single customization etc section height. total 113px
                        if(scrollTop > 113){
                            scrollTop = scrollTop - 113;
                        }else if(scrollTop < 113){
                            scrollTop = 0;
                        }

                        // Compare down and up spaces
                        var freeSpaceReverse = input.offset().top - $(".yp-editor-list > li.active > .yp-this-content").offset().top - scrollTop;

                        // Show list at up
                        if(freeSpaceReverse > freeSpace){

                            // find menu height
                            var menuHeight = (group.find(".ui-autocomplete.ui-menu").outerHeight() + inputHeight) - 2;

                            // Add style for it
                            mainBody.append('<style id="autocomplete-custom-style-'+id+'">#'+id+'-group .ui-autocomplete.ui-menu{top:-'+menuHeight+'px;}</style>');

                            // fix border-radius for up style
                            group.find(".ui-autocomplete.ui-menu").addClass("up-style-autocomplete");
                            input.addClass("up-style-autocomplete-input");

                        }

                    }


                    // Getting first font family and set active if yp has this font family.
                    if (id == 'font-family'){

                        // If has ","
                        if (current.indexOf(",") != -1){

                            // Get CurrentFont
                            current = $.trim(current.split(",")[0]).replace(/'/g, "").replace(/"/g, "");

                        }

                    }

                    // Same Data Option
                    var thisOption = $(this).parent().find(".autocomplete-div li").filter(function(){return $.text([this]) === current;});
                    
                    // Auto Active When Open
                    if (thisOption.length == 1) {

                        // Disable Current Active
                        $(".active-autocomplete-item").removeClass("active-autocomplete-item");

                        // Active It
                        if ($(".active-autocomplete-item").length === 0) {
                            thisOption.addClass("active-autocomplete-item");
                        }

                    }

                    // Scroll
                    if ($(".active-autocomplete-item").length > 0) {

                        $(this).parent().find(".autocomplete-div").find('li.ui-state-focus').removeClass("ui-state-focus");
                        var parentDiv = $(this).parent().find(".autocomplete-div li.active-autocomplete-item").parent();
                        var activeEl = $(this).parent().find(".autocomplete-div li.active-autocomplete-item");

                        parentDiv.scrollTop(parentDiv.scrollTop() + activeEl.position().top);

                    }

                    // Font Weight
                    if (id == 'font-weight') {

                        $(".autocomplete-div li").each(function() {
                            
                            // Light 300 > 300
                            var v = Math.abs(number_filter($(this).text()));
                            $(this).css("fontWeight", v);

                        });

                    }

                    // Load fonts
                    if(id == 'font-family' || id == "font-weight"){
                        $("#yp-autocomplete-place-font-weight ul li").css("fontFamily", $("#yp-font-family").val());

                        if(id == "font-family"){
                            load_near_fonts();
                        }

                    }

                    if(id == "animation-name"){

                        var te, tx;
                        $("#animation-name-group .ui-autocomplete.ui-menu li").each(function() {

                            te = $(this);
                            tx = te.text();

                        });

                    }

                    // Text shadow show all style
                    if (id == 'text-shadow') {
                        $("#yp-autocomplete-place-text-shadow li").each(function(i) {
                            $(this).css("textShadow", data[i].value);
                        });
                    }

                    // Cursor show all style
                    if (id == 'cursor') {
                        $("#yp-autocomplete-place-cursor li").each(function(i) {
                            $(this).attr("style", "cursor:"+data[i].value+" !important;");
                        });
                    }

                },

                appendTo: $(this).next()

            }).click(function() {
                $(this).autocomplete("search", "");
            });

        });

    }


    /* ---------------------------------------------------- */
    /* Responsive Mode                                      */
    /* ---------------------------------------------------- */
    $(".yp-responsive-btn").click(function() {

        // vars
        var defaultWidth, styleAttr, breakpoints;
        
        // hide
        if ($(this).hasClass("active")) {

            body.removeClass("yp-responsive-device-mode");
            $(this).addClass("active");
            styleAttr = $("#iframe").attr("style");
            $("#iframe").removeAttr("style");
            $("#iframe").attr("data-style",styleAttr);

            // Active all if open
            if($(".property-size-tabs-visible").length > 0){
                $(".property-size-tabs-visible .property-size.active").removeClass("active");
                $(".property-size[data-property-size='all']").addClass("active");
            }

        // show
        } else {

            body.addClass("yp-responsive-device-mode");
            $(this).removeClass("active");

            // updating breakpoints
            update_responsive_breakpoints();

            // Use the max breakpoint if avaiable on first open : else 768px
            if(window.responsiveFirstWasOpen == false && $(".breakpoint-bar .active").length == 0 && window.resizedByPropertySize == false){

                // Breakpoints
                breakpoints = $(".breakpoint-bar > .max-width");

                // Open with max-width as default
                if(breakpoints.length > 0){

                    defaultWidth = breakpoints.last().attr("data-breakpoint");
                    $("#iframe").css("width", defaultWidth);
                    breakpoints.last().addClass("active");

                // If not have, try min width
                }else{

                    // go min-width
                    $(".media-control").trigger("click");

                    // Get min width
                    breakpoints = $(".breakpoint-bar > .min-width");

                    // check if there have min-width
                    if(breakpoints.length > 0){

                        defaultWidth = breakpoints.last().attr("data-breakpoint");
                        $("#iframe").css("width", defaultWidth);
                        breakpoints.last().addClass("active");

                    // Show max-width as default if no media data
                    }else{

                        // back max-width
                        $(".media-control").trigger("click");

                    }

                }

                // fix tooltip issue, cos show by trigger click
                $(".media-control").tooltip("hide");

                // True
                window.responsiveFirstWasOpen = true;

            // show default 768px by default
            }else{

                styleAttr = $("#iframe").attr("data-style");
                $("#iframe").removeAttr("data-style");
                $("#iframe").attr("style",styleAttr);

            }

        // show end
        }

        if(window.resizedByPropertySize == false){

            // all parts of editor
            draw_iframe();

            // Update responsive size notice
            update_responsive_size_notice();
                
            // draw all again now
            draw();

            // Focus to element
            scroll_to_element(null, false);

            // has active breakpoint on show
            if($(this).hasClass("active") == false){

                $(".property-size.active").removeClass("active");

                if($(".breakpoint-bar .active").length > 0){

                    var activeBreakpoint = process_media_query($(".breakpoint-bar .active").attr("data-media-content"));

                    if(isDefined(activeBreakpoint)){

                        activeBreakpoint = activeBreakpoint.toString();

                        // if has same media here
                        if($(".property-size[data-property-size='"+activeBreakpoint+"']").length > 0){
                            $(".property-size[data-property-size='"+activeBreakpoint+"']").addClass("active");
                        }

                    }

                }

            }

            // have breakpoint for current iframe size
            if($(".breakpoint-bar > [data-breakpoint='"+$("#iframe").width()+"']").length > 0){
                
                // delete other
                $(".breakpoint-bar > .active[data-breakpoint]").removeClass("active");

                // active if there is default 768px breakpoint
                $(".breakpoint-bar > [data-breakpoint='"+$("#iframe").width()+"']").addClass("active");

            }

        }

        // Updating animation manager if active
        if(is_animation_manager()){
            animation_manager();
        }

        // Update active options at the last
        insert_default_options();

        // again to be sure element visible.
        setTimeout(function(){

            // Focus to element
            scroll_to_element(null, false);

        }, window.YellowDelay);

    });
    
    
    /* ---------------------------------------------------- */
    /* Breakpoint bar add active class                      */
    /* ---------------------------------------------------- */
    $(document).on("click",".breakpoint-bar div",function(e){
        $(".breakpoint-bar div").removeClass("active");
        $(this).addClass("active");

        // Active same property if avaiable
        if($(".property-size-tabs-visible").length > 0){

            $(".property-size.active").removeClass("active");

            // get processed media
            var media = process_media_query($(this).attr("data-media-content"));

            // be sure its valid
            if(isDefined(media)){
                media = media.toString();
                $(".property-size[data-property-size='"+media+"']").addClass("active");
            }

        }

        // Update editor
        if(is_content_selected()){
            editor_update(true);
        }

    });


    /* ---------------------------------------------------- */
    /* Hide ace tooltip on warnings                         */
    /* ---------------------------------------------------- */
    $(document).on("mouseover",".ace_gutter-cell.ace_info,.ace_gutter-cell.ace_warning",function(e){
        clearTimeout(window.delayTooltipHide);
        mainBody.addClass("hide-ace-tooltip");
    });


    /* ---------------------------------------------------- */
    /* Show ace tooltip on errors only                      */
    /* ---------------------------------------------------- */
    $(document).on("mouseout",".ace_gutter-cell.ace_info,.ace_gutter-cell.ace_warning",function(e){

        window.delayTooltipHide = setTimeout(function(){
            mainBody.removeClass("hide-ace-tooltip");
        }, 100);

    });


    /* ---------------------------------------------------- */
    /* Updating slider by input                             */
    /* ---------------------------------------------------- */
    function update_slide_by_input(element,value,prefix) {

        var elementParent = element.parent().parent().parent();
        var range;

        // set px as default if format is -
        if(element.parent().find(".yp-after-prefix").val() == "-" && element.hasClass("yp-after-css-val")){

            if(element.val() != elementParent.attr("data-css-default")){

                // px and resize
                element.parent().find(".yp-after-prefix").val("px").trigger('autogrow');

            }

        }

        if(isNaN(element.parent().find(".yp-after-css-val").val())){

            // - and resize
            element.parent().find(".yp-after-prefix").val("-").trigger('autogrow');

        }


        if(value === false){
            value = element.parent().find(".yp-after-css-val").val();
            prefix = element.parent().find(".yp-after-prefix").val();
        }

        var slide = element.parent().parent().find(".wqNoUi-target");

        // Getting format range
        range = get_format_range(prefix, elementParent);

        // min and max values
        if (range === undefined || range === false) {
            return false;
        }

        var min = parseInt(range[0]);
        var max = parseInt(range[1]);

        if (value < min) {
            min = parseInt(value);
        }

        if (value > max) {
            max = value;
        }

        if (isNaN(min) === false && isNaN(max) === false && isNaN(value) === false){

            slide.wqNoUiSlider({
                range: {
                    'min': parseInt(min),
                    'max': parseInt(max)
                },

                start: value
            }, true);

        }

    }


    /* ---------------------------------------------------- */
    /* Right Click disable                                  */
    /* ---------------------------------------------------- */
    mainDocument.contextmenu(function(e) {
        if($(e.target).is("input.wqcolorpicker,input.yp-input,textarea,.yp-background-image-show,.info-image-list img") == false){
            return false;
        }
    });


    // auto insert.
    window.disable_auto_insert = false;


    /* ---------------------------------------------------- */
    /* Update editor content and auto go target line        */
    /* ---------------------------------------------------- */
    function editor_update(focus){

        if(mainBody.hasClass("yp-css-editor-active") == false){
            return false;
        }

        // No selected
        if (!is_content_selected()) {

            editor.setValue(get_clean_css(true, null, true));
            if(focus){editor.focus();}
            editor.execCommand("gotolineend");
            
        } else if(window.disable_auto_insert == false){

            insert_rule(null, 'a', 'a', '');
            var cssData = get_clean_css(false, null, true);
            var goToLine = cssData.split("\ta:a")[0].split(/\r\n|\r|\n/).length;
            cssData = cssData.replace(/a:a !important;/g, "");
            cssData = cssData.replace(/a:a;/g, "");
            insert_rule(null, 'a', 'disable', '');
            editor.setValue(cssData);
            editor.resize(true);
            setTimeout(function(){

                editor.scrollToLine(goToLine, true, false);
                var Range = ace.require("ace/range").Range;

                var paddingL = "";
                if(is_responsive_mod()){
                    paddingL = " ace-type-here-in-responsive";
                }

                editor.getSession().removeMarker(window.typeHereMarker);
                window.typeHereMarker = editor.session.addMarker(new Range(goToLine-1,0,goToLine-1,1), "ace-type-here" + paddingL, "line", true);

            },2);
            if(focus){editor.focus();}
            if (is_responsive_mod()) {
                editor.gotoLine(goToLine, 2, true);
            } else {
                editor.gotoLine(goToLine, 1, true);
            }

        }

        // Adapt to new size
        editor.resize();

    }


    /* ---------------------------------------------------- */
    /* Hide CSS Editor                                      */
    /* ---------------------------------------------------- */
    $(".css-editor-btn,.yp-css-close-btn").click(function() {
        
        if(is_animation_manager()){
            $(".animation-manager-btn.active").trigger("click");
        }

        if ($("#leftAreaEditor").css("display") == 'none') {

            $("#cssData,#cssEditorBar,#leftAreaEditor").show();
            mainBody.addClass("yp-css-editor-active");
            draw_iframe();
            
            var ebtn = $(".css-editor-btn");
            var title = ebtn.attr("data-original-title"); // Save
            ebtn.attr("data-title",title); // save as data
            ebtn.attr("data-original-title",""); // remove title

            editor_update(true);

        }else{

            // be sure CSS is valid before close.
            if (mainBody.hasClass("css-code-unvalid")) {
                ypMessage({title: lang.css_parse_error,text: lang.css_parse_error_text,animation: false,customClass: "editor-style-ok"});
                return false;
            }

            $("#cssData,#cssEditorBar,#leftAreaEditor").hide();
            mainBody.removeClass("yp-css-editor-active");
            draw_iframe();

            $(".css-editor-btn").attr("data-original-title",$(".css-editor-btn").attr("data-title"));

            // update redo buttons
            check_undoable_history();

            // Update All.
            draw();

        }

        // Update All.
        draw();

    });


    /* ---------------------------------------------------- */
    /* Blur Custom Slider Value                             */
    /* ---------------------------------------------------- */
    $(".yp-after-css-val,.yp-after-prefix").on("keydown keyup",function(e){

        if(e.originalEvent == false && window.allow_input_CSS_process == false){
            return false;
        }

        var code = e.keyCode || e.which;

        // ESC && Enter Blur
        if(code == 27 || code == 13){
            $(this).trigger("blur");
            return false;
        }

        // Not update on some keys
        if(code != 9 && code != 17 && code != 18 && code != 39 && code != 37){

            var element = $(this);

            clearTimeout(window.manualChangeInputDelay);
            window.manualChangeInputDelay = setTimeout(function(){

                var id = element.parents(".yp-option-group").attr("data-css");
                var thisContent = $("#" + id + "-group").parent(".yp-this-content");
                var lock = thisContent.find(".lock-btn.active").length;
                var lockedIdArray = [];

                if(lock){
                    thisContent.find(".yp-option-group").each(function(){
                        if($(this).attr("data-css") != id){
                            lockedIdArray.push($(this).attr("data-css"));
                        }
                    });
                }

                var value = element.parent().find(".yp-after-css-val").val();
                var prefix = element.parent().find(".yp-after-prefix").val();

                // Self
                update_slide_by_input(element,false);
                slide_action($("#yp-" + id), id, true, false);

                // others
                if(lock){

                    for(var y = 0;y < lockedIdArray.length; y++){
                        $("#" + lockedIdArray[y]+"-value").val(value);
                        $("#" + lockedIdArray[y]+"-after").val(prefix);
                        update_slide_by_input($("#" + lockedIdArray[y]+"-value"),value,prefix);
                        slide_action($("#yp-" + lockedIdArray[y]), lockedIdArray[y], true, false);
                    }

                }

                option_change();

            }, 20);

        }

    });



    /* ---------------------------------------------------- */
    /* Basic Sharp Selector For Editor                      */
    /* ---------------------------------------------------- */
    function get_live_selector(element){

        if(element === undefined){
            element = get_selected_element();
        }

        // Be sure this item is valid.
        if (element[0] === undefined || element[0] === false || element[0] === null) {
            return false;
        }

        // Getting item parents.
        var parents = element.parentsUntil("body"), selector = 'body', currentSelector;

        // Get last selector
        var lastSelector = get_best_class(element);

        // Foreach all loops.
        for (var i = parents.length - 1; i >= 0; i--) {

            currentSelector = get_best_class(parents[i]);

            if(/\.|#/g.test(currentSelector)){
                currentSelector = parents[i].tagName.toLowerCase()+currentSelector;
            }

            selector = space_cleaner(selector).trim() + " > " + currentSelector + window.separator;

        } // Each end.

        selector = space_cleaner(selector + " > " + lastSelector + ".yp-selected");

        return selector;

    }


    /* ---------------------------------------------------- */
    /* Single Selector                                      */
    /* ---------------------------------------------------- */
    function single_selector(selector,test) {

        var customClass = 'yp-selected';
        if(mainBody.hasClass("yp-control-key-down") && is_content_selected()){
            customClass = 'yp-multiple-selected';
        }

        var selectorArray = get_selector_array(selector);
        var i = 0;
        var indexOf = 0;
        var selectorPlus = '';

        for (i = 0; i < selectorArray.length; i++) {

            if (i > 0) {
                selectorPlus += window.separator + selectorArray[i];
            } else {
                selectorPlus += selectorArray[i];
            }

            if (iframe.find(selectorPlus).length > 1) {

                iframe.find(selectorPlus).each(function(){

                    if (selectorPlus.substr(selectorPlus.length - 1) != ')') {

                        if ($(this).parent().length > 0) {

                            indexOf = 0;

                            $(this).parent().children().each(function() {

                                indexOf++;

                                if ($(this).find("."+customClass).length > 0 || $(this).hasClass((customClass))) {

                                    selectorPlus = selectorPlus + ":nth-child(" + indexOf + ")";

                                }

                            });

                        }

                    }

                });

            }

        }


        // Clean no-need nth-childs.
        if(selectorPlus.indexOf(":nth-child") != -1){

            // Selector Array
            selectorArray = get_selector_array(selectorPlus);

            // Each all selector parts
            for(i = 0; i < selectorArray.length; i++){

                // Get previous parts of selector
                var prevAll = get_previous_item(selectorArray,i).join(" ");

                // Gext next parts of selector
                var nextAll = get_next_item(selectorArray,i).join(" ");

                // check the new selector
                var selectorPlusNew = prevAll + window.separator + selectorArray[i].replace(/:nth-child\((.*?)\)/i,'') + window.separator + nextAll;

                // clean
                selectorPlusNew = space_cleaner(selectorPlusNew);

                // Check the selector without nth-child and be sure have only 1 element.
                if(iframe.find(selectorPlusNew).length == 1){
                    selectorArray[i] = selectorArray[i].replace(/:nth-child\((.*?)\)/i,'');
                }

            }

            // Array to spin, and clean selector.
            selectorPlus = space_cleaner(selectorArray.join(" "));

        }


        // Return the selector without use "add_children_selector" func.
        // Test parement used in get_parents func
        if(test){
            return selectorPlus;
        }


        // Ready.
        return multiple_variation(add_children_support(selectorPlus));

    }


    /* ---------------------------------------------------- */
    /* Adds > symbol to single_selector func                */
    /* ---------------------------------------------------- */
    function add_children_support(selector){

        // Add " > " to selector. Stable V.
        var selectorArray = get_selector_array(selector);
        var newSelector = '', inSelected, thisSelector, testSelector, testEl;
        for(var i = 0; i < selectorArray.length; i++){

            // Don't use nth-child while spin it
            thisSelector = selectorArray[i].replace(/:nth-child\((.*?)\)/i,'');

            // To check select in select
            testSelector = space_cleaner($.trim(newSelector+window.separator+thisSelector+window.separator+thisSelector));

            // Test Element
            testEl = iframe.find(testSelector);

            // Check if same selector has in the selector
            inSelected = testEl.length;

            // Test Element
            if (inSelected > 0 && testEl.hasClass("yp-selected")){
                newSelector = space_cleaner(newSelector) + " > " + selectorArray[i] + window.separator; // Add With '>' separator
            }else{ 
                newSelector += selectorArray[i] + window.separator; // Add with space separator
            }

        }


        // Need trim to continue.
        newSelector = $.trim(newSelector);


        // Add > symbol to last if selector still finding more element than one.
        if(iframe.find(newSelector).length > 1){
            newSelector = newSelector.replace(/(?=[^ ]*$)/i,' > ');
        }

        // Cleans ">" symbols from selector if not need.
        if(newSelector.indexOf(">") != -1){

            var length = newSelector.split(">").length;
            var elementLength = iframe.find(newSelector).length;

            for(i = 1; i < length; i++){

                testEl = iframe.find(newSelector.replace(/ > /i,' '));

                if(testEl.length == elementLength && testEl.hasClass("yp-selected")){
                    newSelector = newSelector.replace(/ > /i,' ');
                }

            }

        }

        // Fix first > symbol before any selector.
        if(/^\>\s/i.test(newSelector)){

            // Second has >
            if(/^>\s(.*?) >/i.test(newSelector)){

                newSelector = newSelector.replace(/^\>\s/i, "");

            // Second doesnt has >
            }else{

                newSelector = newSelector.replace(/^\>\s/i, "");
                newSelector = newSelector.split(" ")[0] + " > " + newSelector.substring(newSelector.indexOf(' ')+1);

            }

        }

        // Return it
        return space_cleaner(newSelector);

    }


    $(".yp-panel-hide,.yp-panel-show").click(function(){
        panel_toggle();
    });


    /* ---------------------------------------------------- */
    /* Previous array item                                  */
    /* ---------------------------------------------------- */
    function get_previous_item(arr,current){

        var result = [];

        for(var i = 0; i < arr.length; i++){

            if(i < current){

                result.push(arr[i]);

            }

        }

        return result;

    }


    /* ---------------------------------------------------- */
    /* Next array item                                      */
    /* ---------------------------------------------------- */
    function get_next_item(arr,current){

        var result = [];

        for(var i = 0; i < arr.length; i++){

            if(i > current){

                result.push(arr[i]);

            }

        }

        return result;

    }


    
    /* ---------------------------------------------------- */
    /* Getting parents for bottom parent bar                */
    /* ---------------------------------------------------- */
    function parent_tree_bar(){

        $("#parent-bar span").remove();
        var parentBar = $("#parent-bar ul");
        parentBar.empty();

        var element, selector, title;
        var list = get_selected_element().parentsUntil("html").andSelf();

        list.each(function(i){

            element = $(this);

            element.addClass("yp-parent-way-" + i);

            selector = get_best_class(element);

            title = get_tag_information(selector, false, element);

            if(title == undefined || title == false){
                title = lang.unknown;
            }

            if(title.toLowerCase() == lang.division){
                title = selector;
            }

            if(list.length-1 == i){
                parentBar.append("<li data-parent-selector='"+selector+"' class='active'><span>"+title+"</span></li>");
            }else{
                parentBar.append("<li data-parent-selector='"+selector+"'><span>"+title+"</span></li>");
            }

        });

    }


    /* ---------------------------------------------------- */
    /* Select the element by click                          */
    /* ---------------------------------------------------- */
    $(document).on("click", "#parent-bar ul li", function(){

        var targetElement, selector;

        // update active
        $("#parent-bar ul li").removeClass("active");

        selector = $(this).attr("data-parent-selector");
        targetElement = iframe.find(".yp-parent-way-" + $(this).index());

        // update with real selector
        if($(this).hasClass("yp-parent-has-selector") == false){
            selector = get_parents(targetElement, "defaultNoCache");
            $(this).attr("data-parent-selector", selector);
            $(this).addClass("yp-parent-has-selector");
        }

        window.targetIsParentTree = true;
        set_selector(selector, targetElement, true);
        window.targetIsParentTree = false;

        $(this).addClass("active");

        // delete focus
        paintCanvas.extra.find(".yp-element-viewer").addClass("yp-element-viewer-relax-opacity").removeClass("yp-element-viewer").fadeOut(300);

        window.relaxView = setTimeout(function(){
            paintCanvas.extra.find(".yp-element-viewer-relax-opacity").remove();
        }, 320);

        scroll_to_element(null, true);

    });


    /* ---------------------------------------------------- */
    /* focus to element on mouseover                        */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter mouseover", "#parent-bar ul li", function(){

        // get simple class selector
        var selector = $(this).attr("data-parent-selector");
        var targetElement = iframe.find(".yp-parent-way-" + $(this).index());

        // update with real selector
        if($(this).hasClass("yp-parent-has-selector") == false){
            selector = get_parents(targetElement, "defaultNoCache");
            $(this).attr("data-parent-selector", selector);
            $(this).addClass("yp-parent-has-selector");
        }

        element_focus(iframe.find(selector));

    });


    /* ---------------------------------------------------- */
    /* remove element viwer on mouseleave                   */
    /* ---------------------------------------------------- */
    $(document).on("mouseleave mouseout", "#parent-bar ul li", function(){

        paintCanvas.extra.find(".yp-element-viewer").remove();

    });


    /* ---------------------------------------------------- */
    /* Menu Click prepareParents                            */
    /* ---------------------------------------------------- */
    iframe.on("contextmenu", ".yp-selected", function(event){
        
        prepare_parent_and_childrens();

    });

    
    /* ---------------------------------------------------- */
    /* Menu Click prepareParents                            */
    /* ---------------------------------------------------- */
    iframe.on("click", ".yp-edit-menu", function(event){
        
        if(event.which == 1){
            prepare_parent_and_childrens();
        }

    });


    /* ---------------------------------------------------- */
    /* Element Right Click prepareParents                   */
    /* ---------------------------------------------------- */
    iframe.on("click", ".yp-selected", function(event){

        if(event.which == 3){
            prepare_parent_and_childrens();
        }

    });


    /* ---------------------------------------------------- */
    /* Focus the element when hover parents in contextmenu  */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", ".context-menu-list.yp-contextmenu-parent li", function(event){

        // Parent deep num
        var parentDeepNumber = $(this).prevAll("li").length;

        // target object element
        var targetElement = get_selected_element().parentsUntil("html").eq(parentDeepNumber);

        // selector
        var selector = get_parents(targetElement, "defaultNoCache");

        // Focus
        element_focus(iframe.find(selector));

    });


    /* ---------------------------------------------------- */
    /* Focus the element when hover children in contextmenu */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", ".context-menu-list.yp-contextmenu-children li", function(event){

        // Children deep num
        var childrenDeepNumber = $(this).prevAll("li").length;

        // target object element
        var targetElement = get_selected_element().children().not("br").eq(childrenDeepNumber);

        // selector
        var selector = get_parents(targetElement, "defaultNoCache");

        // Focus
        element_focus(iframe.find(selector));

    });


    /* ---------------------------------------------------- */
    /* Focus el on hover parents & childrens in contextmenu */
    /* ---------------------------------------------------- */
    $(document).on("mouseleave", ".context-menu-list.yp-contextmenu-parent li,.context-menu-list.yp-contextmenu-children li", function(event){

        // delete focus
        paintCanvas.extra.find(".yp-element-viewer").remove();

    });


    /* ---------------------------------------------------- */
    /* Re show limited parent list                          */
    /* ---------------------------------------------------- */
    $(document).on("click", ".show-more-parent-link", function(event){

        var parent = $(".context-menu-list.yp-contextmenu-parent");
        parent.removeClass("yp-limit-parent-view");

    });


    /* ---------------------------------------------------- */
    /* Re show limited children list                          */
    /* ---------------------------------------------------- */
    $(document).on("click", ".show-more-children-link", function(event){

        var children = $(".context-menu-list.yp-contextmenu-children");
        children.removeClass("yp-limit-children-view");

    });


    /* ---------------------------------------------------- */
    /* Getting parents and covert object to add contextmenu */
    /* ---------------------------------------------------- */
    function prepare_parent_and_childrens(){

        if(window.parentItems == ''){

            // Variables
            var name = '', len = get_selected_element().parentsUntil("html").length - 1, edited;

            // Each all
            get_selected_element().parentsUntil("html").each(function(i){

                // Name of element
                name = get_best_class(this);

                // ellip
                if(name.length > 22){
                    name = name.substr(0, 22 - 1) + '&hellip;';
                }

                // No edited
                edited = "";

                // Adding edited notice if has any edit
                if(get_edited(null, "yp-parent-way-"+(len-i)) == true){
                    edited = "Edited";
                }

                // Adding this edited or no
                name = name + "<i class='yp-contextmenu-small'>"+edited+"</i>";

                window.parentItems += '"parent-'+i+'" : {"name": "'+name+'"}' + ",";

            });

            // add show more link
            window.parentItems += '"show-more-parent-link" : {"name": "...", "className": "show-more-parent-link"}' + ",";

            window.parentItems = $.parseJSON("{" + window.parentItems.replace(/,$/g,'').toString()+"}");

        }

        if(window.childrenItems == ''){

            // Variables
            name = '';

            // Each all
            get_selected_element().children().not("br").each(function(i) {

                // Name of element
                name = get_best_class(this);

                // ellip
                if(name.length > 22){
                    name = name.substr(0, 22 - 1) + '&hellip;';
                }

                window.childrenItems += '"children-'+i+'" : {"name": "'+name+'"}' + ",";

            });

            // add show more link
            window.childrenItems += '"show-more-children-link" : {"name": "...", "className": "show-more-children-link"}' + ",";

            window.childrenItems = $.parseJSON("{" + window.childrenItems.replace(/,$/g,'').toString()+"}");

        }

    }


    /* ---------------------------------------------------- */
    /* Get if whichClass match with any selector            */
    /* ---------------------------------------------------- */
    function get_edited(type, whichClass){

        // Variables
        var hasEdited = false, array = [], thisSelector, thisElement;

        // Get All Selectors
        array = get_all_selectors(type).selectors;

        // If not have any selectors
        if(array != false && array != undefined && array.length > 0){

            // Clean falses
            array = array.filter(Boolean);

            // Each all selectors
            for(var m = 0; m < array.length; m++){

                // loop selector
                thisSelector = get_foundable_query(array[m],true,true,true,true);

                // be sure this selector valid
                thisElement = check_selector(thisSelector,true,false,false);

                // skip if selector is invalid
                if(thisElement == false){
                    continue;
                }

                if(iframe.find(thisSelector).hasClass(whichClass) == true){
                    hasEdited = true;
                    break;
                }

            }

        }

        // Return true or false
        return hasEdited;

    }

    
    /* ---------------------------------------------------- */
    /* SETUP AFTER ADDONS LOADED                            */
    /* ---------------------------------------------------- */
    window.addonsReady = function(){

        // Addons Ready
        window.addonsCheck = true;

        /* ---------------------------------------------------- */
        /* Makes Right Panel Resizeable                         */
        /* ---------------------------------------------------- */
        $( ".yp-select-bar" ).resizable({

            handles: "w, e",
            minWidth: 288,
            maxWidth: 400,

            start: function( event, ui ){

                // Set cursor
                $(".fake-layer-x").css("cursor","e-resize");
                hide_frame_ui(0);
                
            },

            resize: function( event, ui ){

                // delete old
                $("#rightpanel-personalized-view").remove();

                // update
                mainBody.append("<style id='rightpanel-personalized-view'>.yp-select-bar{width:"+ui.size.width+"px !important;}</style>");

                draw_iframe();

            },

            stop: function( event, ui ){

                // delete fake layer
                $(".fake-layer-x").remove();

                // cookie
                create_cookie('rightPanelWidth', ui.size.width);
                show_frame_ui(0);

            }

        });
        
        
        /* ---------------------------------------------------- */
        /* Makes Right Panel Resizeable                         */
        /* ---------------------------------------------------- */
        $( "#visual-css-view" ).resizable({

            handles: "w",
            minWidth: 288,
            maxWidth: $(window).width(),

            start: function( event, ui ){
                
                // Set cursor
                $(".fake-layer-x").css("cursor","e-resize");
                hide_frame_ui(0);

            },

            resize: function( event, ui ){

                // delete old
                $("#visual-manager-personalized-view").remove();

                if(ui.size.width > parseInt($(window).width() - 10)){
                    ui.size.width = $(window).width();
                }

                // update
                mainBody.append("<style id='visual-manager-personalized-view'>#visual-css-view{width:"+ui.size.width+"px !important;}</style>");

                draw_iframe();

            },

            stop: function( event, ui ){

                // delete fake layer
                $(".fake-layer-x").remove();

                // cookie
                create_cookie('visualManagerWidth', ui.size.width);
                show_frame_ui(0);

            }

        });


        /* ---------------------------------------------------- */
        /* Makes Advanced info box Resizeable                   */
        /* ---------------------------------------------------- */
        $( ".advanced-info-box" ).resizable({

            handles: "e",
            minWidth: 300,
            maxWidth: ($(window).width()*50/100),

            start: function( event, ui ){

                // Set cursor
                $(".fake-layer-x").css("cursor","e-resize");
                
            },

            resize: function( event, ui ){

                // delete old
                $("#advancedinfobox-personalized-view").remove();

                // update
                mainBody.append("<style id='advancedinfobox-personalized-view'>.advanced-info-box {width:"+ui.size.width+"px !important;}</style>");

            },

            stop: function( event, ui ){

                // delete fake layer
                $(".fake-layer-x").remove();

                // cookie
                create_cookie('advancedInfoBoxWidth', ui.size.width);

            }

        });


        /* ---------------------------------------------------- */
        /* Makes Animation Manager Resizeable                   */
        /* ---------------------------------------------------- */
        $( ".yp-animate-manager" ).resizable({

            handles: "n",

            minHeight: 287,
            maxHeight: ($(window).height()*70/100),

            start: function( event, ui ){

                hide_frame_ui(0);

                // Set cursor
                $(".fake-layer-x").css("cursor","n-resize");

            },

            resize: function( event, ui ){

                // delete old css
                $("#animmanager-personalized-view").remove();

                // update
                mainBody.append("<style id='animmanager-personalized-view'>body.yp-animate-manager-active.yp-responsive-device-mode #iframe{height:calc(80% - "+ui.size.height+"px) !important;}body.yp-animate-manager-active .responsive-size-text{margin-bottom:"+(number-25)+"px !important;}.yp-animate-manager{height:"+ui.size.height+"px !important;}</style>");

            },

            stop: function( event, ui ){

                $(".fake-layer-x").remove();

                // Cookie
                create_cookie('animManagerHeight', ui.size.height);

            }

        });


        /* ---------------------------------------------------- */
        /* Makes CSS Editor Resizeable                          */
        /* ---------------------------------------------------- */
        $( "#leftAreaEditor" ).resizable({

            handles: "e",
            maxWidth: $(window).width(),
            minWidth: 370,
            delay: 150,

            start: function( event, ui ){

                $("#cssData").width(ui.size.width-41);
                $("#cssEditorBar").width(ui.size.width);
                hide_frame_ui(0);

                // Set cursor
                $(".fake-layer-x").css("cursor","e-resize");

            },

            resize: function( event, ui ) {

                if(ui.size.width > parseInt($(window).width() - 10)){
                    ui.size.width = $(window).width();
                }

                $("#cssData").width(ui.size.width-41);
                $("#cssEditorBar").width(ui.size.width);

                // delete old css
                $("#csseditor-personalized-view").remove();

                // update
                var number = ui.size.width;
                mainBody.append("<style id='csseditor-personalized-view'>#leftAreaEditor, #cssData, #cssEditorBar{width:"+number+"px !important;}body.yp-css-editor-active .metric,body.yp-css-editor-active .breakpoint-bar, body.yp-css-editor-active.yp-responsive-device-mode #iframe, body.yp-css-editor-active:not(.yp-responsive-device-mode) #iframe {left: "+number+"px !important;}body.yp-css-editor-active .breakpoint-bar div{margin-left: calc("+parseFloat(number+10)+"px - 56px) !important;}body.yp-css-editor-active .context-menu-root:not(.dom_contextmenu), body.yp-css-editor-active .metric-top-tooltip {margin-left: "+number+"px !important;}body.yp-css-editor-active .metric-top-border {margin-left: calc("+number+"px - 1px) !important;}body.yp-css-editor-active .metric-left-tooltip {margin-left: calc("+number+"px + 1px) !important;}body.yp-css-editor-active #parent-bar,body.yp-css-editor-active .responsive-size-text{left:"+number+"px !important;}</style>");
                editor.resize();

                window.FrameleftOffset = undefined;
                draw_responsive_handle();

                draw_iframe();

            },

            stop: function( event, ui ){

                $(".fake-layer-x").remove();
                $("#cssData").width(ui.size.width-41);
                $("#cssEditorBar").width(ui.size.width);

                // Cookie
                create_cookie('cssEditorWidth', ui.size.width);

            }

        });


        /* ---------------------------------------------------- */
        /* Breakpoint Bar ContextMenu                           */
        /* ---------------------------------------------------- */
        $.contextMenu({

            events: {

                show: function() {

                    var el = $(this);

                    // need to wait until contextmenu open
                    setTimeout(function(){

                        // make disable contextmenu values if not have yp data
                        var sameSizeStyles = findStyle(getStyles(null, false), "[msize=" + el.attr('data-breakpoint-data') + "]");

                        // empty breakpoint
                        if(sameSizeStyles.length == 0){
                            $(".reset-breakpoint-menu").addClass("disabled");
                            $(".review-breakpoint-menu").addClass("disabled");
                            $(".show-css-menu").addClass("disabled");
                        }else{
                            $(".review-breakpoint-menu").removeClass("disabled");
                            $(".reset-breakpoint-menu").removeClass("disabled");
                            $(".show-css-menu").removeClass("disabled");
                        }

                    }, window.YellowDelay);

                }

            },

            selector: '.breakpoint-bar div', 
            className: 'dom_contextmenu breakpoint-contextmenu',
            callback: function(key, options) {

                var breakpointMedia;
                
                // Reset functions
                if(key == 'reset'){

                    // Getting data
                    breakpointMedia = $(this).attr("data-breakpoint-data");

                    // Alert
                    ypMessage({
                      title: lang.delete_media_query.replace("{$1}", "<strong class='bold-light'>" + breakpointMedia + "</strong>"),
                      text: lang.delete_media_query_msg,
                      
                      showCancelButton: true,
                      confirmButtonColor: "#DD6B55",
                      confirmButtonText: lang.delete_t + "!",
                      closeOnConfirm: true,
                      animation: false,
                      customClass: 'editor-style',
                      html: true
                    },function(){

                        // Find all changes in breakpoint size and remove
                        setStyles(removeStyle(getStyles(null, false), "[msize=" + breakpointMedia + "]"));

                        // changed
                        option_change();

                        // Update
                        insert_default_options();

                        // Update view
                        draw();

                    });

                }

                // Open breakpoint in visual manager
                if(key == "reviewBreakpoint"){

                    // breakpoint
                    breakpointMedia = $(this).attr("data-breakpoint-data");

                    // Open visual manager
                    open_visual_manager();

                    // update filter
                    $("#visual-rule-filter").val(breakpointMedia).trigger("keyup");

                }

                // Show CSS functions
                if(key == 'showCSS'){

                    // disable
                    window.disable_auto_insert = true;

                    // check css editor is active
                    if (mainBody.hasClass("yp-css-editor-active") == false) {

                        // Open if hidden
                        $(".css-editor-btn").trigger("click");

                    }

                    // Get editor data from ace editor if open                            
                    cssData = get_clean_css(true, null, true).replace(/ |\t/g,'');

                    // enable again.
                    window.disable_auto_insert = false;

                    // Getting breakpoint query
                    var mediaQuery = $(this).attr("data-media-content");

                    // Use basic query if full query not valid
                    if(cssData.indexOf(mediaQuery) == -1){
                        mediaQuery = $(this).attr("data-breakpoint-data").replace(/ |\t/g,'');
                    }

                    // Find media start line
                    var goToLine = cssData.split(mediaQuery)[0].split(/\r\n|\r|\n/).length;

                    // Clear whitespaces for check media query
                    var noSpaceCSS = cssData.replace(/\}\s+\}/g,'}}');

                    // is valid?
                    if(isDefined(noSpaceCSS.split(mediaQuery)[1])){

                        // Delay
                        setTimeout(function(){

                            // Scroll to line
                            editor.scrollToLine(goToLine, true, false);

                        },4);

                        // find total media line number
                        var mediaLines = noSpaceCSS.split(mediaQuery)[1].split(/\}\}/g)[0].split(/\r\n|\r|\n/).length;

                        // load range API
                        var Range = ace.require("ace/range").Range;

                        // Select the media query section
                        editor.selection.setRange(new Range(goToLine-1, 0, (goToLine+mediaLines)+1, 1));

                    }

                }

            },
            items: {
                "reviewBreakpoint": {
                    name: lang.review_breakpoint,
                    className: "review-breakpoint-menu"
                },
                "showCSS": {
                    name: lang.show_in_editor,
                    className: "show-css-menu"
                },
                "reset": {
                    name: lang.delete_t,
                    className: "reset-breakpoint-menu"
                }
            }
        });


        /* ---------------------------------------------------- */
        /* Auto Width for search input                          */
        /* ---------------------------------------------------- */
        $("#search").autoGrowInput({
            minWidth: 229,
            maxWidth: 500
        });


        /* ---------------------------------------------------- */
        /* Frame context menu options.                          */
        /* ---------------------------------------------------- */
        $.contextMenu({

            events: {

                // Draw Again Borders, Tooltip After Contextmenu Hide.
                hide: function(opt) {

                    // Remove parent and children limit before hide.
                    $(".yp-limit-parent-view").removeClass("yp-limit-parent-view");
                    $(".yp-limit-children-view").removeClass("yp-limit-children-view");

                    draw();

                },

                // if contextmenu show; update some options.
                show: function() {

                    // Hide all states
                    $(".yp-contextmenu-hover,.yp-contextmenu-focus,.yp-contextmenu-active,.yp-contextmenu-checked,.yp-contextmenu-disabled,.yp-contextmenu-enabled,.yp-contextmenu-invalid,.yp-contextmenu-link,.yp-contextmenu-valid,.yp-contextmenu-visited").hide();

                    // Selected tag
                    var selectedTag = get_selected_element().prop("tagName").toUpperCase();

                    // Show default states
                    $(".yp-contextmenu-hover,.yp-contextmenu-active").show();
                    
                    // Special State Input
                    if(selectedTag == 'INPUT'){

                        var inputType = get_selected_element().attr("type");

                        // Disabled, enabled, focus on all inputs
                        $(".yp-contextmenu-disabled,.yp-contextmenu-enabled,.yp-contextmenu-focus").show();

                        // values: valid or invalid.
                        if(inputType == undefined || inputType == 'text' || inputType == 'password' || inputType == 'date' || inputType == 'datetime-local' || inputType == 'email' || inputType == 'month' || inputType == 'number' || inputType == 'range' || inputType == 'search' || inputType == 'tel' || inputType == 'time' || inputType == 'week' || inputType == 'url'){
                            $(".yp-contextmenu-invalid,.yp-contextmenu-valid").show();
                        }

                        // Checked selector
                        if(inputType == 'checkbox'){
                            $(".yp-contextmenu-checked").show();
                        }

                    }

                    // Special State A
                    if(selectedTag == 'A'){
                        $(".yp-contextmenu-link,.yp-contextmenu-visited").show();
                    }

                    // Disable contextmenu on animate creator.
                    if (is_animate_creator()) {
                        get_selected_element().contextMenu("hide");
                    }


                    var selector = get_current_selector();


                    // dont show parents if no parent
                    var elementP = iframe.find(selector).parent();
                    if (elementP.length > 0 && elementP.prop("tagName").toLowerCase() != "html") {
                        $(".yp-contextmenu-parent").removeClass("yp-disable-contextmenu");
                    } else {
                        $(".yp-contextmenu-parent").addClass("yp-disable-contextmenu");
                    }

                    // dont show childrens if no children
                    var elementChildrens = iframe.find(selector).children().not("br");
                    if (elementChildrens.length > 0) {
                        $(".yp-contextmenu-children").removeClass("yp-disable-contextmenu");
                    } else {
                        $(".yp-contextmenu-children").addClass("yp-disable-contextmenu");
                    }

                    // hover, focus? etc
                    $(".yp-active-contextmenu").removeClass("yp-active-contextmenu");
                    if(body.hasAttr("data-yp-selector")){
                        $(".yp-contextmenu-" + body.attr("data-yp-selector").replace(":", "")).addClass("yp-active-contextmenu");
                    }

                    // select it
                    if(iframe.find(".yp-selected-others").length > 0){
                        $(".yp-contextmenu-select-it").show();
                    }else{
                        $(".yp-contextmenu-select-it").hide();
                    }

                    // limiting parent list view
                    var parent = $(".context-menu-list.yp-contextmenu-parent");
                    var parentList = $(".context-menu-list.yp-contextmenu-parent li");

                    if(parentList.length > 7){
                        parent.addClass("yp-limit-parent-view");
                    }

                    // limiting children list view
                    var children = $(".context-menu-list.yp-contextmenu-children");
                    var childrenList = $(".context-menu-list.yp-contextmenu-children li");

                    if(childrenList.length > 7){
                        children.addClass("yp-limit-children-view");
                    }

                    // Hide and show some menu items if has change etc
                    smart_menu();

                }

            },

            // Open context menu only if a element selected.
            selector: 'body.yp-content-selected .yp-selected,body.yp-content-selected.yp-selected',
            callback: function(key, options) {

                var selector = get_current_selector();

                // Context Menu: Hover
                if (key == "hover" || key == "focus" || key == "link" || key == "visited" || key == "active" || key == "checked" || key == "disabled" || key == "enabled" || key == "invalid" || key == "valid") {

                    selector = selector.replace(/:(?!hover|focus|active|link|visited|checked|disabled|enabled|invalid|valid)/g,"YP_DOTTED_PREFIX");

                    if (!$(".yp-contextmenu-" + key).hasClass("yp-active-contextmenu")){
                        if (selector.indexOf(":") == -1) {
                            selector = selector + ":" + key;
                        } else {
                            selector = selector.split(":")[0] + ":" + key;
                        }
                    } else {
                        selector = selector.split(":")[0];
                    }

                    selector = selector.replace(/YP_DOTTED_PREFIX/g,":");
                    set_selector(selector, get_selected_element(), true);

                }

                // matched visual manager
                if(key == "reviewStyles"){
                    open_visual_manager();
                    $("#visual-rule-filter").val("matched").trigger("keyup");
                }


                // SINGLE RESET
                if(key == 'resetSingleSelf'){
                    reset_selected_element(false, "single");
                    get_selected_element().contextMenu("hide");
                }

                if(key == 'resetSingleChilds'){
                    reset_selected_element(true, "single");
                    get_selected_element().contextMenu("hide");
                }

                // TEMPLATE RESET
                if(key == 'resetTemplateSelf'){
                    reset_selected_element(false, "template");
                    get_selected_element().contextMenu("hide");
                }

                if(key == 'resetTemplateChilds'){
                    reset_selected_element(true, "template");
                    get_selected_element().contextMenu("hide");
                }

                // GLOBAL RESET
                if(key == 'resetGlobalSelf'){
                    reset_selected_element(false, "global");
                    get_selected_element().contextMenu("hide");
                }

                if(key == 'resetGlobalChilds'){
                    reset_selected_element(true, "global");
                    get_selected_element().contextMenu("hide");
                }

                if(key == 'show-more-parent-link' || key == 'show-more-children-link'){
                    return false;
                }

                // Parent
                if(key.indexOf("parent-") != -1 && key != "show-more-parent-link"){

                    // Parent number
                    var n = key.replace("parent-","");

                    // Find target
                    var targetElement = get_selected_element().parentsUntil("html").eq(n);

                    // give point
                    targetElement.addClass("yp-will-selected");

                    // Cleans
                    clean();

                    // Get parent selector.
                    var parentSelector = $.trim(get_parents(iframe.find(".yp-will-selected"), "default"));

                    // Set Selector
                    set_selector(parentSelector, null, false);

                    // delete focus
                    paintCanvas.extra.find(".yp-element-viewer").addClass("yp-element-viewer-relax-opacity").removeClass("yp-element-viewer").fadeOut(300);

                    setTimeout(function(){
                        paintCanvas.extra.find(".yp-element-viewer-relax-opacity").remove();
                    }, 400);

                }

                // Child
                if(key.indexOf("children-") != -1 && key != "show-more-children-link"){

                    // children number
                    var n = key.replace("children-","");

                    // Find target
                    var targetElement = get_selected_element().not("br").children().eq(n);

                    // give point
                    targetElement.addClass("yp-will-selected");

                    // Cleans
                    clean();

                    // Get parent selector.
                    var parentSelector = $.trim(get_parents(iframe.find(".yp-will-selected"), "default"));

                    // Set Selector
                    set_selector(parentSelector, null, false);

                    // delete focus
                    paintCanvas.extra.find(".yp-element-viewer").addClass("yp-element-viewer-relax-opacity").removeClass("yp-element-viewer").fadeOut(300);

                    setTimeout(function(){
                        paintCanvas.extra.find(".yp-element-viewer-relax-opacity").remove();
                    }, 400);

                }

                // write CSS
                if (key == "writeCSS") {

                    if (mainBody.hasClass("yp-css-editor-active")) {
                        $(".css-editor-btn").trigger("click");
                    }

                    $(".css-editor-btn").trigger("click");

                    get_selected_element().contextMenu("hide");

                }

                // Select Just It
                if (key == 'selectjustit') {

                    mainBody.addClass("yp-select-just-it");

                    var currentSelector = get_current_selector();                      

                    if(iframe.find(currentSelector).length > 1){

                        selector = get_parents(null, "sharp");

                        var selectorPlus = single_selector(selector, false);

                        if (iframe.find(selectorPlus).length !== 0) {
                            set_selector(selectorPlus, null, true);
                        }

                    }

                    // Mark it as sharp selector
                    window.lastParentQueryStatus = "sharp";

                    mainBody.removeClass("yp-select-just-it");

                }
            

                // leave Selected element.
                if (key == 'close') {
                    clean();
                    gui_update();
                }

                // toggle selector editor.
                if (key == "editselector") {
                    open_selector_editor();
                }

            },


            // Content menu elements.
            build: function($trigger, e) {
                return {
                    items: {
                        
                        "pseudo-class": {
                            name: lang.pseudo_class,
                            className: "yp-contextmenu-pseudo-classes",
                            items:{

                                "hover": {
                                    name: ":hover",
                                    className: "yp-contextmenu-hover"
                                },
                                "focus": {
                                    name: ":focus",
                                    className: "yp-contextmenu-focus"
                                },
                                "link": {
                                    name: ":unvisited",
                                    className: "yp-contextmenu-link"
                                },
                                "visited": {
                                    name: ":visited",
                                    className: "yp-contextmenu-visited"
                                },
                                "active": {
                                    name: ":active",
                                    className: "yp-contextmenu-active"
                                },
                                "checked": {
                                    name: ":checked",
                                    className: "yp-contextmenu-checked"
                                },
                                "disabled": {
                                    name: ":disabled",
                                    className: "yp-contextmenu-disabled"
                                },
                                "enabled": {
                                    name: ":enabled",
                                    className: "yp-contextmenu-enabled"
                                },
                                "invalid": {
                                    name: ":invalid",
                                    className: "yp-contextmenu-invalid"
                                },
                                "valid": {
                                    name: ":valid",
                                    className: "yp-contextmenu-valid"
                                },

                            },

                        },
                        "parent": {
                            name: lang.parent_elements,
                            className: "yp-contextmenu-parent",
                            items:window.parentItems,
                        },
                        "children": {
                            name: lang.children_elements,
                            className: "yp-contextmenu-children",
                            items:window.childrenItems,
                        },
                        "selectjustit": {
                            name: lang.select_only_this,
                            className: "yp-contextmenu-select-it"
                        },
                        "writeCSS": {
                            name: lang.write_css,
                            className: "yp-contextmenu-type-css"
                        },
                        "editselector": {
                            name: lang.edit_selector,
                            className: "yp-contextmenu-selector-edit"
                        },
                        "sep2": "---------",
                        "reviewStyles": {
                            name: lang.review_styles,
                            className: "yp-contextmenu-review-styles"
                        },
                        "reset": {
                            name: lang.reset_styles,
                            className: "yp-contextmenu-reset-styles",
                            items:{
                                "resetSingle": {
                                    name: lang.single,
                                    className: "yp-contextmenu-reset-single",
                                    items:{
                                        "resetSingleSelf": {
                                            name: lang.the_element,
                                            className: "yp-contextmenu-reset-single-self"
                                        },
                                        "resetSingleChilds": {
                                            name: lang.child_elements,
                                            className: "yp-contextmenu-reset-single-childs"
                                        },
                                    },
                                },
                                "resetTemplate": {
                                    name: lang.template,
                                    className: "yp-contextmenu-reset-template",
                                    items:{
                                        "resetTemplateSelf": {
                                            name: lang.the_element,
                                            className: "yp-contextmenu-reset-template-self"
                                        },
                                        "resetTemplateChilds": {
                                            name: lang.child_elements,
                                            className: "yp-contextmenu-reset-template-childs"
                                        },
                                    },
                                },
                                "resetGlobal": {
                                    name: lang.global_t,
                                    className: "yp-contextmenu-reset-global",
                                    items:{
                                        "resetGlobalSelf": {
                                            name: lang.the_element,
                                            className: "yp-contextmenu-reset-global-self"
                                        },
                                        "resetGlobalChilds": {
                                            name: lang.child_elements,
                                            className: "yp-contextmenu-reset-global-childs"
                                        },
                                    },
                                },
                            },
                        },
                        "close": {
                            name: lang.leave,
                            className: "yp-contextmenu-close"
                        }

                    }

                }

            }

        });

    };
    


    /* ---------------------------------------------------- */
    /* Gives info about reset styles & review               */
    /* ---------------------------------------------------- */
    function smart_menu(){

        // Clean Up Classes
        $(".yp-contextmenu-reset-single-childs,.yp-contextmenu-reset-template-childs,.yp-contextmenu-reset-global-childs,.yp-contextmenu-reset-single-self,.yp-contextmenu-reset-template-self,.yp-contextmenu-reset-global-self").removeClass("yp-disable-contextmenu");

        // Variables
        var thisSelector, rules = [], ruleCount = 0, typeRuleCount = 0, typeRuleCountChild = 0, typeRuleCountSelf = 0, thisRules, thisElement, selfCount = 0, childCount = 0, array = [], type = null, types = ["global", "template", "single"], globalSelfCount = 0;

        // Each Types
        for(var t = 0; t < types.length; t++){

            // Reset on each new type
            typeRuleCount = 0;
            typeRuleCountChild = 0;
            typeRuleCountSelf = 0;

            // This Type
            type = types[t];

            // Disable the element and children by default
            $(".yp-contextmenu-reset-"+type+"-childs,.yp-contextmenu-reset-"+type+"-self").addClass("yp-disable-contextmenu");

            // Get All Selectors
            array = get_all_selectors(type).selectors;

            // Get All css rules
            rules = get_all_selectors(type).rules;

            // If not have selectors
            if(array == false || array == undefined || array.length <= 0){
                $(".yp-contextmenu-reset-"+type).addClass("yp-disable-contextmenu");
                continue;
            }

            // Clean falses
            array = array.filter(Boolean);

            // Each all selectors
            for(var i = 0; i < array.length; i++){

                // Get this rule
                thisRules = rules[i];

                // loop selector
                thisSelector = get_foundable_query(array[i],true,true,true,true);

                // be sure this selector valid
                thisElement = check_selector(thisSelector,true,false,false);

                // skip if selector is invalid
                if(thisElement == false){
                    continue;
                }

                // Filter only childrens
                if(iframe.find(thisSelector).parents(".yp-selected").length > 0){

                    $(".yp-contextmenu-reset-"+type+"-childs").removeClass("yp-disable-contextmenu"); // Active if has
                    childCount++;

                    ruleCount += thisRules.split(";").length - 1;
                    typeRuleCount += thisRules.split(";").length - 1;
                    typeRuleCountChild += thisRules.split(";").length - 1;


                // if selector match with target element
                }else if(iframe.find(thisSelector).hasClass("yp-selected") == true){
                    $(".yp-contextmenu-reset-"+type+"-self").removeClass("yp-disable-contextmenu"); // Active if has
                    selfCount++;

                    ruleCount += thisRules.split(";").length - 1;
                    typeRuleCount += thisRules.split(";").length - 1;
                    typeRuleCountSelf += thisRules.split(";").length - 1;

                }

            } // selector array for end


            // Hide if zero
            if(typeRuleCount == 0){
                $(".yp-contextmenu-reset-"+type).addClass("yp-disable-contextmenu");
            }

            // Show type rule count SELF
            $(".yp-contextmenu-reset-"+type+"-self > span").html($(".yp-contextmenu-reset-"+type+"-self > span").nodeText() + "<i class='yp-contextmenu-small'>"+typeRuleCountSelf+" Rule</i>");

            // Show type rule count CHILD
            $(".yp-contextmenu-reset-"+type+"-childs > span").html($(".yp-contextmenu-reset-"+type+"-childs > span").nodeText() + "<i class='yp-contextmenu-small'>"+typeRuleCountChild+" Rule</i>");

            // Add All
            globalSelfCount += typeRuleCountSelf;

        } // Types for end

        // Not have any self or child style
        if(selfCount == 0 && childCount == 0){
            $(".yp-contextmenu-reset-styles").addClass("yp-disable-contextmenu");
        }

        // Not have any self style
        if(selfCount == 0){
            $(".yp-contextmenu-review-styles").addClass("yp-disable-contextmenu");
        }else{
            $(".yp-contextmenu-review-styles > span").html($(".yp-contextmenu-review-styles > span").nodeText() + "<i class='yp-contextmenu-small'>"+globalSelfCount+" Rule</i>");
        }




        // -------- For Events [Edited] --------- //

        // cleanUp Events
        $(".yp-contextmenu-pseudo-classes .yp-contextmenu-small").remove();

        // Get all selectors of current type
        array = get_all_selectors().selectors;

        var eventX = "";

        // If not have selectors
        if(array != false && array != undefined && array.length > 0){

            // Clean falses
            array = array.filter(Boolean);

            // Each selectors
            for(var i = 0; i < array.length; i++){

                // Filter if not have any event
                if(/:(hover|focus|active|visited|link|checked|disabled|enabled|invalid|valid)/g.test(array[i]) == false){
                    continue;
                }

                // Getting which event
                eventX = array[i].match(/:(hover|focus|active|visited|link|checked|disabled|enabled|invalid|valid)/g)[0].replace(/\:/g, "");

                // loop selector
                thisSelector = get_foundable_query(array[i],true,true,true,true);

                // be sure this selector valid
                thisElement = check_selector(thisSelector,true,false,false);

                // skip if selector is invalid
                if(thisElement == false){
                    continue;
                }

                // Only selector which match with the target Element
                if(iframe.find(thisSelector).hasClass("yp-selected") == true){
                    $(".yp-contextmenu-" + eventX).append("<i class='yp-contextmenu-small'>Edited</i>");
                }

            }

        }

    }



    /* ---------------------------------------------------- */
    /* Updating Gui of the editor panel                     */
    /* ---------------------------------------------------- */
    function gui_update() {

        // Vars
        var height = 0;

        // Elements
        var panel = $(".yp-select-bar");
        var panel_editor = $(".yp-editor-panel");
        var top = $(".yp-editor-top");
        var footer = $(".yp-panel-footer");

        // Get Scroll Top because need to keep scrollTop
        // for fix scrolling Top problem after re-edit panel height.
        window.lastScrollTop = panel_editor.scrollTop();

        // Pixels
        var top_offset_px = panel.offset().top;
        var top_px = top.height();
        var margin_px = 18; // default top margin of panel
        var parent_bar_height = 25; // default top margin of panel

        // Zero Parent bar if not visible
        if(ypOption.show_parent_tree == false){
            parent_bar_height = 0;
        }

        // Params
        var iframe_height = iframe.height();
        var frame_height = $("#iframe").height();
        var window_height = $(window).height();

        // Max Possible height
        var maximum_height = window_height - (top_offset_px + top_px + margin_px + parent_bar_height);

        // Remove Style Attr
        panel_editor.removeAttr("style");

        // Get Height
        height = panel_editor.height();

        // Apply Max Height
        if(height > maximum_height){

            height = maximum_height;
            panel_editor.height(height);

        }

        // Hide Panel Footer in CSS Properties Section
        if($(".yp-editor-list > li.active").length > 0){
            footer.hide();
        }else{
            footer.show();
        }

        // If right panel is fixed - Always
        if(mainBody.hasClass("yp-fixed-right-panel")){
            height = window_height - (top_offset_px + top_px + parent_bar_height);
            panel_editor.height(height);
        }

        // If right panel is fixed
        footer.css("width",parseInt( panel.width() - 1 ) + "px");

        // Set Scroll Top
        panel_editor.scrollTop(window.lastScrollTop);

        // Auto Margin Right + Margin Scroll problem fix.
        if(is_responsive_mod() == false){

            setTimeout(function(){

                if (iframe_height > frame_height) {
                    panel.css("marginRight", 8 + get_scroll_bar_width() + "px");
                } else {
                    panel.css("marginRight", "8px");
                }

            },10);

        }

        if(isUndefined(window.rightPanelPerfect)){

            // define
            window.rightPanelPerfect = new PerfectScrollbar($('.yp-editor-panel')[0], { wheelSpeed: 0.5, suppressScrollX: true, includePadding: true, minScrollbarLength: 12 });

        }else{

            // Update perfect scrollbar
            window.rightPanelPerfect.update();

        }

    }


    // Update GUI On Start
    gui_update();


    /* ---------------------------------------------------- */
    /* Element picker                                       */
    /* ---------------------------------------------------- */
    $(".yp-element-picker").click(function() {
        body.toggleClass("yp-element-picker-active");
        $(this).toggleClass("active");
        iframe.find("#colorPickerLiveCSS").remove(); // delete live CSS
        set_default_value($(this).parents(".yp-option-group").attr("data-css")); // Update value
    });


    /* ---------------------------------------------------- */
    /* Measuring Tool                                       */
    /* ---------------------------------------------------- */
    mainDocument.on("mousemove mousedown", function(e){

        if (mainBody.hasClass("yp-metric-disable") === false) {

            var x = e.pageX;
            var y = e.pageY;
            var cx = e.clientX;
            var cy = e.clientY;
            var ww = $(window).width();
            var wh = $(window).height();

            if (mainBody.hasClass("yp-responsive-resizing")) {
                y = y - 10;
                x = x - 10;
                cx = cx - 10;
                cy = cy - 10;
            }

            if ($(this).find("#iframe").length > 0) {

                if (is_responsive_mod()) {

                    var maxWidth = draw_iframe(true);
                    var ek = 0;

                    if (mainBody.hasClass("yp-responsive-resizing")) {

                        // Min 320 W
                        if (cx < 320 + 48) {
                            cx = 320 + 48;
                        }

                        if(mainBody.hasClass("yp-css-editor-active")){
                            ek = parseInt($("#iframe").css("left")) - 46;
                        }

                        // Max full-80 W
                        if (cx > maxWidth - 82 + ek) {
                            cx = maxWidth - 82 + ek;
                        }

                        // Min 320 H
                        if (cy < 320 + 40) {
                            cy = 320 + 40;
                        }

                        // Max full-80 H
                        if (cy > wh - 80) {
                            cy = wh - 80;
                        }

                    }

                    $(".metric-top-border").attr("style", "left:" + cx + "px !important;display:block;margin-left:-1px !important;");
                    $(".metric-left-border").attr("style", "top:" + cy + "px !important;");
                    $(".metric-top-tooltip").attr("style", "top:" + cy + "px !important;display:block;");
                    $(".metric-left-tooltip").attr("style", "left:" + cx + "px !important;display:block;margin-left:1px !important;");

                    if (mainBody.hasClass("yp-responsive-resizing")) {
                        $(".metric-left-tooltip span").text(x + 10);
                        $(".metric-top-tooltip span").text(y + 10);
                    } else {
                        $(".metric-left-tooltip span").text(x);
                        $(".metric-top-tooltip span").text(y);
                    }

                }

            }

            if ($(this).find("#iframe").length === 0) {

                if (mainBody.hasClass("yp-responsive-resizing")) {

                    // Min 320 W
                    if (cx < 320) {
                        cx = 320;
                    }

                    // Max full-80 W
                    if (cx > ww) {
                        cx = ww;
                    }

                    // Min 320 H
                    if (cy < 320) {
                        cy = 320;
                    }

                    // Max full H
                    if (cy > wh) {
                        cy = wh;
                    }

                }

                var metricBorderTop = 30;
                if(is_responsive_mod()){
                    metricBorderTop = 39;
                }

                $(".metric-top-border").attr("style", "left:" + cx + "px !important;display:block;");
                $(".metric-left-border").attr("style", "top:" + cy + "px !important;margin-top:"+metricBorderTop+"px;");
                $(".metric-top-tooltip").attr("style", "top:" + cy + "px !important;display:block;margin-top:32px;");
                $(".metric-left-tooltip").attr("style", "left:" + cx + "px !important;display:block;");

                if (mainBody.hasClass("yp-responsive-resizing")) {
                    $(".metric-top-tooltip span").text(y + 10);
                    $(".metric-left-tooltip span").text(x + 10);
                } else {
                    $(".metric-top-tooltip span").text(y);
                    $(".metric-left-tooltip span").text(x);
                }

            }

        }

    });


    /* ---------------------------------------------------- */
    /* Measuiring Tool: Hover Box                           */
    /* ---------------------------------------------------- */
    iframe.on("mousemove", iframe, function(e) {

        if (mainBody.hasClass("yp-metric-disable") === false){

            var element = $(e.target);

            if (is_resizing() || is_visual_editing() || is_dragging()) {
                element = get_selected_element();
            }

            if(element.hasAttr("class")){
                if(/(^|\s+)yp-(.*?)/g.test(element.attr("class")) && /yp-parent-way/g.test(element.attr("class")) == false){
                    element = get_selected_element();
                }
            }

            // Get Element Self
            var elementGet = element.get(0);

            // Continue if Valid
            if(!isUndefined(elementGet)){
            
                // generate box size
                var boxSize = elementGet.getBoundingClientRect();

                // get scroll top
                var scrollTop = parseFloat(iframe.scrollTop());

                // get sizes
                var widthBoxes = boxSize.width;
                var heightBoxes = boxSize.height;
                var topBoxes = boxSize.top + scrollTop;
                var leftBoxes = boxSize.left;
                var bottomBoxes = boxSize.bottom + scrollTop;

                // min 0
                if (leftBoxes < 0) {
                    leftBoxes = 0;
                }

                // Dynamic Box
                if (paintCanvas.extra.find(".hover-info-box").length === 0) {
                    paintCanvas.extra.append("<div class='hover-info-box'></div>");
                }

                // Get Margin Values
                var mLeft = parseFloat(element.css("marginLeft")),
                mRight = parseFloat(element.css("marginRight")),
                mTop = parseFloat(element.css("marginTop")),
                mBottom = parseFloat(element.css("marginBottom"));

                // No Margin if selected element
                if(element.hasClass("yp-selected")){

                    // Draw
                    paintCanvas.extra.find(".hover-info-box").css("width", widthBoxes).css("height", heightBoxes).css("top", topBoxes).css("left", leftBoxes);

                // All if not selected yet
                }else{

                    // Draw with margin
                    paintCanvas.extra.find(".hover-info-box").css("width", widthBoxes+mLeft+mRight).css("height", heightBoxes+mTop+mBottom).css("top", topBoxes-mTop).css("left", leftBoxes-mLeft).css("border-left-width", mLeft).css("border-right-width", mRight).css("border-top-width", mTop).css("border-bottom-width", mBottom);

                }

                // Size handle
                var handle = paintCanvas.extra.find(".yp-size-handle");

                // size view
                if (handle.length === 0) {

                    // Append
                    paintCanvas.extra.append("<div class='yp-size-handle'>W : <span class='ypdw'></span> px<br>H : <span class='ypdh'></span> px</div>");

                    // Update cache
                    handle = paintCanvas.extra.find(".yp-size-handle");

                }

                // Update tooltip value
                handle.find(".ypdw").text(parseInt(widthBoxes));
                handle.find(".ypdh").text(parseInt(heightBoxes));

                // half box
                leftBoxes = leftBoxes + (widthBoxes / 2);

                // update size position
                handle.css("top", bottomBoxes).css("bottom", "auto").css("left", leftBoxes).css("position", "absolute");

                // max tooltip
                if (parseFloat(bottomBoxes + 40) > (parseFloat($("#iframe").height()) + scrollTop)) {
                    handle.css("bottom", "10px").css("top", "auto").css("left", leftBoxes).css("position", "fixed");
                }

            }

        }

    });

    
    /* ---------------------------------------------------- */
    /* Window Resize                                        */
    /* ---------------------------------------------------- */
    $(window).resize(function(){

        setTimeout(function(){

            // update frame width
            draw_iframe();

            // gui update
            gui_update();

            // gradient pointers
            update_gradient_pointers();

            // redraw responsive handle
            if(is_responsive_mod()){

                // responsive handle
                draw_responsive_handle();

            }

            // draw selected
            draw();

        }, 50);

    });


    /* ---------------------------------------------------- */
    /* Delete iframe placeholder on leave                   */
    /* ---------------------------------------------------- */
    iframe.on("mouseout", ".yp-element-placeholder,.yp-iframe-placeholder", function(){

        // delete sign
        iframe.find(".yp-will-selected").removeClass("yp-will-selected");

        // delete placeholder
        paintCanvas.extra.find(".yp-iframe-placeholder,.yp-element-placeholder").remove();

    });


    /* ---------------------------------------------------- */
    /* Click iframe placeholder                             */
    /* ---------------------------------------------------- */
    iframe.on("mouseup", ".yp-element-placeholder,.yp-iframe-placeholder", function(){

        // target element
        var element = iframe.find(".yp-will-selected"), el = $(this), selector;

        // Element
        if(el.hasAttr("data-that-selector")){
            selector = el.attr("data-that-selector");

        // Iframe
        }else if(el.hasAttr("data-iframe-selector")){
            selector = el.attr("data-iframe-selector");

        // Get selector
        }else{
            selector = get_parents(element, "default");
        }

        // Adds state
        if(mainBody.hasAttr("data-yp-selector")){
            selector = selector + mainBody.attr("data-yp-selector");
        }

        // Select
        window.placeholderSelector = true;
        set_selector(selector, element, false);
        window.placeholderSelector = false;

    });


    /* ---------------------------------------------------- */
    /* To stop element's mouseup and click functions        */
    /* ---------------------------------------------------- */
    iframe.on("mousedown", ".yp-selected", function(event){

        // element placeholder only for left click
        if(event.which == 1){

            // get active element
            var element = $(this);

            var tag = element.prop("tagName").toLowerCase();

            // not on iframe tag and img.
            if(tag != "iframe" && tag != "html" && tag != "body" && tag != "svg" && tag != "img"){
                
                var ySize = paintCanvas.active.find(".yp-selected-boxed-top");
                var XSize = paintCanvas.active.find(".yp-selected-boxed-left");

                // get sizes
                var width = parseFloat(ySize.css("width"));
                var height = parseFloat(XSize.css("height"));
                var top = parseFloat(ySize.css("top"));
                var left = parseFloat(XSize.css("left"));

                // Sign element
                if(is_content_selected() == false){
                    element.addClass("yp-will-selected");
                }

                // generate selector
                var selector = get_parents(element, "default");

                // Delete old
                paintCanvas.extra.find(".yp-element-placeholder").remove();

                // Margin
                var mt = element.css("margin-top"),
                mr = element.css("margin-right"),
                mb = element.css("margin-bottom"),
                ml = element.css("margin-left"),

                // padding
                pt = element.css("padding-top"),
                pr = element.css("padding-right"),
                pb = element.css("padding-bottom"),
                pl = element.css("padding-left");

                // Fix position problem
                top = top - parseFloat(mt);
                left = left - parseFloat(ml);

                // Add new
                paintCanvas.extra.append("<div class='yp-element-placeholder' data-that-selector='"+selector+"' style='left:"+left+"px !important;top:"+top+"px !important; width:"+width+"px !important; height:"+height+"px !important;margin-top:"+mt+";margin-right:"+mr+";margin-bottom:"+mb+";margin-left:"+ml+";padding-top:"+pt+";padding-right:"+pr+";padding-bottom:"+pb+";padding-left:"+pl+";'></div>");

            }

        }

    });

    

    /* ---------------------------------------------------- */
    /* Element Selector Box Function                        */
    /* ---------------------------------------------------- */
    function mouseoverYP(evt){

        // Mouseover starts
        if($(".inspector-sublist-default.active,.inspector-sublist-single.active").length > 0 && mainBody.hasClass("yp-metric-disable")){

            // Element
            var element = $(evt.target);

            // If colorpicker stop.
            if (mainBody.hasClass("yp-element-picker-active")){

                // delete live picker if avaiable.
                iframe.find("#colorPickerLiveCSS").remove();

                // Get Color
                window.pickerColor = element.css("backgroundColor");
                window.pickerColor = window.pickerColor.toLowerCase().replace(/ /g,"");

                // Filter Colors
                if (window.pickerColor == '' || window.pickerColor == 'transparent' || window.pickerColor == 'rgba(0,0,0,0)' || window.pickerColor == 'rgba(255,255,255,0)') {

                    var bgColor = window.pickerColor;
                    element.parents().each(function(){

                        if (bgColor != 'transparent' && bgColor != '' && bgColor !== null) {
                            window.pickerColor = $(this).css("backgroundColor");
                            return false;
                        }

                    });

                }

                // Picker Rule
                var pickerCSSRule = $(".yp-element-picker.active").parents(".yp-option-group").attr("data-css");

                // insert live picker
                insert_live_css(pickerCSSRule, get_color(window.pickerColor.toString()), "colorPickerLiveCSS");

                // Show it live
                $("#yp-" + pickerCSSRule).iris('color', get_color(window.pickerColor.toString()));

            }

            // update the target element
            if(element.hasClass("yp-iframe-placeholder") && iframe.find(".yp-will-selected").length > 0){
                element = iframe.find(".yp-will-selected");
                evt.target = iframe.find(".yp-will-selected")[0];
            }

            // Delete old iframe helper if available
            if(paintCanvas.extra.find(".yp-iframe-placeholder").length > 0){
                paintCanvas.extra.find(".yp-iframe-placeholder").remove();
                iframe.find(".yp-will-selected").removeClass("yp-will-selected");
            }

            // Iframe Placeholder API
            if(element.prop("tagName").toLowerCase() == "iframe" && window.setSelector == false){

                // Get Element Self
                var elementGet = element.get(0);

                // Continue if Valid
                if(!isUndefined(elementGet)){

                    // generate box size
                    var boxSize = elementGet.getBoundingClientRect();

                    // get scroll top
                    var scrollTop = parseFloat(iframe.scrollTop());

                    // get sizes
                    var width = boxSize.width;
                    var height = boxSize.height;
                    var top = boxSize.top + scrollTop;
                    var left = boxSize.left;

                    // get information
                    var selectorFrame = get_parents(element, "default");

                    // Margin
                    var mt = element.css("margin-top"),
                    mr = element.css("margin-right"),
                    mb = element.css("margin-bottom"),
                    ml = element.css("margin-left"),

                    // padding
                    pt = element.css("padding-top"),
                    pr = element.css("padding-right"),
                    pb = element.css("padding-bottom"),
                    pl = element.css("padding-left");

                    // Fix position problem
                    top = top - parseFloat(mt);
                    left = left - parseFloat(ml);

                    // Add iframe placeholder
                    paintCanvas.extra.append("<div class='yp-iframe-placeholder' style='top:"+top+"px !important;left:"+left+"px !important;width:"+width+"px !important;height:"+height+"px !important;margin-top:"+mt+";margin-right:"+mr+";margin-bottom:"+mb+";margin-left:"+ml+";padding-top:"+pt+";padding-right:"+pr+";padding-bottom:"+pb+";padding-left:"+pl+";' data-iframe-selector='"+selectorFrame+"'></div>");

                    element.addClass("yp-will-selected");

                }

            }

            // Adding always class to last hovered element for some reasions.
            iframe.find(".yp-recent-hover-element").removeClass("yp-recent-hover-element");

            if (is_content_selected() === true && mainBody.hasClass("yp-control-key-down") === false) {
                element.addClass("yp-recent-hover-element");
            }

            // if placeholder set selector, so stop here
            if(window.placeholderSelector){
                return false;
            }

            // Stop if placeholder or selected
            if(element.hasClass("yp-element-placeholder") || element.hasClass("yp-iframe-placeholder") || window.firstSelectLimit){
                return false;
            }

            var elementClasses = element.attr("class");

            // Multi selecting support
            if (is_content_selected() === false) {
                if (element.hasClass("yp-selected-tooltip")) {
                    clean();
                    return false;
                }

                if (element.parent().length > 0) {
                    if (element.parent().hasClass("yp-selected-tooltip")) {
                        clean();
                        return false;
                    }
                }
            }

            // If not any YellowPencil element.
            if (isDefined(elementClasses)) {
                if (elementClasses.indexOf("yp-selected-boxed-") > -1) {
                    return false;
                }
            }

            var nodeName = element.prop("tagName");

            // If element already selected, stop.
            if (is_content_selected() === true && mainBody.hasClass("yp-control-key-down") === false) {
                return false;
            }

            // Not show if p tag and is empty.
            if (element.html() == '&nbsp;' && element.prop("tagName") == 'P') {
                return false;
            }

            if (nodeName.toLowerCase() == 'html') {
                return false;
            }

            // if Not Null continue.
            if (element === null) {
                return false;
            }

            // stop if not have
            if (element.length === 0) {
                return false;
            }

            // If selector disable stop.
            if (body.hasClass("yp-selector-disabled")) {
                return false;
            }

            if (is_content_selected() === false){

                // Remove all ex data if another element
                clean();

                // Hover it
                element.addClass("yp-selected");

            }

            // Geting selector.
            var selector;
            if (window.setSelector === false) {

                // High performance option
                if(ypOption.high_performance){
                    selector = get_simple_selector(element);
                }else{
                    selector = get_parents(element, "default");
                }

            } else {
                selector = window.setSelector;
            }

            // stop events
            evt.stopPropagation();
            evt.preventDefault();

            // Not selected
            if (is_content_selected() === false) {

                    draw_box(evt.target, 'yp-selected-boxed');

                    // Element Tooltip  |  Append setting icon.
                    paintCanvas.general.append("<div class='yp-selected-tooltip'><small class='yp-tooltip-small'>" + get_tag_information(selector, true, null) + "</small> " + $.trim(selector) + "</div><div class='yp-edit-tooltip'><span class='yp-edit-menu'></span></div>");

                    // Don't show others if high performance
                    if(ypOption.high_performance == false){

                        // Mark
                        $(selector).addClass("yp-selected-others");

                        // Draw all visible boxes
                        window.drawOtherSelectorLast = selector;
                        draw_other_boxes(selector);

                    }

                    // show tooltip
                    draw_tooltip();

            // multiple
            }else if(mainBody.hasClass("yp-control-key-down") && element.parents(".yp-selected").length === 0){

                // Clean before
                iframe.find(".yp-multiple-selected").removeClass("yp-multiple-selected");

                // Add new
                element.addClass("yp-multiple-selected");

                // Draw
                draw_other_boxes(element, "multiple");

            }

        }

    }


    /* ---------------------------------------------------- */
    /* Element Selector Box Function                        */
    /* ---------------------------------------------------- */
    var mouseoverTimer;
    iframe.on("mouseover", iframe, function(evt){

        // IF real mouseover
        if (window.mouseoverTrigger == false) {

            // Delay for mouseover
            clearTimeout(mouseoverTimer);
            mouseoverTimer = setTimeout(function() { mouseoverYP(evt); }, 20);

        // If trigger
        }else{

            // Direct call the function
            mouseoverYP(evt);

        }

    });


    /* ---------------------------------------------------- */
    /* Updating Draws                                       */
    /* ---------------------------------------------------- */
    function draw() {

        // stop if not have any element to draw
        if(iframe.find(".yp-selected").length == 0){
            return false;
        }

        // Get Element Self
        var elementGet = get_selected_element().get(0);

        // Continue if Valid
        if(!isUndefined(elementGet)){

            // generate box size if has the element
            var boxSize = elementGet.getBoundingClientRect();

        // If undefined
        }else{
            var boxSize = {};
            boxSize.width = 0;
            boxSize.height = 0;
        }

        // Element is not visible
        if(boxSize.width == 0 && boxSize.height == 0){

            // clear
            clearTimeout(window.SelectedElHidden);

            // Selected element hidden message delay
            window.SelectedElHidden = setTimeout(function(){

                // show only time only
                if(!mainBody.hasClass("yp-element-not-visible") && is_content_selected()){
                    show_notification("The selected element is hidden in the current screen size.", "selectedElement");
                }

                body.addClass("yp-element-not-visible");

            }, 600);

            return false;

        }else{

            // clear
            clearTimeout(window.SelectedElHidden);

            hide_notification("selectedElement");
            body.removeClass("yp-element-not-visible");

        }

        // selected boxed.
        draw_box(".yp-selected", 'yp-selected-boxed');

        // Other boxes not visible on high performance
        if(ypOption.high_performance == false){

            // Update
            draw_other_boxes();

        }

        // Tooltip
        draw_tooltip();

    }


    /* ---------------------------------------------------- */
    /* Getting current media query                          */
    /* ---------------------------------------------------- */
    function create_media_query_before(size) {

        if(size != 'desktop'){
            return "@media " + size + "{";
        }

        return "";

    }


    /* ---------------------------------------------------- */
    /* Getting media query end                              */
    /* ---------------------------------------------------- */
    function create_media_query_after(size) {

        if(size != 'desktop'){
            return "}";
        }

        return "";

    }


    /* ---------------------------------------------------- */
    /* Toggle Media max/min-width                           */
    /* ---------------------------------------------------- */
    $(".media-control").click(function() {

        var c = $(this).attr("data-code");

        if (c == 'max-width') {
            $(this).attr("data-code", "min-width");
            $(this).text(lang.above_t);
        }

        if (c == 'min-width') {
            $(this).attr("data-code", "max-width");
            $(this).text(lang.below_t);
        }

        update_responsive_size_notice();

        update_responsive_breakpoints();

        $(this).tooltip('fixTitle').tooltip("show");

        $(".property-size.active").removeClass("active");
        if($(".breakpoint-bar .active").length > 0){

            // get processed media
            var activeBreakpoint = process_media_query($(".breakpoint-bar .active").attr("data-media-content"));

            // be sure its valid
            if(isDefined(activeBreakpoint)){

                // convert to string
                activeBreakpoint = activeBreakpoint.toString();

                // if has same media here
                if($(".property-size[data-property-size='"+activeBreakpoint+"']").length > 0){
                    $(".property-size[data-property-size='"+activeBreakpoint+"']").addClass("active");
                }

            }

        }

    });


    /* ---------------------------------------------------- */
    /* Media Control Toolip                                 */
    /* ---------------------------------------------------- */
    $(".media-control").tooltip({

        // Set dynamic title
        title: function(){
            var format = $(this).attr("data-code");

            // opposite
            if(format == 'max-width'){
                format = 'min-width';
            }else if(format == 'min-width'){
                format = 'max-width';
            }

            return lang.toggle_media_query_condition.replace("{$1}", "<strong>"+format+"</strong>");

        },

        // Tooltip settings
        animation: false,
        delay: { show: 50, hide: 0 },
        placement: 'top',
        trigger: 'hover',
        container: "body",
        html: true

    });


    /* ---------------------------------------------------- */
    /* use important if CSS not working without important   */
    /* ---------------------------------------------------- */
    function force_insert_rule(selector, id, value, prefix, size, type, insertIndex) {

        // Don't automatic insert important rule if disabled
        if(ypOption.smart_important_tag == false){
            return false;
        }

        // default size
        size = generate_media_condition(size, id, value);

        // Update selector
        selector = prepareSelector(selector, id);

        // Clean value
        value = value.replace(/\s+?!important/g,'').replace(/\;$/g,'');

        // Getting styles
        var styles = getStyles(null, false);

        // Get insertIndex if not defined.
        if(insertIndex == null){
            insertIndex = getIndex(styles, "[selector=" + get_id(selector) + "][rule=" + id + "][msize=" + size + "]");
        }

        // Default is null
        var insertIndexWebkit = null;

        // Get WEBKIT Index, so new rule will replace in same line
        insertIndexWebkit = getIndex(styles, "[selector=" + get_id(selector) + "][rule=" + get_webkit_property(id) + "][msize=" + size + "]");

        // First WEBKIT, later default property
        if(insertIndexWebkit != null){
            insertIndex = insertIndexWebkit + 1;
        }

        // Remove Style Without important.
        setStyles(removeStyle(getStyles(null, false), "[selector=" + get_id(selector) + "][rule=" + id + "][msize=" + size + "]"));
        setStyles(removeStyle(getStyles(null, false), "[selector=" + get_id(selector) + "][rule=" + get_webkit_property(id) + "][msize=" + size + "]"));

        // Animation name
        if (id == 'animation-name'){
            animationName_if(selector, id, value, prefix, size, type);
        }

        // Checking.
        if (value == 'disable' || value == '' || value == 'undefined' || value === null) {
            return false;
        }

        // Responsive Settings
        var mediaBefore = create_media_query_before(size);
        var mediaAfter = create_media_query_after(size);

        // New Value
        var current = value + prefix;

        // Append.
        if (get_id(selector) != '') {

            if (is_animate_creator() === true && id != 'position') {

                iframe.find("#yp-anim-scenes #" + get_id(body.attr("data-anim-scene") + id)).remove();

                iframe.find("#yp-anim-scenes #" + body.attr('data-anim-scene') + "").append('<style data-rule="' + id + '" class="style-' + body.attr("data-anim-scene") + ' scenes-' + get_id(id) + '-style">' + selector + '{' + id + ':' + current + ' !important}</style>');

            } else {

                // Get Fresh Styles
                styles = getStyles(null, false);

                // First WEBKIT
                if (window.webkitArray.indexOf(id) != -1) {
                    setStyles(addStyle(styles, mediaBefore + selector + "{-webkit-" + id + ":" + current + " !important}" + mediaAfter, insertIndex));
                }else if (id == "justify-content") {
                    setStyles(addStyle(styles, mediaBefore + selector + "{-webkit-box-pack:" + current + " !important}" + mediaAfter, insertIndex));
                }else if (id == "align-items") {
                    setStyles(addStyle(styles, mediaBefore + selector + "{-webkit-box-align:" + current + " !important}" + mediaAfter, insertIndex));
                }else if (id == "flex-grow") {
                    setStyles(addStyle(styles, mediaBefore + selector + "{-webkit-box-flex:" + current + " !important}" + mediaAfter, insertIndex));
                }

                // Later normal
                setStyles(addStyle(getStyles(null, false), mediaBefore + selector + "{" + id + ":" + current + " !important}" + mediaAfter, insertIndex));

            }

        }

        // if wireframe mode active 
        if(mainBody.hasClass("yp-wireframe-mode")){

            // Disable wireframe for target element
            if(id == "color" || id == "background-color" || id == "background-image" || get_css_id(id)[0] == "box-shadow" || id == "border-color" || id == "text-shadow" || get_css_id(id)[0].indexOf("-radius") != -1 || get_css_id(id)[0] == "filter"){
                get_selected_element().addClass("yp-no-wireframe");
            }

        }

        // Added important tag but still not work,
        // So we need to use a better selector.
        var isCSSWork = is_css_work(null, id, current);

        // get the result
        isCSSWork.always(function(result){
            
            if(result == false){

                // current selector Length
                var selectorLength = get_selector_array(selector).length;

                // Max long selector is 12
                if((selectorLength + 1) > 12){
                    return false;
                }

                // add 1 more to new Selector
                window.minCroppedSelector = selectorLength + 1;

                // Generate a better selector
                var betterSelector = get_parents(iframe.find(".yp-content-selected .yp-selected"), window.lastParentQueryStatus);

                // Return to default
                window.minCroppedSelector = false;

                // Stop if not have another selector alternative.
                if(get_selector_array(betterSelector).length <= selectorLength){
                    return false;
                }

                // Delete old
                setStyles(removeStyle(getStyles(type, false), "[selector=" + get_id(selector) + "][rule=" + id + "][msize=" + size + "]"), type);

                // Delete old webkit
                setStyles(removeStyle(getStyles(type, false), "[selector=" + get_id(selector) + "][rule=" + get_webkit_property(id) + "][msize=" + size + "]"), type);


                // Run force insert rule function with an better selector.
                force_insert_rule(betterSelector, id, value, prefix, size, type, "default");

                setTimeout(function(){
                    draw();
                }, window.Yellow2Delay);

            }

        });

    }


    // Typing Timer Editor
    var typingTimer;


    /* ---------------------------------------------------- */
    /* Showing CSS editor error message                     */
    /* ---------------------------------------------------- */
    $(document).on("mousemove", ".unvalid-css-cover, .yp-css-close-btn,.editor-tabs:not(.active)", function(){

        if(mainBody.hasClass("css-code-unvalid")){

            mainBody.addClass("css-error-message");
            $(".unvalid-css-error").attr("style","display:block !important");

        }

    });


    /* ---------------------------------------------------- */
    /* Showing CSS editor error message on layer click      */
    /* ---------------------------------------------------- */
    $(document).on("click", ".unvalid-css-cover", function(){

        if (mainBody.hasClass("css-code-unvalid")) {
            ypMessage({title: lang.css_parse_error,text: lang.css_parse_error_text,type: "error",animation: false,customClass: "editor-style-ok"});
            return false;

        }

    });

    
    /* ---------------------------------------------------- */
    /* Updating Draw/Gui while keyUp                        */
    /* ---------------------------------------------------- */
    $("#cssData").on("keyup keydown", function(e) {

        // Remove marker directly
        editor.getSession().removeMarker(window.typeHereMarker);

        var typingTimerS = 0;
        if(e.originalEvent){
            typingTimerS = 900;
        }

        if (body.hasClass("yp-selectors-hide") === false && typingTimerS !== 0) {

            body.addClass("yp-selectors-hide");

            // Opacity Selector
            if (iframe.find(".context-menu-active").length > 0) {
                get_selected_element().contextMenu("hide");
            }

            hide_frame_ui(200);

        }

        clearTimeout(typingTimer);
        typingTimer = setTimeout(function() {

            if (body.hasClass("yp-selectors-hide") && $(".wqNoUi-active").length === 0 && mainBody.hasClass("autocomplete-active") === false && $(".yp-select-bar .tooltip").length === 0) {

                body.removeClass("yp-selectors-hide");

                show_frame_ui(200);

            }

            // dont make if code unvalid.
            if(e.type != "keydown" && mainBody.hasClass("css-code-unvalid") == false){

                if(is_responsive_mod()){
                    update_responsive_breakpoints();
                }

                insert_default_options();

                // Update visual view if active
                if(mainBody.hasClass("visual-css-view-active")){

                    update_visual_view();

                    active_view_group();

                }

            }

            return false;

        }, typingTimerS);

        // append changes to live-css-style tag and remove styles from editor data
        // then add need-to-process class.
        if(e.type != "keydown"){
            apply_css_data(editor.getValue());
        }

    });

    
    /* ---------------------------------------------------- */
    /* Filtering user CSS by CSS Editor                     */
    /* ---------------------------------------------------- */
    function css_editor_filter(data){
    
        // Convert default interactives to YP style.
        data = data.replace(/(^|\s|\}|\*\/)(.*?):(hover|focus|active|visited|link|checked|disabled|enabled|invalid|valid){/g, function(match, contents, selector, hover){
            return get_native_selector(match);
        });

        // adding webkit support
        data = data.replace(/[^-](filter|transform|background-clip|perspective|background-size|box-sizing|animation-name|animation-iteration-count|animation-duration|animation-delay|animation-fill-mode|box-shadow|flex-direction|flex-wrap|justify-content|align-items|align-content|flex-basis|align-self|flex-grow|flex-shrink|transform-origin|backface-visibility)\:(.*?);/g, "-webkit-$1:$2;\n\t$1:$2;");

        data = data.replace(/-webkit-justify-content/g, "-webkit-box-pack");
        data = data.replace(/-webkit-align-items/g, "-webkit-box-align");
        data = data.replace(/-webkit-flex-grow/g, "-webkit-box-flex");

        return data;

    }


    /* ---------------------------------------------------- */
    /* Hide blue borders                                    */
    /* ---------------------------------------------------- */
    function hide_frame_ui(number) {

        if (!is_content_selected()) {
            return false;
        }

        if (paint.css("opacity") == "0") {
            return false;
        }

        paint.stop().animate({
            opacity: 0
        }, number);

        var hideFrameCSS = iframeBody.find("#yp-ui-transform-hide");

        if(hideFrameCSS.length == 0){
            iframeBody.append("<style id='yp-ui-transform-hide'>.yp-content-selected.yp-has-transform .yp-selected,.yp-has-transform .yp-selected-others,.yp-content-selected.yp-high-performance .yp-selected,.yp-high-performance .yp-selected-others,.yp-content-selected.yp-has-transform.yp-selector-hover .yp-selected,.yp-has-transform.yp-selector-hover .yp-selected-others,.yp-content-selected.yp-high-performance.yp-selector-hover .yp-selected,.yp-high-performance.yp-selector-hover .yp-selected-others,.yp-content-selected.yp-has-transform.yp-selector-focus .yp-selected,.yp-has-transform.yp-selector-focus .yp-selected-others,.yp-content-selected.yp-high-performance.yp-selector-focus .yp-selected,.yp-high-performance.yp-selector-focus .yp-selected-others{outline:none !important}</style>");
        }else{
            hideFrameCSS.html(".yp-content-selected.yp-has-transform .yp-selected,.yp-has-transform .yp-selected-others,.yp-content-selected.yp-high-performance .yp-selected,.yp-high-performance .yp-selected-others,.yp-content-selected.yp-has-transform.yp-selector-hover .yp-selected,.yp-has-transform.yp-selector-hover .yp-selected-others,.yp-content-selected.yp-high-performance.yp-selector-hover .yp-selected,.yp-high-performance.yp-selector-hover .yp-selected-others,.yp-content-selected.yp-has-transform.yp-selector-focus .yp-selected,.yp-has-transform.yp-selector-focus .yp-selected-others,.yp-content-selected.yp-high-performance.yp-selector-focus .yp-selected,.yp-high-performance.yp-selector-focus .yp-selected-others{outline:none !important}");
        }

    }


    /* ---------------------------------------------------- */
    /* Show blue border                                     */
    /* ---------------------------------------------------- */
    function show_frame_ui(number) {

        if (!is_content_selected()) {
            return false;
        }

        if(body.hasClass("yp-force-hide-select-ui")){
            return false;
        }

        if (paint.css("opacity") == "1") {
            return false;
        }

        draw();

        paint.stop().animate({
            opacity: 1
        }, number);

        var hideFrameCSS = iframeBody.find("#yp-ui-transform-hide");
        if(hideFrameCSS.length > 0){
            hideFrameCSS.html("");
        }

    }


    /* ---------------------------------------------------- */
    /* Show borders when iframe hover                       */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", "#iframe", function(){

        show_frame_ui(200);

    });


    /* ---------------------------------------------------- */
    /* Hide borders when these elements hover               */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", "#parent-bar,.yp-this-content,.anim-bar,#visual-css-view,.fake-layer,.fake-layer-x,.fake-layer-x-bg", function(e){

        // click show, property mouseleave hide.
        if($(e.target).is(".property-size")){
            return false;
        }

        // hide contextMenu
        if (iframe.find(".context-menu-active").length > 0) {
            get_selected_element().contextMenu("hide");
        }

        hide_frame_ui(200);

    });


    /* ---------------------------------------------------- */
    /* Process CSS When mouseenter on visual manager        */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", "#visual-css-view", function(){

        // process before change
        if(body.hasClass("yp-need-to-process")){
            process();
        }

    });


    /* ---------------------------------------------------- */
    /* Click show, leave hide                               */
    /* ---------------------------------------------------- */
    $(document).on("mouseleave", ".view-media-line,.property-size", function(){

        hide_frame_ui(200);

    });


    /* ---------------------------------------------------- */
    /* Get current media condition                          */
    /* ---------------------------------------------------- */
    function get_media_condition(){

        // Default
        var size = 'desktop';
        
        // Is res?
        if (is_responsive_mod()) {

            var frameWidth = $("#iframe").width();
            var media = $(".media-control").attr("data-code");
            size = '(' + media + ':' + frameWidth + 'px)';

        }

        return size;

    }


    /* ---------------------------------------------------- */
    /* Generate an media condition                          */
    /* ---------------------------------------------------- */
    function generate_media_condition(size, css, value){

        // 1. Defined
        if(isDefined(size)){
            return size;
        }

        // 2. Current property size
        if ($(".property-size-tabs-visible .property-size.active").length > 0) {
            size = $(".property-size-tabs-visible .property-size.active").attr("data-insert-media").replace(/(\s+)?@media(\s+)?/g, "");
            return size;
        }
        
        // 3. Current frame size
        if (is_responsive_mod()) {

            var frameWidth = $("#iframe").width();
            var media = $(".media-control").attr("data-code");
            size = '(' + media + ':' + frameWidth + 'px)';

            return size;

        }

        // If only option let to create automatic media queries
        if(ypOption.smart_responsive_technology == true){

            // 4. Auto Size
            if(css == "font-size" ||
                css == "line-height" ||
                css == "letter-spacing" ||
                css == "word-spacing" ||
                css == "text-indent" ||
                css == "margin-left" ||
                css == "margin-right" ||
                css == "margin-top" ||
                css == "margin-bottom" ||
                css == "padding-left" ||
                css == "padding-right" ||
                css == "padding-top" ||
                css == "padding-bottom" ||
                css == "z-index" ||
                css == "position" ||
                css == "top" ||
                css == "left" ||
                css == "right" ||
                css == "bottom" ||
                css == "width" ||
                css == "height" ||
                css == "box-sizing" ||
                css == "min-width" ||
                css == "min-height" ||
                css == "max-width" ||
                css == "max-height" ||
                css == "animation-name" ||
                css == "animation-iteration" ||
                css == "animation-duration" ||
                css == "animation-delay" ||
                css == "animation-fill-mode" ||
                css == "transform" ||
                css == "filter" ||
                css == "opacity" ||
                css == "display" ||
                css == "cursor" ||
                css == "float" ||
                css == "clear" ||
                css == "visibility" ||
                css == "pointer-events" ||
                css == "overflow-y" ||
                css == "overflow-x"){

                // Generate auto query
                var autoSize = creating_auto_media_query(css);

                // Checks if valid
                if(isDefined(autoSize)){

                    // Show an notification about automatic media query
                    if(value != null && value != false && value != "disable"){
                        show_notification("The style was applied to a specific screen size to preserve responsive design.", "responsiveLayout");
                    }

                    // Return
                    return autoSize;

                }

            }

        }

        // 5. All. No media query.
        return "desktop";

    }


    /* ---------------------------------------------------- */
    /* Convert hover selectors to plugin's native selectors */
    /* ---------------------------------------------------- */
    function get_native_selector(selector){

        // getting seleciton
        var selection = selector.match(/:(hover|focus|active|visited|link|checked|disabled|enabled|invalid|valid)/g);

        // Replace selector if has selection else return selector
        if(selection != null){
            selection = selection[0].replace(/:/g, '');
        }else{
            return selector;
        }

        // Vars
        var before = '', after = '';

        // Dedection
        if(selection == 'hover' || selection == 'focus' || selection == 'active' || selection == 'visited' || selection == 'link' || selection == 'checked' || selection == 'disabled' || selection == 'enabled' || selection == 'invalid' || selection == 'valid'){

            // maybe has for css_editor_filter
            if(selector.charAt(0) == '}'){
                before = "}";
            }

            // maybe has for css_editor_filter
            if(selector.slice(-1) == '{'){
                after = "{";
            }

            // No unaccepted chars
            selector = selector.replace(/(\{|\})/g,'');

            // If have dot after yp-selector
            selector = selector.replace(/(body)?\.yp-selector-(hover|focus|active|visited|link|checked|disabled|enabled|invalid|valid)\./g,'body.');

            // no dot, direct process
            selector = selector.replace(/(body)?\.yp-selector-(hover|focus|active|visited|link|checked|disabled|enabled|invalid|valid)/g,'');

            selector = selector.replace(/:(hover|focus|active|visited|link|checked|disabled|enabled|invalid|valid)(\s+)?$/g,"");

            // Add to element
            selector = add_class_to_body(selector, 'yp-selector-' + selection);

            // Selector
            selector = before + selector + after;

        }

        return selector;

    }


    /* ---------------------------------------------------- */
    /* Clean not etc sysbols                                */
    /* ---------------------------------------------------- */
    function nice_selectors(data,start){

        if(start === true){

            // Nth child
            data = data.replace(/:nth-child\((.*?)\)/g, '\.nth-child\.$1\.');

            // Not
            data = data.replace(/:not\((.*?)\)/g, '\.notYP$1YP');

            // lang
            data = data.replace(/:lang\((.*?)\)/g, '\.langYP$1YP');

            // nth-last-child()
            data = data.replace(/:nth-last-child\((.*?)\)/g, '\.nth-last-child\.$1\.');

            // nth-last-of-type()
            data = data.replace(/:nth-last-of-type\((.*?)\)/g, '\.nth-last-of-type\.$1\.');

            // nth-of-type()
            data = data.replace(/:nth-of-type\((.*?)\)/g, '\.nth-of-type\.$1\.');

        }else{

            // Nth child
            data = data.replace(/\.nth-child\.(.*?)\./g, ':nth-child($1)');

            // Not
            data = data.replace(/\.notYP(.*?)YP/g, ':not($1)');

            // lang
            data = data.replace(/\.langYP(.*?)YP/g, ':lang($1)');

            // nth-last-child()
            data = data.replace(/\.nth-last-child\.(.*?)\./g, ':nth-last-child($1)');

            // nth-last-of-type()
            data = data.replace(/\.nth-last-of-type\.(.*?)\./g, ':nth-last-of-type($1)');

            // nth-of-type()
            data = data.replace(/\.nth-of-type\.(.*?)\./g, ':nth-of-type($1)');

        }

        return data;

    }


    /* ---------------------------------------------------- */
    /* Super Basic insert any CSS rule to plugin data       */
    /* ---------------------------------------------------- */
    function get_insert_rule_basic(selector, id, value, size) {

        // Empty
        var dataStyle = "";

        // Responsive Settings
        var mediaBefore = create_media_query_before(size);
        var mediaAfter = create_media_query_after(size);

        // Append default value.
        if (get_id(selector) != '' && value != 'disable'){

            var dpt = ':';

            // Append
            dataStyle = createStyle(mediaBefore + selector + '{' + id + dpt + value + '}' + mediaAfter);

        }

        return dataStyle;

    }


    /* ---------------------------------------------------- */
    /* insert CSS to the plugin data                        */
    /* ---------------------------------------------------- */
    function css_to_data(type) {

        // add classses and use as flag.
        mainBody.addClass("process-by-code-editor");

        // Source.
        var source = css_editor_filter(get_clean_css(true, null, false));

        // Clean "()" symbol for lets to process CSS as well.
        source = nice_selectors(source,true);

        // Clean.
        source = source.replace(/(\r\n|\n|\r)/g, "").replace(/\t/g, '');

        // clean.
        source = source.replace(/\}\s+\}/g, '}}').replace(/\s+\{/g, '{').replace(/\}\s+/g,'}');

        // clean.
        source = source.replace(/\s+\}/g, '}').replace(/\{\s+/g, '{');

        // replace bad queris
        source = filter_bad_queries(source);

        // Don't care rules in comment.
        var sourceComment = source;
        source = source.replace(/(\/\*)(.*?)\*\/(\s+)?/g, "");

        // If responsive
        if (type != 'desktop') {

            // Media query regex. Clean everything about media.
            var regexType = $.trim(type.replace(/\)/g, "\\)").replace(/\(/g, "\\("));
            var re = new RegExp(regexType + "(.*?)\}\}", "g");
            var reQ = new RegExp(regexType, "g");

            if(source.match(re) != null){
                source = source.match(re).toString();
            }

            source = source.replace(reQ, "");
            source = source.toString().replace(/\}\}/g, "}");

        } else {

            // Don't care rules in media query in non-media mode.
            source = source.replace(/@media(.*?)\}\}/g, '');

        }

        // if no source, stop.
        if (source == '') {
            mainBody.removeClass("process-by-code-editor");
            return false;
        }

        var selector, insertData = "";

        // IF Desktop; Remove All Rules. (because first call by desktop)
        if (type == 'desktop') {
            editor_data_element().empty();
        }

        // Replace ","" after "}".
        source = source.toString().replace(/\}\,/g, "}");

        // Getting All CSS Selectors.
        var allSelectors = array_cleaner(source.replace(/\{(.*?)\}/g, '|BREAK|').split("|BREAK|"));

        // size
        var size = type.toString().replace(/\{/g, '').replace(/@media /g, '').replace(/@media/g, '');

        // add to first.
        source = "}" + source;

        // Make } it two for get multiple selectors rules.
        source = source.replace(/\}/g,"}}");

        // Each All Selectors
        for (var i = 0; i < allSelectors.length; i++) {

            // Get Selector.
            selector = allSelectors[i];

            // Empty selector
            if(selector == null || selector == ""){
                continue;
            }

            // clean selector
            selector = selector.trim();

            // Valid selector
            if (selector.indexOf("}") == -1 && selector.indexOf("{") == -1) {

                // Clean selector with regex.
                var selectorRegex = selector_regex(selector);

                // Get comment reference
                var thisContent = window.selectorComments[get_id(selector)];

                // Check if have saved comment
                if(thisContent != null && thisContent != undefined){

                    // Delete if comment deleted
                    if(new RegExp("\\/\\*(.*?)\\*\\/"+selectorRegex+"{", 'gi').test(sourceComment) == false){
                        delete window.selectorComments[get_id(selector)];
                    }

                }
                
                // Getting CSS Rules by selector.
                var CSSRules = source.match(new RegExp("\}" + selectorRegex + '{(.*?)}', 'g'));

                // Back up cleanen "(" symbols
                selector = nice_selectors(space_cleaner(selector),false);

                if (CSSRules !== null && CSSRules != '') {

                    // Clean.
                    CSSRules = CSSRules.toString().match(/\{(.*?)\}/g).toString().replace(/\}\,\{/g, ';').replace(/\{/g, '').replace(/\}/g, '').replace(/\;\;/g, ';');

                    // Be sure ";" at end only.
                    CSSRules = CSSRules.replace(/\((.*?)\)|\"(.*?)\"/g, function(match, contents, offset, input_string){
                        return match.replace(/\;/g, 'YxkHNXdP');
                    });

                    // Be sure ":" at end mid only.
                    CSSRules = CSSRules.replace(/\((.*?)\)|\"(.*?)\"/g, function(match, contents, offset, input_string){
                        return match.replace(/\:/g, 'HXImiddP');
                    });

                    // rule by rule
                    CSSRules = CSSRules.split(";");

                    // Variables.
                    var ruleAll;
                    var ruleName;
                    var ruleVal;

                    // Each CSSRules.
                    for (var iq = 0; iq < CSSRules.length; iq++) {

                        // HXImiddP and YxkHNXdP converted to another word for fix confict
                        ruleAll = $.trim(CSSRules[iq]).replace(/YxkHNXdP/, ";").replace(/HXImiddP/, ":");

                        if (ruleAll !== undefined && ruleAll.length >= 3 && ruleAll.indexOf(":") != -1) {

                            ruleName = ruleAll.split(":")[0];

                            if (ruleName != '' && ruleName != 'a') {

                                ruleVal = ruleAll.split(':').slice(1).join(':');

                                if (ruleVal != '') {

                                    // Update
                                    insertData += get_insert_rule_basic(selector, ruleName, ruleVal, size);

                                }

                            }

                        }

                    }

                }

            }

        }

        // insert at end.
        if(insertData != ''){
            appendStyles(insertData);
        }

        // remove classes when end.
        mainBody.removeClass("process-by-code-editor");

    }


    /* ---------------------------------------------------- */
    /* This trigger must-have css rules for animation name  */
    /* ---------------------------------------------------- */
    function animationName_if(selector, id, value, prefix, size, type){

        // is selected, valid value.
        if (value != 'disable' && value != 'none' && is_content_selected() && is_animation_manager() === false){

            // add "s" if is one animate
            if($("#animation-duration-group").hasClass("hidden-option") === false && $("#animation-delay-group").hasClass("hidden-option") === false){

                // Get duration from CSS
                var duration = get_selected_element().css("animationDuration").replace(/[^0-9.,]/g, '');

                // Get delay from CSS
                var delay = get_selected_element().css("animationDelay").replace(/[^0-9.,]/g, '');

                // If selected element;
                if (get_foundable_query(selector,false, false,true,true) == get_current_selector().trim()){

                    // Duration
                    if(duration == "0"){
                        duration = 1;
                    }

                    // update with s prefix
                    insert_rule(selector, 'animation-duration', duration + 's', prefix, size, type);


                    // Delay
                    if (delay < 0) {
                        delay = 0;
                    }

                    // update with s prefix
                    insert_rule(selector, 'animation-delay', delay + 's', prefix, size, type);

                }

            }

            // Get fill mode from CSS
            var fillMode = get_selected_element().css("animationFillMode");

            // FillMode
            if (fillMode == null || fillMode == 'none') {
                fillMode = 'both';
            }
            
            insert_rule(get_current_selector(), 'animation-fill-mode', fillMode, prefix, size, type);

            // Update Options
            set_default_value('animation-duration');
            set_default_value('animation-delay');
            set_default_value('animation-fill-mode');

        }

        if (value == 'bounce') {
            insert_rule(selector, 'transform-origin', 'center bottom', prefix, size, type);
        } else if (value == 'swing') {
            insert_rule(selector, 'transform-origin', 'top center', prefix, size, type);
        } else if (value == 'jello') {
            insert_rule(selector, 'transform-origin', 'center', prefix, size, type);
        } else {
            insert_rule(selector, 'transform-origin', 'disable', prefix, size, type);
        }

        if (value == 'flipInX') {
            insert_rule(selector, 'backface-visibility', 'visible', prefix, size, type);
        } else {
            insert_rule(selector, 'backface-visibility', 'disable', prefix, size, type);
        }

    }


    /* ---------------------------------------------------- */
    /* Comparison Selectors                                 */
    /* ---------------------------------------------------- */
    /* Check two if selectors makes same work               */
    function comparison_selector(selector, selectorNew){

        var query = get_foundable_query(selector, true, true, true, true);
        var query2 = get_foundable_query(selectorNew, true, true, true, true);

        // Default
        var elements = check_selector(query,true,false,false);

        // stop if not valid or not found on the page
        if(elements == false){
            return false;
        }

        // Selector New Elements
        var elementsNew = check_selector(query2,true,false,false);

        // stop if the new selector not valid or not found on the page
        if(elementsNew == false){
            return false;
        }

        // Add class to test
        elements.addClass("test-selector1-group");

        // new element
        var elementsFiltered = elementsNew.filter(".test-selector1-group");

        // remove test class
        elements.removeClass("test-selector1-group");

        // all selected elements must has test-selector1-group class
        if(elementsNew.length != elementsFiltered.length){
            return false;
        }

        // Check, be sure all selecting same elements.
        if(elements.length != elementsNew.length || elements.length == 0){
            return false;
        }

        /* Selector Mode */
        if(/yp-selector-hover/g.test(selector) != /yp-selector-hover/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-focus/g.test(selector) != /yp-selector-focus/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-active/g.test(selector) != /yp-selector-active/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-visited/g.test(selector) != /yp-selector-visited/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-link/g.test(selector) != /yp-selector-link/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-checked/g.test(selector) != /yp-selector-checked/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-disabled/g.test(selector) != /yp-selector-disabled/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-enabled/g.test(selector) != /yp-selector-enabled/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-invalid/g.test(selector) != /yp-selector-invalid/g.test(selectorNew)){
            return false;
        }

        if(/yp-selector-valid/g.test(selector) != /yp-selector-valid/g.test(selectorNew)){
            return false;
        }


        /* Yp Scenes */
        if(/yp-scene-1/g.test(selector) != /yp-scene-1/g.test(selectorNew)){
            return false;
        }

        if(/yp-scene-2/g.test(selector) != /yp-scene-2/g.test(selectorNew)){
            return false;
        }

        if(/yp-scene-3/g.test(selector) != /yp-scene-3/g.test(selectorNew)){
            return false;
        }

        if(/yp-scene-4/g.test(selector) != /yp-scene-4/g.test(selectorNew)){
            return false;
        }

        if(/yp-scene-5/g.test(selector) != /yp-scene-5/g.test(selectorNew)){
            return false;
        }

        if(/yp-scene-6/g.test(selector) != /yp-scene-6/g.test(selectorNew)){
            return false;
        }


        /* Yp Selected */
        if(/yp-selected/g.test(selector) != /yp-selected/g.test(selectorNew)){
            return false;
        }


        /* Animations */
        if(/yp_onscreen/g.test(selector) != /yp_onscreen/g.test(selectorNew)){
            return false;
        }

        if(/yp_hover/g.test(selector) != /yp_hover/g.test(selectorNew)){
            return false;
        }

        if(/yp_focus/g.test(selector) != /yp_focus/g.test(selectorNew)){
            return false;
        }

        if(/yp_click/g.test(selector) != /yp_click/g.test(selectorNew)){
            return false;
        }


        /* CSS Methods */
        if(/:active/g.test(selector) != /:active/g.test(selectorNew)){
            return false;
        }

        if(/:checked/g.test(selector) != /:checked/g.test(selectorNew)){
            return false;
        }

        if(/:disabled/g.test(selector) != /:disabled/g.test(selectorNew)){
            return false;
        }

        if(/:empty/g.test(selector) != /:empty/g.test(selectorNew)){
            return false;
        }

        if(/:enabled/g.test(selector) != /:enabled/g.test(selectorNew)){
            return false;
        }

        if(/:hover/g.test(selector) != /:hover/g.test(selectorNew)){
            return false;
        }

        if(/:focus/g.test(selector) != /:focus/g.test(selectorNew)){
            return false;
        }

        if(/:in-range/g.test(selector) != /:in-range/g.test(selectorNew)){
            return false;
        }

        if(/:invalid/g.test(selector) != /:invalid/g.test(selectorNew)){
            return false;
        }

        if(/:lang/g.test(selector) != /:lang/g.test(selectorNew)){
            return false;
        }

        if(/:link/g.test(selector) != /:link/g.test(selectorNew)){
            return false;
        }

        if(/:optional/g.test(selector) != /:optional/g.test(selectorNew)){
            return false;
        }

        if(/:out-of-range/g.test(selector) != /:out-of-range/g.test(selectorNew)){
            return false;
        }

        if(/:valid/g.test(selector) != /:valid/g.test(selectorNew)){
            return false;
        }

        if(/:visited/g.test(selector) != /:visited/g.test(selectorNew)){
            return false;
        }

        return true;

    }


    /* ---------------------------------------------------- */
    /* Updating customizing type frame                      */
    /* ---------------------------------------------------- */
    function update_type_frame(forceUpdate){

        // Type frame
        var typeIframe = $("#yp-customizing-type-frame");

        // Getting vars
        var page_mode = get_active_type();
        var page_id = typeIframe.attr("data-page-id");
        var page_type = typeIframe.attr("data-page-type");
        var page_href = typeIframe.attr("data-page-href");
        var page_visitor = typeIframe.attr("data-page-visitor");

        // Update visitor view param
        if(page_visitor == "true" || page_visitor == true){
            page_visitor = "&yp_out=true";
        }else{
            page_visitor = "";
        }

        // Generate new URL
        var newSrc = typeIframe.attr('data-src') + "&yp_page_href=" + page_href + "&yp_page_id=" + page_id + "&yp_page_type=" + page_type + "&yp_mode=" + page_mode + page_visitor;

        // Skip this section if forceUpdate
        if(forceUpdate == false){

            // IF same, don't update
            if(newSrc == typeIframe.attr("src")){
                return false;
            }

        }

        // Create new iframe if not same.
        var newIframe = $("<div />").append($('#yp-customizing-type-frame').clone().attr("src", newSrc)).html();

        // delete old
        typeIframe.remove();

        // add new
        $("#iframe").after(newIframe);

    }


    /* ---------------------------------------------------- */
    /* Open Customizing Type Popup                          */
    /* ---------------------------------------------------- */
    $("#yp-current-page").on("click", function(){

        $(this).toggleClass("active");

        var iframe = $("#yp-customizing-type-frame");
        iframe.css("display", "block");

        update_type_frame(false);
        
        return false;

    });


    /* ---------------------------------------------------- */
    /* Open Customizing Type Menu                           */
    /* ---------------------------------------------------- */
    $("#customizing-mode").on( "click", function(){

        $("#customizing-type-list").toggle();
        $(this).toggleClass("active");
        $("#customizing-type-list").toggleClass("active");
        $(".starter-notice").toggleClass("padded-starter-notice");

        $("#customizing-type-list li").each(function(){

            var type = $(this).attr("data-value");

            var element = $(this);

            var css = get_clean_css(true, type, false);
            var bayt = get_clean_css(true, type, false).match(/:(.*?);/g);

            if(css.length > 0 && bayt != null){
                element.find(".type-bayt span").html(bayt.length + " " + lang.rule);
            }else{
                element.find(".type-bayt span").html(lang.empty);
            }

        });

        // to stop blur function
        return false;

    });


    // Show a tooltip for disabled customizing type.
    $('.type-disabled').tooltip({
        animation: false,
        title: lang.customize_type_not_available,
        placement: 'left',
        container: ".yp-select-bar",
        html: true
    });

    // option for manage type
    $('.manage-this-type').tooltip({
        animation: false,
        title: 'Manage Styles',
        placement: 'left',
        container: ".yp-select-bar",
        html: true
    });

    // option for reset type
    $('.reset-this-type').tooltip({
        animation: false,
        title: 'Reset Styles',
        placement: 'left',
        container: ".yp-select-bar",
        html: true
    });


    /* ---------------------------------------------------- */
    /* Change Customizing Type                              */
    /* ---------------------------------------------------- */
    $(document).on( "click", "#customizing-type-list li", function(){

        // Active customizing type
        var type = $(this).attr("data-value");

        // Disabled type
        if($(this).hasClass("type-disabled")){
            return false;
        }

        // process before change
        if(body.hasClass("yp-need-to-process")){
            process();
        }

        // Delete marker
        editor.getSession().removeMarker(window.typeHereMarker);

        // heading
        var typeHeading = $(this).find("h6 > span").text();
        
        // Updating
        iframe.find(".yp-inline-data").removeAttr("id");
        iframe.find('.yp-inline-data[data-source-mode="'+type+'"]').attr("id", "yp-styles-area");

        // Make current type active
        $(".active-customizing-list").removeClass("active-customizing-list");
        $(this).addClass("active-customizing-list");

        // Update active heading
        $("#customizing-mode .type-heading").text(typeHeading);

        // Close Menu
        $("#customizing-type-list").hide();
        $("#customizing-mode,#customizing-type-list").removeClass("active");
        $(".starter-notice").removeClass("padded-starter-notice");

        // Updating Session.
        update_customize_type();
        
        // Update options
        insert_default_options();

        // Update animation manager content
        if(is_animation_manager()){
            animation_manager();
        }

        if(!window.sourceViewClick){

            // Update editor content live
            editor_update(true);

        }

        // Update frame params
        update_type_frame(false);
        
        // Update buttons
        check_undoable_history();

    });


    /* ---------------------------------------------------- */
    /* Updating customizing type by CSS editor tabs         */
    /* ---------------------------------------------------- */
    $(".editor-tabs").on("click", function(){

        // if active or disable, stop here
        if($(this).hasClass("disabled") || $(this).hasClass("active")){
            return false;
        }

        // be sure CSS is valid before close.
        if (mainBody.hasClass("css-code-unvalid")) {
            ypMessage({title: lang.css_parse_error,text: lang.css_parse_error_text,type: "error",animation: false,customClass: "editor-style-ok"});
            return false;
        }

        // Get Active Type
        var type = $(this).attr("data-type-value");

        $(".editor-tabs").removeClass("active");
        $(this).addClass("active");

        // highlight customization mode
        $("#customizing-mode").removeClass("done");
        $(".yp-type-menu-link").addClass("focus").addClass("done");
        setTimeout(function(){
            $(".yp-type-menu-link").removeClass("focus").removeClass("done");
        }, 600);

        $("#customizing-type-list li[data-value='"+type+"']").trigger("click");

    });


    /* ---------------------------------------------------- */
    /* Interactive CSS Editor                               */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", ".ace_line_group", function(){

        // Get Line and variables
        var selector, lineText = $(this).text();

        // { media or selector
        if(/\{/g.test(lineText) == true){

            // CSS Selector
            if(/\@(media|font-face|import)/g.test(lineText) == false){

                // Get only selector
                selector = lineText.split("{")[0];

                // Focus Element
                window.focusDelay = setTimeout(function(){

                    selector = get_foundable_query(selector,true,true,true,true);

                    if(selector.trim() == "*"){
                        return false;
                    }

                    var element = check_selector(selector,true,false,false);

                    // stop if not valid or not have on the page
                    if(element == false){
                        return false;
                    }

                    element_focus(element);

                }, 200);


            }

        }

    });


    /* ---------------------------------------------------- */
    /* Interactive CSS Editor (Selector Focus End)          */
    /* ---------------------------------------------------- */
    $(document).on("mouseleave", ".ace_line_group", function(){

        // Clear
        clearTimeout(window.focusDelay);

        // delete focus
        paintCanvas.extra.find(".yp-element-viewer").remove();

    });


    /* ---------------------------------------------------- */
    /* Appy CSS To theme for demo                           */
    /* ---------------------------------------------------- */
    function insert_rule(selector, id, value, prefix, size, type, insertIndex){

        // insert type.
        if(type == undefined){
            type = get_active_type();
        }

        // default selector
        if(selector === null){
            selector = get_current_selector();
        }

        // default size
        size = generate_media_condition(size, id, value);

        prefix = $.trim(prefix);

        if (prefix == '.s') {
            prefix = 's';
        }

        if (prefix.indexOf("px") != -1) {
            prefix = 'px';
        }

        var css = id;

        // Delete basic CSS.
        delete_live_css(id, false);

        // delete live css.
        iframe.find(".yp-live-css").remove();

        // stop if empty
        if (isUndefined(value) && value !== 0) {
            return false;
        }

        // toLowerCase
        id = id.toString().toLowerCase();
        css = css.toString().toLowerCase();
        prefix = prefix.toString().toLowerCase();

        if(value.length > 0){

            var r1 = /\.00$/;
            var r2 = /\.0$/;

            if(r1.test(value)){
                value = value.replace(/\.00$/g,"");
            }

            if(r2.test(value)){
                value = value.replace(/\.0$/g,"");
            }

        }

        // Value always loweCase.
        var idP = get_default_property(id);
        if (idP != 'font-family' && idP != 'background-image' && idP != 'list-style-image' && idP != 'animation-name' && id != 'animation-play' && idP != 'filter' && idP != 'transform') {
            value = value.toString().toLowerCase();
        }

        // Stop
        if(value == 'nan' || value == 'NaN'){
            return false;
        }

        // Updating selector
        selector = prepareSelector(selector, id);

        // Checks min height and min width and update.
        if(id == 'height' || id == 'width'){

            // minValue & minFormat
            var minVal = number_filter($("#min-"+id+"-value").val());
            var minFormat = $("#min-"+id+"-after").val();

            // if height is smaller than min-height, so update min height
            if(parseFloat(value) < parseFloat(minVal) && prefix == minFormat){

                // Insert min-height
                insert_rule(selector,'min-'+id,value,prefix,size,type,insertIndex);

                // Set default values
                setTimeout(function(){
                    $.each(['min-'+id], function(i, v) {
                        set_default_value(v);
                    });
                },50);

            }

        }

        // Dont add if this is animation rule.
        if (is_animate_creator() === true && id.indexOf('animation') != -1) {
            return false;
        }

        if (id == 'background-color' || id == 'color' || id == 'border-color' || id == 'border-left-color' || id == 'border-right-color' || id == 'border-top-color' || id == 'border-bottom-color' || id == "box-shadow-color") {

            var valueCheck = $.trim(value).replace("#", '');

            if (valueCheck == 'red') {
                value = '#FF0000';
            } else if (valueCheck == 'white') {
                value = '#FFFFFF';
            } else if (valueCheck == 'blue') {
                value = '#0000FF';
            } else if (valueCheck == 'orange') {
                value = '#FFA500';
            } else if (valueCheck == 'green') {
                value = '#008000';
            } else if (valueCheck == 'purple') {
                value = '#800080';
            } else if (valueCheck == 'pink') {
                value = '#FFC0CB';
            } else if (valueCheck == 'black') {
                value = '#000000';
            } else if (valueCheck == 'brown') {
                value = '#A52A2A';
            } else if (valueCheck == 'yellow') {
                value = '#FFFF00';
            } else if (valueCheck == 'gray') {
                value = '#808080';
            }

        }

        // Don't update on disabling
        if(value != "disable" && value != "a" && ypOption.append_auto_comments == true){
            update_comment(selector, null);
        }

        // background clip's Text option auto seting transparent color.
        if(id == "background-clip" && value == "text"){
            window.lastTextColor = get_selected_element().css("color");
            insert_rule(selector, "color", "transparent", "", size, type,insertIndex);
        }

        // return defined color to color option
        if(id == "background-clip" && value != "text" && window.lastTextColor != null){

            // get current color
            var currentColor = get_selected_element().css("color");

            // Is transparent
            if(currentColor == "transparent" || currentColor == "rgba(0, 0, 0, 0)" || currentColor == "rgba(0,0,0,0)"){
                insert_rule(selector, "color", window.lastTextColor, "", size, type,insertIndex);
            }

        }

        // if lastTextColor not defined, then use parent color
        if(id == "background-clip" && value != "text" && window.lastTextColor == null){
            insert_rule(selector, "color", "disable", "", size, type,insertIndex);
        }

        // Update flex visibily after display property update.
        if(id == "display"){

            if(value == "flex" || value == "inline-flex"){
                body.addClass("yp-flex-container");
                $("li.flex-option").insertBefore($("li.grid-option")); // take before to run same property.
            }else{
                body.removeClass("yp-flex-container");
            }

            if(value == "grid" || value == "inline-grid"){
                body.addClass("yp-grid-element");
                $("li.grid-option").insertBefore($("li.flex-option")); // take before to run same property.
            }else{
                body.removeClass("yp-grid-element");
            }

        }

        // Set defaults
        if(id == 'border-width'){

            // Set default values
            $.each(['border-top-width','border-left-width','border-right-width','border-bottom-width'], function(i, v) {
                set_default_value(v);
            });

        }

        if(id == 'border-color'){

            // Set default values
            $.each(['border-top-color','border-left-color','border-right-color','border-bottom-color'], function(i, v) {
                set_default_value(v);
            });

        }

        if(id == 'border-style'){

            // Set default values
            $.each(['border-top-style','border-left-style','border-right-style','border-bottom-style'], function(i, v) {
                set_default_value(v);
            });

        }

        // When border-x-style change
        if(id.indexOf("border-") != -1 && id.indexOf("-style") != -1 && id != 'border-style'){

            // update default value for;
            set_default_value("border-style");

        }

        // When border-x-style change
        if(id.indexOf("border-") != -1 && id.indexOf("-color") != -1 && id != 'border-color'){

            // update default value for;
            set_default_value("border-color");

        }

        // When border-x-style change
        if(id.indexOf("border-") != -1 && id.indexOf("-width") != -1 && id != 'border-width'){

            // update default value for;
            set_default_value("border-width");

        }


        // also using in bottom.
        var duration,delay;

        var i;

        // update multiple duration and delay by animation name
        if(id == 'animation-name' && $(".yp-animate-manager-active").length === 0){

            var animCount = 1;

            if(value == 'none' || value == 'disable'){
                animCount = 0;
            }

            if(value.indexOf(",") != -1){
                animCount = value.split(",").length;
            }

            // Play Icon
            if(value == "disable" || value == "none"){
                $(".anim-player-icon").removeClass("dashicons-controls-pause").addClass("dashicons-controls-play");
            }

            // Pause icon
            if(value != 'none' && value != 'disable'){
                $(".anim-player-icon").removeClass("dashicons-controls-play").addClass("dashicons-controls-pause");
            }

            // DURATION
            var singleDuration = get_selected_element().css("animationDuration");
            var singleDurationAr = singleDuration.split(",");
            var durationCount = 1;

            if(singleDuration.indexOf(",") != -1){
                durationCount = singleDurationAr.length;
            }

            if(durationCount != animCount){

                singleDuration = [];
                for(i = 0; i < animCount; i++){
                    singleDuration.push(singleDurationAr[i]);
                }

                singleDuration = singleDuration.toString().replace(/\s+/g,'');

                if(animCount <= 1){$("#animation-duration-group").removeClass("hidden-option");}
                insert_rule(null, "animation-duration", singleDuration, '', size, type,insertIndex);

            }

            // DELAY
            var singleDelay = get_selected_element().css("animationDelay");
            var singleDelayAr = singleDelay.split(",");
            var delayCount = 1;

            if(singleDelay.indexOf(",") != -1){
                delayCount = singleDelayAr.length;
            }

            if(delayCount != animCount){

                singleDelay = [];
                for(i = 0; i < animCount; i++){
                    singleDelay.push(singleDelayAr[i]);
                }

                singleDelay = singleDelay.toString().replace(/\s+/g,'');

                if(animCount <= 1){$("#animation-delay-group").removeClass("hidden-option");}
                insert_rule(null, "animation-delay", singleDelay, '', size, type,insertIndex);

            }

        }



        // Animation name play.
        if (id == 'animation-name' || id == 'animation-play' || id == 'animation-iteration' || id == 'animation-duration') {

            if($(".yp-animate-manager-active").length === 0 && value != 'none' && value != 'disable'){

                duration = get_selected_element().css("animationDuration");
                delay = get_selected_element().css("animationDelay");

                // Getting right time delay if have multiple animations.
                var newDelay = get_multiple_delay(duration,delay);

                if(newDelay !== false){
                    delay = parseFloat(newDelay);
                }else if(isUndefined(delay)){
                    delay = 0;
                }else{
                    delay = parseFloat(duration_ms(delay)); // delay
                }

                if (isUndefined(duration)) {
                    duration = 1000;
                } else {
                    duration = parseFloat(duration_ms(duration)); // duration
                }

                var waitDelay = delay + duration;

                if(waitDelay === 0){
                    waitDelay = 1000;
                }

                waitDelay = waitDelay + 100;

                // Add class.
                body.addClass("yp-hide-borders-now yp-force-hide-select-ui");
                
                clear_animation_timer();

                window.animationTimer1 = setTimeout(function(){

                    // remove class.
                    body.removeClass("yp-hide-borders-now yp-force-hide-select-ui");

                    element_animation_end();

                    // Update.
                    draw();

                    // Show frame ui if mouse on iframe
                    if(mainBody.hasClass("yp-iframe-mouseleave") == false){
                        setTimeout(function(){
                            show_frame_ui(200);
                        }, 300);
                    }

                    // Play icon
                    $(".anim-player-icon").removeClass("dashicons-controls-pause").addClass("dashicons-controls-play");

                }, waitDelay);

            }

        }

        // Background image fix.
        if (id == 'background-image' && value != 'disable' && value != 'none' && value != '') {

            // If not has a url
            if (value.replace(/(\s|\"|\')/g, "") == 'url()') {
                value = 'disable';
            }

            // disable if not a gradient or non valid URL
            if(value.indexOf("//") == -1 && value.indexOf("linear-gradient(") == -1 && value.indexOf("data:") == -1){
                value = 'disable';
            }

        }

        // List Style image fix.
        if (id == 'list-style-image' && value != 'disable' && value != 'none' && value != '') {

            // If not has a url
            if (value.replace(/(\s|\"|\')/g, "") == 'url()') {
                value = 'disable';
            }

            // disable if URL is not valid
            if(value.indexOf("//") == -1 && value.indexOf("data:") == -1){
                value = 'disable';
            }

        }

        // adding automatic relative.
        if (id == 'top' || id == 'bottom' || id == 'left' || id == 'right') {

            // not on disabling
            if(value != "disable"){

                // get position
                var pos = get_selected_element().css("position");

                // Add relative automaticly
                if(pos == "relative" || pos == "static"){
                    insert_rule(selector, "position", "relative", "", size, type,insertIndex);
                    set_default_value("position");
                }

            }

        }

        // Background color
        if (id == 'background-color' && value != "disable") {
            if ($("#yp-background-image").val() != 'none' && $("#yp-background-image").val() != '') {
                force_insert_rule(selector, id, value, prefix, size, type, insertIndex);
                return false;
            }
        }

        // Responsive Settings
        var mediaBefore = create_media_query_before(size);
        var mediaAfter = create_media_query_after(size);
        var styles, n, insertIndexWebkit = null;

        // No scale-transform etc.
        if(get_css_id(id)[1] == null){

            styles = getStyles(type, false);
            var exStyle;

            // Get Index, so new rule will replace in same line
            if(insertIndex == null){
                insertIndex = getIndex(styles, "[selector=" + get_id(selector) + "][rule=" + id + "][msize=" + size + "]");
            }

            // Delete same data.
            exStyle = findStyle(styles, "[selector=" + get_id(selector) + "][rule=" + id + "][msize=" + size + "]");
            if (exStyle.length > 0){
                if (esc_data_value(exStyle[0]) == value || esc_data_value(exStyle[0]) == value+prefix) {
                    return false;
                } else {
                    setStyles(removeStyle(styles, "[selector=" + get_id(selector) + "][rule=" + id + "][msize=" + size + "]"), type, css);
                }
            }

            // Get WEBKIT Index, so new rule will replace in same line
            insertIndexWebkit = getIndex(styles, "[selector=" + get_id(selector) + "][rule=" + get_webkit_property(id) + "][msize=" + size + "]");

            // First WEBKIT, later default property
            if(insertIndexWebkit != null){
                insertIndex = insertIndexWebkit + 1;
            }

            // Delete same data. WEBKIT
            exStyle = findStyle(styles, "[selector=" + get_id(selector) + "][rule=" + get_webkit_property(id) + "][msize=" + size + "]");
            if (exStyle.length > 0){
                if (esc_data_value(exStyle[0]) == value || esc_data_value(exStyle[0]) == value+prefix) {
                    return false;
                } else {
                    setStyles(removeStyle(styles, "[selector=" + get_id(selector) + "][rule=" + get_webkit_property(id) + "][msize=" + size + "]"), type);
                }
            }

            // Update data again after delete.
            styles = getStyles(type, false);

            // Delete same data. (difference selector, because sometimes plugin use long selector for force important)
            var sameSelectors = findStyle(styles, "[rule=" + id + "][msize=" + size + "]");
            var data, thisSelectorX;
            for(i = 0; i < sameSelectors.length; i++){

                // Get CSS
                data = sameSelectors[i];

                // Get selector
                thisSelectorX = esc_data_selector(data);

                // if make same thing with current selector
                if(comparison_selector(selector, thisSelectorX)){

                    // delete styles
                    setStyles(removeStyle(styles, "[selector="+ get_id(thisSelectorX) +"][rule=" + id + "][msize=" + size + "]"), type, css);
                    break;

                }

            }

            // Delete same data. (difference selector, because sometimes plugin use long selector for force important) WEBKIT
            sameSelectors = findStyle(styles, "[rule=" + get_webkit_property(id) + "][msize=" + size + "]");
            for(i = 0; i < sameSelectors.length; i++){

                // Get CSS
                data = sameSelectors[i];

                // Get selector
                thisSelectorX = esc_data_selector(data);

                // if make same thing with current selector
                if(comparison_selector(selector, thisSelectorX)){

                    // delete styles
                    setStyles(removeStyle(styles, "[selector="+ get_id(thisSelectorX) +"][rule=" + get_webkit_property(id) + "][msize=" + size + "]"), type);
                    break;

                }

            }


            // Delete same data for anim.
            if (is_animate_creator()) {

                exStyle = iframe.find("#yp-anim-scenes #" + $('body').attr('data-anim-scene') + " .scenes-" + get_id(id) + "-style");

                if (exStyle.length > 0) {

                    if (esc_data_value(exStyle.html()) == value || esc_data_value(exStyle.html()) == value+prefix) {

                        return false;

                    } else {

                        var currentSceneNum = parseInt($('body').attr('data-anim-scene').replace(/scene-/g,''))+1;

                        exStyle.remove(); // else remove.

                        // delete same style from the next scenes which not added yet.
                        for(n = currentSceneNum; n < 7; n++) {
                            
                            // if scene not added yet. make it.
                            if($(".anim-bar .scenes .scene-" + n).length == 0 || $(".anim-bar .scenes .scene-" + n).hasClass("scene-no-click-yet") == true){
                                
                                // if next scenes not added yet, so remove it too.
                                iframe.find("#yp-anim-scenes #scene-" + n + " .scenes-" + get_id(id) + "-style").remove();

                            }

                        }

                    }

                }

            }

        }


        // Append webkit version
        if (value != 'disable' && value != '' && value != 'undefined' && value !== null) {

            if (window.webkitArray.indexOf(id) != -1) {
                insert_rule(selector, "-webkit-" + id, value, prefix, size, type, insertIndexWebkit);
            }

            if (id == "justify-content") {
                insert_rule(selector, "-webkit-box-pack", value, prefix, size, type, insertIndexWebkit);
            }

            if (id == "align-items") {
                insert_rule(selector, "-webkit-box-align", value, prefix, size, type, insertIndexWebkit);
            }

            if (id == "flex-grow") {
                insert_rule(selector, "-webkit-box-flex", value, prefix, size, type, insertIndexWebkit);
            }

        }


        // No px em etc for this options.
        if (idP == "animation-iteration-count" || idP == 'flex-grow' || idP == 'flex-shrink' || idP == 'opacity' || idP == 'blur-filter' || idP == 'grayscale-filter' || idP == 'brightness-filter' || idP == 'z-index' || idP == 'contrast-filter' || idP == 'hue-rotate-filter' || idP == 'saturate-filter' || idP == 'sepia-filter' || idP.indexOf("-transform") != -1) {
            if(idP != 'text-transform'){
                value = number_filter(value);
                prefix = '';
            }
        }

        // Filter Default options.
        if (id == 'blur-filter' || id == 'grayscale-filter' || id == 'brightness-filter' || id == 'contrast-filter' || id == 'hue-rotate-filter' || id == 'saturate-filter' || id == 'sepia-filter') {

            var filterData = filter_generator(true);

            insert_rule(selector, 'filter', filterData, '', size, type,insertIndex);
            
            return false;

        }
        // Filter options end

        // Transform Settings
        if (idP.indexOf("-transform") != -1 && idP != "text-transform") {

            var translateData = transform_generator(true);

            insert_rule(selector, 'transform', translateData, '', size, type,insertIndex);
            
            return false;

        }
        // Transform options end


        // border-type is not a CSS Rule.
        if(id == 'border-type'){
            return false;
        }


        // Box Shadow
        if (id == 'box-shadow-inset' || id == 'box-shadow-color' || id == 'box-shadow-vertical' || id == 'box-shadow-blur-radius' || id == 'box-shadow-spread' || id == 'box-shadow-horizontal') {

            var shadowData = box_shadow_generator(selector, true);
            insert_rule(selector, 'box-shadow', shadowData, '', size, type,insertIndex);
            
            return false;

        }
        // Box shadow options end


        // Animation options
        if (id == 'animation-play') {

            styles = getStyles(type, false);
            var stylesBySize = findStyle(styles, "[msize=" + size + "]");
            var selectorTest = selector.replace(/\.(yp_onscreen|yp_hover|yp_click|yp_focus)/g, '');
            var thisSelector, thisSelector2;

            for(i = 0; i < stylesBySize.length; i++){

                thisSelector = /\[selector\=(.*?)\]/g.exec(stylesBySize[i])[1];
                thisSelector2 = esc_data_selector(stylesBySize[i]);

                // onscreen
                if(thisSelector == get_id(selectorTest + ".yp_onscreen")){
                    styles = removeStyle(styles, "[selector=" + get_id(thisSelector2) + "][msize=" + size + "]");
                }

                // hover
                if(thisSelector == get_id(selectorTest + ".yp_hover")){
                    styles = removeStyle(styles, "[selector=" + get_id(thisSelector2) + "][msize=" + size + "]");
                }

                // click
                if(thisSelector == get_id(selectorTest + ".yp_click")){
                    styles = removeStyle(styles, "[selector=" + get_id(thisSelector2) + "][msize=" + size + "]");
                }

                // focus
                if(thisSelector == get_id(selectorTest + ".yp_focus")){
                    styles = removeStyle(styles, "[selector=" + get_id(thisSelector2) + "][msize=" + size + "]");
                }

            }

            setStyles(styles, type);

            // Don't update if no animate
            if($("#yp-animation-name").val() != "none"){

                insert_rule(selector, 'animation-name', $("#yp-animation-name").val(), prefix, size, type,insertIndex);

            }

            return false;

        }

        // Animation name
        if (id == 'animation-name'){
            animationName_if(selector, id, value, prefix, size, type);
        }


        // Checking.
        if (value == 'disable' || value == '' || value == 'undefined' || value === null) {
            $("#" + id + "-group").removeClass("reset-enable");
            return false;
        }

        // New Value
        var current = value + prefix;

        // Clean.
        current = current.replace(/\s+?!important/g,'').replace(/\;$/g,'');

        // Append default value.
        if (get_id(selector) != '') {

            var dpt = ':';

            if (is_animate_creator() === true && id != 'position') {

                iframe.find("#yp-anim-scenes #" + get_id(body.attr("data-anim-scene") + css)).remove();

                iframe.find("#yp-anim-scenes #" + body.attr("data-anim-scene") + "").append('<style data-rule="' + css + '" class="style-' + body.attr("data-anim-scene") + ' scenes-' + get_id(css) + '-style">' + selector + '{' + css + dpt + current + '}</style>');

                // update next scenes
                var scene = 0;
                var styleEl;
                var selectorT;
                for(n = parseInt(body.attr("data-anim-scene").replace("scene-",""))+1; n <= 6; n++){

                    // current scene
                    scene = "scene-"+n;

                    // get style if have
                    styleEl = iframe.find("#yp-anim-scenes #" + scene + " .scenes-" + get_id(css) + "-style");

                    // If not has this style or has but this generated by same method
                    if(styleEl.length == 0 || styleEl.hasClass("dynamic-generated-scene")){

                        selectorT = selector.replace(/body\.yp-scene-[0-9]/g, 'body.yp-scene-' + n);

                        // delete old
                        iframe.find("#yp-anim-scenes #" + scene + " style[data-rule='"+css+"']").remove();

                        // Append
                        iframe.find("#yp-anim-scenes #" + scene + "").append('<style data-rule="' + css + '" class="dynamic-generated-scene style-' + scene + ' scenes-' + get_id(css) + '-style">' + selectorT + '{' + css + dpt + current + '}</style>');

                    }

                }

            } else {

                // Add style
                setStyles(addStyle(getStyles(type, false), mediaBefore + selector + "{" + css + dpt + current + "}" + mediaAfter, insertIndex), type, css);

            }

            draw();

        }

        // Add this media query to property query list if this rule's size tab is open.
        if($("#" + id + "-group").hasClass("property-size-tabs-visible")){
            update_property_sizes(process_media_query(size));
        }
        
        // No need to important for perspective.
        if (id == 'perspective') {
            return false;
        }

        // No need to important for grid template rows and columns.
        if (id == 'grid-template-columns' || id == "grid-template-rows") {
            return false;
        }

        // No need to important on keyframes
        if(mainBody.hasClass("yp-anim-creator")){
            return false;
        }

        // Don't use important if animation manager active
        if(mainBody.hasClass("yp-animate-manager-mode")){
            return false;
        }

        // no need to check it. this used for find the cursor position.
        if(id == "a"){
            return false;
        }

        // if inserted animation-fill-mode, then remove it from attr before check.
        if(id == "animation-fill-mode" && get_selected_element().hasAttr("style")){

            // remove animation-fill-mode from new style
            var newStyleAttr = get_selected_element().attr("style").replace(/(-webkit-|-moz-|-o-)?animation-fill-mode(\s+)?:(.*?)(;|$)/, "");

            // apply new style attr.
            get_selected_element().attr("style", newStyleAttr);

        }

        // if wireframe mode active 
        if(mainBody.hasClass("yp-wireframe-mode")){

        // Disable wireframe for target element
            if(css == "color" || css == "background-color" || css == "background-image" || get_css_id(css)[0] == "box-shadow" || css == "border-color" || css == "text-shadow" || get_css_id(css)[0].indexOf("-radius") != -1 || get_css_id(css)[0] == "filter"){
                get_selected_element().addClass("yp-no-wireframe");
            }

        }


        // Don't use better selector if trigged from "review changes" because the selector
        // already generated and must work already, no need to use new selectors for disable, enable or change value.
        // CSS Work, no need to test or force better selector & important
        if(window.editedByReview){
            return false;
        }


        // Check if need to important tag and apply if need.
        if(id.indexOf("-webkit-") == -1 && id.indexOf("-moz-") == -1 && id.indexOf("-o-") == -1){

            // get response
            var isCSSWork = is_css_work(null, css, current);

            // check the result
            isCSSWork.always(function(result){

                if(result == false){
                    force_insert_rule(selector, id, value, prefix, size, type, insertIndex);
                }

            });

        }

    }


    /* ---------------------------------------------------- */
    /* Updating the selector as need                        */
    /* ---------------------------------------------------- */
    function prepareSelector(selector, id){

        // Animate Generator selector.
        if (is_animate_creator() === true && id != 'position') {

            // Delete if has
            selector = $.trim(selector.replace(/(body)?\.yp-scene-[0-9]/g, ''));

            // Add
            selector = add_class_to_body(selector, "yp-" + body.attr("data-anim-scene"));

        }else{

            // yp-scene replacer
            selector = $.trim(selector.replace(/(body)?\.yp-scene-[0-9]/g, ''));

        }

        // Set perspective id to parent
        if(id == 'perspective'){

            if(get_selected_element().parents().length > 0){

                // Update selector var
                selector = $.trim(get_parents(get_selected_element().parent(), "defaultNoCache"));

            }

        }

        // Updating Selector for animation properties on Animation Manager
        if (mainBody.hasClass("process-by-code-editor") === false && $(".yp-animate-manager-active").length === 0) {

            // Animation Properties
            if (id == 'animation-name' || id == 'animation-duration' || id == 'animation-delay') {

                // Clean classes
                var selectorOld = selector;
                selector = selector.replace(/\.(yp_onscreen|yp_hover|yp_focus|yp_click)/g, '');

                // Play class
                var play = '';

                // Use Animation play value if available
                if($("#yp-animation-play").length > 0 && $("#yp-animation-play").val().length > 0){

                    play = "." + $("#yp-animation-play").val();

                // Use same event which get from URL
                } else if(/\.(yp_onscreen|yp_hover|yp_focus|yp_click)/g.test(selectorOld) == true){

                    // Get from Selector as default
                    if(/\.yp_onscreen/g.test(selectorOld)){
                        play = ".yp_onscreen";
                    } else if(/\.yp_hover/g.test(selectorOld)){
                        play = ".yp_hover";
                    } else if(/\.yp_focus/g.test(selectorOld)){
                        play = ".yp_focus";
                    } else if(/\.yp_click/g.test(selectorOld)){
                        play = ".yp_click";
                    }
                
                // Default yp_onscreen
                }else{

                    play = ".yp_onscreen";

                }

                // Getting array
                var selectorNew = selector.split(":");

                // Check if there have : 
                if(selectorNew.length > 0){

                    // Getting all prev selectors until last :
                    var prevSelectors = '';

                    // getting previous selectors explude last : part.
                    for(var y = 0; y < selectorNew.length-1; y++){
                        prevSelectors = prevSelectors + selectorNew[y];
                    }

                    // hover, focus same. No need to class.
                    if (selectorNew[selectorNew.length-1] == 'hover' || selectorNew[selectorNew.length-1] == 'focus') {
                        selector = prevSelectors + play + ":" + selectorNew[selectorNew.length-1];
                    }else{ // Add yp_hover class
                        selector = selector + play;
                    }

                // default, adds only.
                }else{
                    selector = selector + play;
                }

            }

        }

        // Hover, Focus, Active etc Selections.
        var selection = $('body').attr('data-yp-selector');

        // Has Selection
        if (isUndefined(selection) == false) {

            // be sure selector not has yp_onscreen etc
            if(/(yp_onscreen|yp_click|yp_focus|yp_hover)/g.test(selector) == false && id != 'animation-play' && id != 'animation-fill-mode'){

                // Clean
                selector = selector.replace(/(body)?\.yp-selector-(.*?)\s+?/g, "");

                // hover, focus etc
                var selectionX = selection.replace(':', '');

                // Add to element
                selector = add_class_to_body(selector, 'yp-selector-' + selectionX);

            }

        }

        return selector;

    }


    /* ---------------------------------------------------- */
    /* Checks if insert css need important                  */
    /* ---------------------------------------------------- */
    function is_css_work(selector, css, current){

        // to disable some styles applied from yellow pencil
        body.addClass("yp-important-check");

        // Convert for check important need.
        if(css == 'border-width'){
            css = 'border-top-width';
        }else if(css == 'border-style'){
            css = 'border-top-style';
        }else if(css == 'border-color'){
            css = 'border-top-color';
        }

        // variable
        var targetElement;

        // if selector empty, use selected element
        if(selector == null){
            targetElement = get_selected_element();
            selector = ".yp-selected-others";
        }else{
            targetElement = iframe.find(selector);
        }

        // get current styleAttr
        var currentStyleAttr = targetElement.attr("style");

        // return to default style attr before make important tests
        if(window.defaultStyleAttr != false && window.defaultStyleAttr != undefined){
            targetElement.attr("style", window.defaultStyleAttr);
        }else{
            targetElement.removeAttr("style");
        }

        // deferred
        var deferred = jQuery.Deferred();

        // wait for apply style
        setTimeout(function(){

            // Variables
            var computedValue = targetElement.css(css);

            // Stop if computedValue is valid.
            if(isUndefined(computedValue)){

                body.removeClass("yp-important-check");
                targetElement.removeClass("yp-no-wireframe");

                // Apply current style attr after tests
                if(currentStyleAttr != false && currentStyleAttr != undefined){
                    targetElement.attr("style", currentStyleAttr);
                }else{
                    targetElement.removeAttr("style");
                }

                deferred.resolve(false);

                // stop here
                return false;

            }

            // Variable
            var computedValueThis, stopFunction = false, work = false, base, screenHeight, screenWidth;

            // Each all selected element and check if need to use important.
            iframe.find(selector).each(function(index){


                // Skip if more then 50 element
                if(index > 50){
                    return true;
                }


                // Current Value
                computedValueThis = $(this).css(css);


                // Skip if not valid.
                if(isUndefined(computedValueThis)){
                    return true;
                }


                // All target elements must return same value
                if(computedValue != computedValueThis){
                    stopFunction = true;
                    return false;
                }


            });


            // Stop if all target elements doesnt has same value.
            if(stopFunction == true){
                targetElement.removeClass("yp-no-wireframe");
                body.removeClass("yp-important-check");

                // Apply current style attr after tests
                if(currentStyleAttr != false && currentStyleAttr != undefined){
                    targetElement.attr("style", currentStyleAttr);
                }else{
                    targetElement.removeAttr("style");
                }

                deferred.resolve(false);

                // stop here
                return false;

            }


            // Clean
            current = $.trim(current).toLowerCase();
            computedValue = $.trim(computedValue).toLowerCase();


            // Convert Hex colors to RGB format
            if(/(#[0-9A-Fa-f]{6}|#[0-9A-Fa-f]{3})/.test(current) || /(#[0-9A-Fa-f]{6}|#[0-9A-Fa-f]{3})/.test(computedValue)){
                current = current.replace(/(#[0-9A-Fa-f]{6}|#[0-9A-Fa-f]{3})/g, function(hex){return hex_to_rgb(hex);});
                computedValue = computedValue.replace(/(#[0-9A-Fa-f]{6}|#[0-9A-Fa-f]{3})/g, function(hex){return hex_to_rgb(hex);});
            }


            // MS To S
            if(/((\d+ms)|(\d+.\d+ms))/.test(current) || /((\d+ms)|(\d+.\d+ms))/.test(computedValue)){

                current = current.replace(/((\d+ms)|(\d+.\d+ms))/g, function(ms){return parseFloat(ms)/1000 + "s";});
                computedValue = computedValue.replace(/((\d+ms)|(\d+.\d+ms))/g, function(ms){return parseFloat(ms)/1000 + "s";});

            }

            
            // em to px
            if(/((\d+em)|(\d+.\d+em))/.test(current) || /((\d+em)|(\d+.\d+em))/.test(computedValue)){

                // Take parent as base if css is font-size
                if(css == "font-size" && targetElement.parent().length > 0){
                    base = parseFloat(targetElement.parent().css("font-size"));
                }else{
                    base = parseFloat(targetElement.css("font-size"));

                }
                
                current = current.replace(/((\d+em)|(\d+.\d+em))/g, function(em){return parseFloat(em)*base + "px";});
                computedValue = computedValue.replace(/((\d+em)|(\d+.\d+em))/g, function(em){return parseFloat(em)*base + "px";});

            }

            // rem to px
            if(/((\d+rem)|(\d+.\d+rem))/.test(current) || /((\d+rem)|(\d+.\d+rem))/.test(computedValue)){

                base = parseFloat(iframe.find("html").css("font-size"));

                current = current.replace(/((\d+rem)|(\d+.\d+rem))/g, function(em){return parseFloat(em)*base + "px";});
                computedValue = computedValue.replace(/((\d+rem)|(\d+.\d+rem))/g, function(em){return parseFloat(em)*base + "px";});

            }

            
            // vh to px
            if(/((\d+vh)|(\d+.\d+vh))/.test(current) || /((\d+vh)|(\d+.\d+vh))/.test(computedValue)){

                // get screen size in px
                screenHeight = $(iframeContentWindow).height();


                current = current.replace(/((\d+vh)|(\d+.\d+vh))/g, function(vh){return parseFloat(vh)*screenHeight/100 + "px";});
                computedValue = computedValue.replace(/((\d+vh)|(\d+.\d+vh))/g, function(vh){return parseFloat(vh)*screenHeight/100 + "px";});

            }

            // vh to px
            if(/((\d+vw)|(\d+.\d+vw))/.test(current) || /((\d+vw)|(\d+.\d+vw))/.test(computedValue)){

                // get screen size in px
                screenWidth = $(iframeContentWindow).width();


                current = current.replace(/((\d+vw)|(\d+.\d+vw))/g, function(vw){return parseFloat(vw)*screenWidth/100 + "px";});
                computedValue = computedValue.replace(/((\d+vw)|(\d+.\d+vw))/g, function(vw){return parseFloat(vw)*screenWidth/100 + "px";});

            }

            var baseWidth;

            // % to px for sizes
            if(current.indexOf("%") != -1){

                if(css == "letter-spacing"){
                    work = true;
                }

                if(css.indexOf("border-") != -1 && css.indexOf("-width") != -1){
                    work = true;
                }

                if(css == "font-size" || css == "line-height"){

                    if(targetElement.parent().length > 0){

                        // get parent font-size
                        base = parseFloat(targetElement.parent().css("font-size"));

                        // find ratio
                        current = (parseFloat(current) * base / 100) + "px";

                    }

                }

                // Size - % on margin/padding
                if(css == "margin-top" || css == "margin-right" || css == "margin-bottom" || css == "margin-left" || css == "padding-top" || css == "padding-right" || css == "padding-bottom" || css == "padding-left"){

                    // get width
                    var boxWidth = targetElement.outerWidth(true);

                    // find ratio
                    current = (parseFloat(current) * boxWidth / 100) + "px";

                    // find ratio if only %
                    if(computedValue.indexOf("%") != -1){
                        computedValue = (parseFloat(computedValue) * boxWidth / 100) + "px";
                    }

                }

                var getPosition;

                // Size - % on width
                if(targetElement.parent().length > 0){

                    // X Axis % Support
                    if(css == "width" || css == "min-width" || css == "max-width" || css == "left" || css == "right"){

                        getPosition = targetElement.css("position");
                        baseWidth = null;

                        // take screen size as base
                        if(getPosition == "fixed"){
                            
                            // screen width
                            baseWidth = $(iframeContentWindow).width();

                        // get relative parent as base
                        }else if(getPosition == "absolute"){
                    
                            // find relative parent
                            targetElement.parents().each(function(){

                                // find, take and stop
                                if($(this).css("position") == "relative"){
                                    baseWidth = $(this).outerWidth(true);
                                    return false;
                                }

                            });

                            // No Relative Parent
                            if(baseWidth == null){
                                
                                // screen width
                                baseWidth = $(iframeContentWindow).width();

                            }

                        }else{

                            // get parent element as base
                            baseWidth = targetElement.parent().width();

                        }

                        // find ratio
                        current = (parseFloat(current) * baseWidth / 100) + "px";

                        // find ratio if only %
                        if(computedValue.indexOf("%") != -1){
                            computedValue = (parseFloat(computedValue) * baseWidth / 100) + "px";
                        }

                    }


                    // Y Axis % support
                    if(css == "height" || css == "min-height" || css == "max-height" || css == "top" || css == "bottom"){

                        getPosition = targetElement.css("position");
                        baseWidth = null;

                        // take screen size as base
                        if(getPosition == "fixed"){
                            
                            // screen width
                            baseWidth = $(iframeContentWindow).height();

                        // get relative parent as base
                        }else if(getPosition == "absolute"){
                    
                            // find relative parent
                            targetElement.parents().each(function(){

                                // find, take and stop
                                if($(this).css("position") == "relative"){
                                    baseWidth = $(this).outerHeight(true);
                                    return false;
                                }

                            });

                            // No Relative Parent
                            if(baseWidth == null){
                                
                                // screen width
                                baseWidth = $(iframeContentWindow).height();

                            }

                        }else{

                            // get parent element as base
                            baseWidth = targetElement.parent().height();

                        }

                        // find ratio
                        current = (parseFloat(current) * baseWidth / 100) + "px";

                        // find ratio if only %
                        if(computedValue.indexOf("%") != -1){
                            computedValue = (parseFloat(computedValue) * baseWidth / 100) + "px";
                        }

                    }

                }

            }


            // These rules dont accept negative values
            if(current.indexOf("-") != -1){

                if(css.indexOf("border-") != -1 && css.indexOf("-width") != -1){
                    work = true;
                }

                if(css.indexOf("border-") != -1 && css.indexOf("-radius") != -1){
                    work = true;
                }

                if(css.indexOf("padding") != -1){
                    work = true;
                }

                if(css == "font-size" || css == "line-height" || css == "opacity" || css == "animation-duration" || css == "animation-delay" || css == "width"  || css == "min-width"  || css == "max-width"  || css == "height"  || css == "min-height"  || css == "max-height"){
                    work = true;
                }

            }

            // move color to the end, on box-shadow
            if (computedValue.indexOf("rgb") != -1 && css == 'box-shadow') {
                computedValue = computedValue.split(") ")[1] + " " + computedValue.split(") ")[0] + ")";
            }

            // move inset to the end, on box-shadow
            if (computedValue.indexOf("inset") != -1 && css == 'box-shadow') {
                computedValue = computedValue.replace(/ inset/g, "") + " inset";
            }

            //", '
            current = current.replace(/(\'|\")/g, '');
            computedValue = computedValue.replace(/(\'|\")/g, '');

            // ", " >> ","
            current = current.replace(/\,\s+/g, ',');
            computedValue = computedValue.replace(/\,\s+/g, ',');

            // dont care things after .
            current = current.replace(/(\d+)(\.\d+)/g, function(number){return parseFloat(number).toFixed(2);});
            computedValue = computedValue.replace(/(\d+)(\.\d+)/g, function(number){return parseFloat(number).toFixed(2);});

            // Return true, values same.
            if(computedValue == current){
                work = true;
            }

            // Don't care 0.01 demical
            var current2 = current.replace(/(\d+)(\.\d+)/g, function(number){return parseFloat(number) - 0.01;});

            // a bug on 101% and up
            if(computedValue == current2){
                work = true;
            }

            // never can pass it
            if(current == "inherit" || current == "initial"){
                work = true;
            }

            // can't read point = pt
            if(/((\d+pt)|(\d+.\d+pt))/g.test(current) == true){
                work = true;
            }

            // Don't check it
            if(css == "transform-origin"){
                work = true;
            }

            // transparent computed
            if(current == "transparent"){

                if(computedValue == "rgba(0,0,0,0)" || computedValue == "rgba(0,0,0,0)"){
                    work = true;
                }

            }

            // 0 and normal is same
            if(current == "normal" || current == "auto" || current == "none" || current == "medium"){

                if(computedValue == "0" || computedValue == "0px"){
                    work = true;
                }

            }

            // length and auto same
            if(current == "length"){

                if(computedValue == "auto" || computedValue == "auto auto"){
                    work = true;
                }

            }

            // Get position
            var elementPosition = targetElement.css("position");

            // Bottom check on fixed
            if(elementPosition == "fixed" || elementPosition == "absolute"){

                if(css == "top" || css == "right" || css == "bottom" || css == "left"){

                    var negativeP, selfSize;

                    if(css == "top" || css == "bottom"){
                        baseWidth = $(iframeContentWindow).height();
                        selfSize = parseFloat(targetElement.outerHeight(true));
                    }else{
                        baseWidth = $(iframeContentWindow).width();
                        selfSize = parseFloat(targetElement.outerWidth(true));
                    }

                    if(css == "top"){
                        negativeP = parseFloat(targetElement.css("bottom"));
                    }else if(css == "right"){
                        negativeP = parseFloat(targetElement.css("left"));
                    }else if(css == "bottom"){
                        negativeP = parseFloat(targetElement.css("top"));
                    }else if(css == "left"){
                        negativeP = parseFloat(targetElement.css("right"));
                    }

                    if(parseInt(computedValue) == parseInt(baseWidth - parseFloat(negativeP + selfSize))){
                        work = true;
                    }

                }

            }
            

            // border-width doesnt return the width if there not have border-style
            if(/border-(top|right|bottom|left)-width/g.test(css) == true){

                // get corner
                var corner = /border-(top|right|bottom|left)-width/g.exec(css)[1];

                // get border style for current corner
                var borderStyle = targetElement.css("border-"+corner+"-style");

                // continue without important if border style hidden or none.
                if(borderStyle == "none" || borderStyle == "hidden"){
                    work = true;
                }

            }

            // Don't add important for transform and filter
            if (css == "transform" || css == "filter"){
                work = true;
            }

            // Remove important check class
            body.removeClass("yp-important-check");

            // remove wireframe helper class
            targetElement.removeClass("yp-no-wireframe");

            // Apply current style attr after tests
            if(currentStyleAttr != false && currentStyleAttr != undefined){
                targetElement.attr("style", currentStyleAttr);
            }else{
                targetElement.removeAttr("style");
            }

            deferred.resolve(work);

        }, window.YellowDelay);
    
        // return response
        return deferred.promise();

    }
        

    /* ---------------------------------------------------- */
    /* Scrolling and hover the target element               */
    /* ---------------------------------------------------- */
    function element_focus(element){

        clearTimeout(window.relaxView);
        paintCanvas.extra.find(".yp-element-viewer-relax-opacity").remove();

        element.each(function(index){

            // This item
            var item = $(this);

            // Get Element
            var elementGet = item.get(0);

            // Continue if Valid
            if(!isUndefined(elementGet)){

                // Dynamic box
                if (paintCanvas.extra.find(".yp-element-viewer-" + index).length === 0) {
                    paintCanvas.extra.append("<div class='yp-element-viewer yp-element-viewer-" + index + "'></div>");
                }

                // generate box size
                var boxSize = elementGet.getBoundingClientRect();

                // get scroll top
                var scrollTop = parseFloat(iframe.scrollTop());

                // Margin
                var mTop = parseFloat(item.css("marginTop"));
                var mRight = parseFloat(item.css("marginRight"));
                var mBottom = parseFloat(item.css("marginBottom"));
                var mLeft = parseFloat(item.css("marginLeft"));

                // size
                var h = boxSize.height + mTop + mBottom;
                var w = boxSize.width + mLeft + mRight;

                // position
                var t = (boxSize.top + scrollTop) - mTop;
                var l = boxSize.left - mLeft;

                // Draw
                iframe.find(".yp-element-viewer-" + index).css("width", w).css("height", h).css("top", t).css("left", l).css("border-left-width", mLeft).css("border-right-width", mRight).css("border-top-width", mTop).css("border-bottom-width", mBottom);

            }

        });

    }


    /* ---------------------------------------------------- */
    /* Combine values and formats as the best               */
    /* ---------------------------------------------------- */
    function get_format_range(prefix, group){

        // Default Pixel Range
        var range = group.data("px-range").split(",");

        // Update %.
        if (prefix == '%' || prefix == 'vw' || prefix == 'vh') {
            range = group.data("pc-range").split(",");
        }

        // Update EM.
        if (prefix == 'em' || prefix == 'rem' || prefix == 'ex' || prefix == 'cm' || prefix == 'in' || prefix == 'pc') {
            range = group.data("em-range").split(",");
        }

        // Update S.
        if (prefix == 's') {
            range = group.data("em-range").split(",");
        }

        // Update MS.
        if (prefix == 'ms') {
            range = group.data("em-range").split(",");
            range[0] = parseInt(range[0]*1000);
            range[1] = parseInt(range[1]*1000);
        }

        return range;

    }


    /* ---------------------------------------------------- */
    /* Setup Slider Option                                  */
    /* ---------------------------------------------------- */
    function slider_option(id, decimals) {

        var thisContent = $("#" + id + "-group").parent(".yp-this-content");
        var elementParent = $("#" + id + "-group");

        // Get prefix
        var prefix = $("#" + id + "-group .yp-after-prefix").val();

        // supported formats
        var supportFormats = elementParent.attr("data-support-formats").split(",");

        // inherit, normal, none etc.
        var defaultVal = elementParent.attr("data-css-default");

        // add default to end
        if(defaultVal != "" && defaultVal != "no-defined"){
            supportFormats.push(defaultVal);
        }

        // vars
        var formatSource = [], thisObj;

        // make a json
        for(var i = 0; i < supportFormats.length; i++){

            thisObj = {};
            thisObj['value'] = supportFormats[i];
            thisObj['label'] = supportFormats[i];
            formatSource.push(thisObj);

        }

        // setup format select
        $("#" + id + "-group .yp-after-prefix").autocomplete({

            source: function( request, response ) {
              response( $.ui.autocomplete.filter( formatSource, "" ));
            },

            open: function(){

                window.openValS = $(this).val();

            },

            close: function(){

                var v = $("#" + id + "-group .yp-after-css-val");

                // current is default value
                if(defaultVal == $(this).val()){

                    // apply just an -
                    $(this).val("-");

                    // get last value
                    var lastVal = v.val();

                    // set last value for remember
                    v.val(defaultVal).attr("data-last-val", lastVal);

                // if default value is same with css value
                }else if(v.val() == defaultVal && window.openValS != $(this).val()){

                    // if last one available
                    if(v.hasAttr("data-last-val")){
                        v.val(v.attr("data-last-val"));
                    }else{
                        v.val(0);
                    }

                }else{
                    v.removeAttr("data-last-val");
                }

                // if Changed.
                if(window.openValS != $(this).val()){
                    window.allow_input_CSS_process = true;
                    $("#" + id + "-group .yp-after-prefix").trigger("keyup");
                    window.allow_input_CSS_process = false;
                }

                // trigger
                $(this).trigger('autogrow');

                // leave it
                $(this).blur();

            },

            delay: 0,
            minLength: 0,
            autoFocus: true,
            appendTo: $("#" + id + "-group .prefix-select")

            // open on click
            }).click(function() {

               $(this).autocomplete("search", "");

        });

        // Getting range
        var range = get_format_range(prefix, elementParent);

        // Setup slider.
        $('#yp-' + id).wqNoUiSlider({

            start: [0],

            range: {
                'min': parseInt(range[0]),
                'max': parseInt(range[1])
            },

            format: wNumb({
                mark: '.',
                decimals: decimals
            })

        }).on('change', function() {

            $(".fake-layer").remove();

            // set px as default if format is -
            if($('#' + id+"-after").val() == "-"){

                // resize
                $('#' + id+"-after").val("px");

                // resize box
                $('#' + id+"-after").trigger('autogrow');

            }

            var lock = thisContent.find(".lock-btn.active").length;
            var lockedIdArray = [];

            if(lock){

                thisContent.find(".yp-option-group").each(function(){
                    lockedIdArray.push($(this).attr("data-css"));
                });

                var val = $(this).val();

                for(var y = 0;y < lockedIdArray.length; y++){
                    $('#yp-' + lockedIdArray[y]).val(val);
                    $('#' + lockedIdArray[y] + '-after').trigger("keyup");
                    slide_action($("#yp-" + lockedIdArray[y]), lockedIdArray[y], true, false);
                }

                option_change();

            }else{
                slide_action($(this), id, true, true);
            }

        }).on('slide', function() {

            // set px as default if format is -
            if($('#' + id+"-after").val() == "-"){

                // resize
                $('#' + id+"-after").val("px");

                // resize box
                $('#' + id+"-after").trigger('autogrow');

            }

            var lock = thisContent.find(".lock-btn.active").length;
            var lockedIdArray = [];

            if(lock){
                thisContent.find(".yp-option-group").each(function(){
                    lockedIdArray.push($(this).attr("data-css"));
                });
            }

            // Get val
            var val = $(this).val();
            var prefix = $('#' + id+"-after").val();
            var y;

            val = Number((parseFloat(val)).toFixed(2));
            var left = $("#" + id + "-group").find(".wqNoUi-origin").css("left");

            // Update the input.
            if(lock === 0){
                $('#' + id + '-value').val(val);
            }else{
                for(y = 0;y < lockedIdArray.length; y++){
                    $('#' + lockedIdArray[y] + '-value').val(val);
                    $('#' + lockedIdArray[y] + '-after').val(prefix);
                    $('#' + lockedIdArray[y] + '-group').find(".wqNoUi-origin").css("left",left);
                }
            }


            prefix = $(this).parent().find("#" + id + "-after").val();

            // Standard.
            if(lock === 0){
                delete_live_css(id, false);
                insert_live_css(id, val + prefix, false);
            }else{
                for(y = 0;y < lockedIdArray.length; y++){
                    delete_live_css(lockedIdArray[y], false);
                    insert_live_css(lockedIdArray[y], val + prefix, false);
                }
            }

            if($(".fake-layer").length === 0){
                mainBody.append("<div class='fake-layer'></div>");
            }

        });

    }


    /* ---------------------------------------------------- */
    /* Slider Event                                         */
    /* ---------------------------------------------------- */
    function slide_action(element, id, $slider, changed) {

        var css = element.parent().parent().data("css");
        element.parent().parent().addClass("reset-enable");

        var val;

        if ($slider === true) {

            val = element.val();

        }

        // If input is active, get value by original data.
        // noUiSlider clear all dots in normal method.
        if($("#" + css + "-value").is(":focus")){
            val = parseFloat($("#" + css + "-value").val());
        }

        var css_after = $("#" + css + "-after").val();

        if(css_after == "-"){

            css_after = "";
            val = $("#"+css+"-group").attr("data-css-default");

        }

        var ov = $("#"+ css + "-value").val();

        if(ov == element.parent().parent().attr("data-css-default")){

            val = element.parent().parent().attr("data-css-default");
            css_after = "";

        }else if(isNaN(val)){

            // aceeptable
            if(ov == "inherit" || ov == "initial" || ov == "auto" || ov == "none" || ov == "normal"){

                val = ov;
                css_after = "";

            // no accept, dont add anything.
            }else{
                element.parent().parent().removeClass("reset-enable");
                return false;
            }

        }

        // Set for demo
        insert_rule(null, id, val, css_after);

        // Option Changed
        if(changed){
            option_change();
        }

    }


    /* ---------------------------------------------------- */
    /* ESCAPE                                               */
    /* ---------------------------------------------------- */
    function escape(s) {
        return ('' + s) /* Forces the conversion to string. */
            .replace(/\\/g, '\\\\') /* This MUST be the 1st replacement. */
            .replace(/\t/g, '\\t') /* These 2 replacements protect whitespaces. */
            .replace(/\n/g, '\\n')
            .replace(/\u00A0/g, '\\u00A0') /* Useful but not absolutely necessary. */
            .replace(/&/g, '\\x26') /* These 5 replacements protect from HTML/XML. */
            .replace(/'/g, '\\x27')
            .replace(/"/g, '\\x22')
            .replace(/</g, '\\x3C')
            .replace(/>/g, '\\x3E');
    }


    /* ---------------------------------------------------- */
    /* Border Type: Update View                             */
    /* ---------------------------------------------------- */
    $("#yp-border-type .yp-radio").on("click", function(){

        var value = $("#yp-border-type .yp-radio.active input").val();

        $(".yp-border-all-section,.yp-border-top-section,.yp-border-right-section,.yp-border-bottom-section,.yp-border-left-section").hide();

        $(".yp-border-"+value+"-section").show();

        insert_default_options();

    });


    /* ---------------------------------------------------- */
    /* Getting radio value                                  */
    /* ---------------------------------------------------- */
    function radio_value(the_id, $n, data) {

        if (data == 'auto auto') {
            data = 'auto';
        }

        if (data != '' && typeof data != 'undefined') {

            // Try selector first
            try{
                $("input[name=" + $n + "][value=" + escape(data) + "]").length;
            } catch(e){
                return false;
            }

            if (data.match(/\bauto\b/g)) {
                data = 'auto';
            }

            if (data.match(/\bnone\b/g)) {
                data = 'none';
            }

            if ($("input[name=" + $n + "][value=" + escape(data) + "]").length > 0) {

                the_id.find(".active").removeClass("active");

                $("input[name=" + $n + "][value=" + escape(data) + "]").prop('checked', true).parent().addClass("active");

            } else {

                the_id.find(".active").removeClass("active");

                // Disable all.
                $("input[name=" + $n + "]").each(function() {

                    $(this).prop('checked', false);

                });

            }

        }

    }

    /* ---------------------------------------------------- */
    /* Radio Setup                                          */
    /* ---------------------------------------------------- */
    $(".yp-radio-option .yp-radio label").on('click', function() {

        var element, radio, group, val, id;

        element = $(this);
        radio = element.parent();
        group = radio.parent().parent().parent();

        id = group.attr("data-css");

        if($(".position-option.active").length === 0){
            if(radio.hasClass("active")){
                return false;
            }
        }

        // Disable none.
        group.addClass("reset-enable");
        group.find(".active").removeClass("active");

        radio.addClass("active");

        $("#" + $(this).attr("data-for")).prop('checked', true);

        val = $("input[name=" + id + "]:checked").val();

        if(id != "border-type"){

            // Set for demo
            insert_rule(null, id, val, '');

            // Option Changed
            option_change();

        }

    });



    /* ---------------------------------------------------- */
    /* Check if is safe font family.                        */
    /* ---------------------------------------------------- */
    function is_safe_font(a) {

        if(isUndefined(a)){
            return false;
        }

        var regex = /\barial\b|\barial black\b|\barial narrow\b|\barial rounded mt bold\b|\bavant garde\b|\bcalibri\b|\bcandara\b|\bcentury gothic\b|\bfranklin gothic medium\b|\bgeneva\b|\bfutura\b|\bgill sans\b|\bhelvetica neue\b|\bimpact\b|\blucida grande\b|\boptima\b|\bsegoe ui\b|\btahoma\b|\btrebuchet ms\b|\bverdana\b|\bbig caslon\b|\bbodoni mt\b|\bbook antiqua\b|\bcalisto mt\b|\bcambria\b|\bdidot\b|\bgaramond\b|\bgeorgia\b|\bgoudy old style\b|\bhoefler text\b|\blucida bright\b|\bpalatino\b|\bperpetua\b|\brockwell\b|\brockwell extra bold\b|\bbaskerville\b|\btimes new roman\b|\bconsolas\b|\bcourier new\b|\blucida console\b|\bhelveticaneue\b/;

        var data = a.toLowerCase();

        return regex.test(data);

    }


    /* ---------------------------------------------------- */
    /* Warning System                                       */
    /* ---------------------------------------------------- */

    // Margin : display inline / negative margin warnings
    $("#margin-left-group,#margin-right-group,#margin-top-group,#margin-bottom-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // Show display warning
        if (get_selected_element().css("display") == "inline" || get_selected_element().css("display") == "table-cell") {

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.display_notice,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        // Show negative margin value warning if not responsive
        } else if($("#"+$(this).attr("data-css")+"-value").val() < 0) {

            // don't show if orginal value
            if($(this).hasClass("reset-enable") == false && $(this).find(".wqNoUi-active").length == 0){
                return true;
            }

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.negative_margin_notice,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });


    // List: disable list style image to use list style type
    $("#list-style-type-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // list stype image has value, and none button not active
        if($("#yp-list-style-image").val().length > 12 && $("#list-style-image-group .yp-none-btn.active").length == 0){

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.list_notice1,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });


    // cursor: cursor will not work in editor mode.
    $("#cursor-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // if cursor changed
        if($("#cursor-group").hasClass("reset-enable")){

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.cursor_warning,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });


    // List: please select a list item to edit
    $("#list-style-position-group,#list-style-image-group,#list-style-type-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        if($(this).attr("id") == 'list-style-type-group'){

            // Destroy if there not have another warning.
            if($("#yp-list-style-image .yp-none-btn.active").length == 1){
                $(this).popover("destroy");
            }

        }else{
            $(this).popover("destroy");
        }

        // Get selected element tag
        var tag = get_selected_element().prop("tagName").toLowerCase();

        // Show tag warning
        if (tag != 'li' && tag != 'ul'){

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.list_notice,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });
    
    
    // Width / Padding : display inline warning
    $("#scale-transform-group,#rotate-transform-group,#rotatex-transform-group,#rotatey-transform-group,#rotatez-transform-group,#translate-x-transform-group,#translate-y-transform-group,#skew-x-transform-group,#skew-y-transform-group,#perspective-group,#padding-left-group,#padding-right-group,#padding-top-group,#padding-bottom-group,#width-group,#height-group,#animation-name-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // Display warning
        if (get_selected_element().css("display") == "inline") {

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.display_notice,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });      


    /* ---------------------------------------------------- */
    /* position: top left right bottom = 120 > not good.    */
    /* ---------------------------------------------------- */
    $("#left-group,#right-group,#top-group,#bottom-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Show notice just for desktop mode.
        if(is_responsive_mod()){
            return true;
        }

        // don't show if orginal value
        if($(this).hasClass("reset-enable") == false && $(this).find(".wqNoUi-active").length == 0){
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // high value warning
        if($("#"+$(this).attr("id").replace("group","value")).val() >= 120) {

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.high_position_notice,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });

    
    /* ---------------------------------------------------- */
    /* Fixed and absolute not recommend                     */
    /* ---------------------------------------------------- */
    $("#position-group").on("mousemove click", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // Show notice just for desktop mode.
        if(is_responsive_mod()){
            return true;
        }

        // don't show if orginal value
        if($(this).hasClass("reset-enable") == false && $(this).find(".wqNoUi-active").length == 0){
            return true;
        }


        // fixed warning
        if($(".yp-radio.active #position-fixed").length > 0) {

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.fixed_notice,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        // absolute warning
        } else if($(".yp-radio.active #position-absolute").length > 0) {

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.absolute_notice,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });


    /* ---------------------------------------------------- */
    /* These features need to a background image            */
    /* ---------------------------------------------------- */
    $("#background-size-group,#background-repeat-group,#background-blend-mode-group,#background-attachment-group,#background-position-x-group,#background-position-y-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // show warning if not have a blackground image
        if ($("#yp-background-image").val() == '' || $("#background-image-group .yp-none-btn.active").length === 1) {

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.bg_img_notice_two,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });


    /* ---------------------------------------------------- */
    /* These features need to a background image or color   */
    /* ---------------------------------------------------- */
    $("#background-clip-group").on("mousemove", function(e) {

        // Stop if not orginal
        if (!e.originalEvent) {
            return true;
        }

        // Destroy
        $(this).popover("destroy");

        // show warning if not have a blackground image
        if ($("#yp-background-image").val() == '' || $("#background-image-group .yp-none-btn.active").length === 1) {

            $(this).popover({
                animation: false,
                title: lang.notice,
                content: lang.bg_img_notice_tree,
                trigger: 'hover',
                placement: "left",
                container: ".yp-select-bar",
                html: true
            }).popover("show");

        }

    });


    /* ---------------------------------------------------- */
    /* Destroy popover after disable                        */
    /* ---------------------------------------------------- */
    $(".yp-disable-btn").on("click",function(){
        $(this).parents(".yp-option-group").popover("destroy");
    });


    // Hide while editor options scrolling
    $(".yp-editor-panel").on("scroll", function(){
        $(".yp-option-group,.yp-advanced-option").popover("hide");
    });



    /* ---------------------------------------------------- */
    /* Select li hover                                      */
    /* ---------------------------------------------------- */
    $(".input-autocomplete").keydown(function(e) {

        var code = e.keyCode || e.which;

        if (code == 38 || code == 40) {

            $(this).parent().find(".autocomplete-div .ui-state-focus").prev().trigger("mouseout");
            $(this).parent().find(".autocomplete-div .ui-state-focus").trigger("mouseover");

        }

        // enter
        if (code == 13) {

            $(this).blur();

        }

    });

    
    /* ---------------------------------------------------- */
    /* Blur select after select                             */
    /* ---------------------------------------------------- */
    $(document).on("click", ".autocomplete-div ul li", function() {
        $(this).parent().parent().parent().find(".ui-autocomplete-input").trigger("blur");
    });


    // load fonts when even not muoseover
    $(".input-autocomplete").on("keyup", function(){
        load_near_fonts();
    });


    /* ---------------------------------------------------- */
    /* autocomplete blur                                    */
    /* ---------------------------------------------------- */
    $(".input-autocomplete").on("blur keyup", function(e) {

        var id = $(this).parent().parent().data("css");

        if(id != "font-family"){

            if (window.openVal == $(this).val()) {
                return false;
            }

        }else if (window.openVal == $(this).val()) {

            if (get_font_name(window.openVal) == get_font_name($(this).val())) {
                return false;
            }

        }

        $(".active-autocomplete-item").removeClass("active-autocomplete-item");
        $(this).removeClass("active");

        setTimeout(function(){
            mainBody.removeClass("autocomplete-active");
        },300);

        delete_live_css(id, "#yp-" + id + "-test-style");

        // Disable
        $("#" + id + "-group").addClass("reset-enable");

        // Font weight.
        if (id == 'font-weight') {
            $("#yp-font-weight").css(id, $(this).val()).css("fontFamily", $("#yp-font-family").val());
        }

        // Font family
        if (id == 'font-family') {
            $("#yp-font-family").css(id, $(this).val());
            $("#yp-font-weight").css("fontFamily", $("#yp-font-family").val());
        }

        // Text shadow live change.
        if (id == 'text-shadow') {
            $("#yp-text-shadow").css(id, $(this).val());
        }

        var val = $(this).val();

        if (id == 'font-family') {
            if (val.indexOf(",") == -1 && val.indexOf("'") == -1 && val.indexOf('"') == -1) {
                val = "'" + val + "'";
            }
        }

        // Set for data
        insert_rule(null, id, val, '');

        option_change();

    });


    /* ---------------------------------------------------- */
    /* autocomplete li hover                                */
    /* ---------------------------------------------------- */
    $(document).on("mouseover", ".autocomplete-div li", function() {

        var element = $(this);

        $(".active-autocomplete-item").removeClass("active-autocomplete-item");

        var id = element.parent().parent().attr("id").replace("yp-autocomplete-place-", "");

            // If not current.
            if (!element.hasClass("ui-state-focus")) {
                return false;
            }

            // If not undefined.
            if (typeof element.parent().attr("id") == 'undefined') {
                return false;
            }

            // Font weight
            if (id == 'font-weight') {

                delete_live_css("font-weight");
                insert_live_css("font-weight", number_filter(element.text()).replace("-", ""));

            }

            // Font family
            if (id == 'font-family') {

                // Load Near Fonts
                load_near_fonts();

                // Delete live CSS
                delete_live_css("font-family");

                // get element text
                var currentOptionValue = element.text();

                // Each all list and find full font-family code
                $.each(JSON.parse($("#font-family-group textarea").val()), function(i, v){

                    // checks
                    if(v.label == currentOptionValue){
                        currentOptionValue = v.value;
                        return false;
                    }

                });

                // If can't find anything, use direct.
                if(currentOptionValue == element.text()){
                    currentOptionValue = "'" + currentOptionValue + "'";
                }

                // Insert Live CSS
                insert_live_css('font-family',currentOptionValue); // 'Open Sans', sans-serif

            }


        // Font Weight
        if (id == 'font-weight') {

            $(".autocomplete-div li").each(function() {
                element.css("fontWeight", number_filter(element.text()).replace(/-/g, ''));
            });

            $(".autocomplete-div li").css("fontFamily", $("#yp-font-family").val());
        }

    });


    /* ---------------------------------------------------- */
    /* getting multiple delay                               */
    /* ---------------------------------------------------- */
    function get_multiple_delay(duration,delay){

        if(isUndefined(duration) || isUndefined(delay)){
            return false;
        }

        var resultDelay = 0;
        var durationArray = duration.toString().split(",");
        var delayArray = delay.toString().split(",");

        if(durationArray.length != delayArray.length){
            return false;
        }

        if(durationArray.length <= 1){
            return false;
        }

        var currents = 0;
        for(var i = 0; i < durationArray.length; i++){
            if(isDefined(delayArray[i+1])){
                currents = currents + parseFloat(duration_ms(durationArray[i]));
                resultDelay = (parseFloat(duration_ms(delayArray[i+1])) - currents) + resultDelay;
                currents = currents + resultDelay;
            }
        }

        return resultDelay;

    }


    /* ---------------------------------------------------- */
    /* mouseout autocomplete div                            */
    /* ---------------------------------------------------- */
    $(document).on("mouseout", ".autocomplete-div", function() {

        var css = $(this).parent().parent().attr("data-css");

        delete_live_css(css);

    });


    /* ---------------------------------------------------- */
    /* if mouseleave, leave                                 */
    /* ---------------------------------------------------- */
    $(document).on("mouseleave", $(document), function() {

        if(body.hasClass("yp-mouseleave")){
            return false;
        }

        body.addClass("yp-mouseleave");

        // remove multiple selection support.
        body.removeClass("yp-control-key-down");
        iframe.find(".yp-multiple-selected").removeClass("yp-multiple-selected");
        paintCanvas.other.find(".yp-selected-others-multiple-box").remove();

        if(is_content_selected() === false){
            clean();
        }

        // delete fake layers
        mainBody.removeClass("fake-layer-x-bg");
        $(".fake-layer-x").remove();
        $(".ui-resizable-handle").removeClass("active");

    });



    /* ---------------------------------------------------- */
    /* MouseUP clean active resizeable handle               */
    /* ---------------------------------------------------- */
    $(document).on("mouseup", $(document), function(e) {

        if($(".ui-resizable-resizing").length != 0){
            $(".ui-resizable-handle").removeClass("active");
        }

    });



    /* ---------------------------------------------------- */
    /* If mouseenter                                        */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", $(document), function() {

        body.removeClass("yp-mouseleave");

        // remove multiple selection support.
        body.removeClass("yp-control-key-down");
        iframe.find(".yp-multiple-selected").removeClass("yp-multiple-selected");
        paintCanvas.other.find(".yp-selected-others-multiple-box").remove();

    });


    /* ---------------------------------------------------- */
    /* iframe: if mouseleave, leave                         */
    /* ---------------------------------------------------- */
    iframe.on("mouseleave", iframe, function() {

        if(body.hasClass("yp-iframe-mouseleave")){
            return false;
        }

        body.addClass("yp-iframe-mouseleave");

        // remove multiple selection support.
        body.removeClass("yp-control-key-down");
        iframe.find(".yp-multiple-selected").removeClass("yp-multiple-selected");
        paintCanvas.other.find(".yp-selected-others-multiple-box").remove();

    });

    /* ---------------------------------------------------- */
    /* iframe: If mouseenter                                */
    /* ---------------------------------------------------- */
    iframe.on("mouseenter", iframe, function(event) {

        if(event.originalEvent){

            body.removeClass("yp-iframe-mouseleave");

            if(is_content_selected() == false){
                body.removeClass("yp-full-width-selected");
            }

        }

    });



    /* ---------------------------------------------------- */
    /* Loading visible fonts                                */
    /* ---------------------------------------------------- */
    function load_near_fonts(){

        var element, styleAttr, fontId;

        $("#font-family-group .ui-autocomplete.ui-menu li:in-viewport").each(function() {

            element = $(this);

            styleAttr = element.attr("style");

            // If has style attr, it mean this font family already loaded.
            if (styleAttr != null && styleAttr != undefined){
                return true;
            }

            fontId = get_basic_id($.trim(element.text().replace(/ /g, '+')));

            var safe = false;
            if(is_safe_font(element.text())){
                safe = true;
            }

            // append font family
            if (safe === false && iframe.find(".yp-font-test-" + fontId).length === 0) {

                body.append("<link rel='stylesheet' class='yp-font-test-" + fontId + "'  href='https://fonts.googleapis.com/css?family=" + $.trim(element.text().replace(/ /g, '+')) + ":300italic,300,400,400italic,500,500italic,600,600italic,700,700italic' type='text/css' media='all' />");

            }

            element.css("fontFamily", "'" + element.text() + "'");

        });

    }


    /* ---------------------------------------------------- */
    /* Stop Animations when close animations group          */
    /* ---------------------------------------------------- */
    $(document).on("click", ".animation-option:not(.active) > h3", function(){
        $(".anim-player-icon.dashicons-controls-pause").trigger("click");
    });
    

    /* ---------------------------------------------------- */
    /* Play icon for animation name                         */
    /* ---------------------------------------------------- */
    $(".anim-player-icon").on("click", function(){

        // Delete events
        iframe.find(".yp_onscreen,.yp_hover,.yp_click,.yp_focus").removeClass("yp_onscreen yp_hover yp_click yp_focus");

        // Stop Animations
        element_animation_end();

        // Clear all animations timers
        clear_animation_timer();

        // Remove previous hide things
        body.removeClass("yp-hide-borders-now yp-force-hide-select-ui yp-has-transform");

        // Pause animation
        if($(this).hasClass("dashicons-controls-pause")){

            // Play icon
            $(".anim-player-icon").removeClass("dashicons-controls-pause").addClass("dashicons-controls-play");

            // stop without play
            return false;

        }

        // 5ms delay before play
        clearTimeout(window.timer5);

        if($("#yp-animation-name").val() == "none"){
            return false;
        }

        // Wait a while to play animation
        window.timer5 = setTimeout(function(){

            // Play all elements
            iframe.find(get_current_selector()).addClass("yp_onscreen yp_hover yp_click yp_focus");

            // Pause icon
            $(".anim-player-icon").removeClass("dashicons-controls-play").addClass("dashicons-controls-pause");

            // Element ---
            var the_element = get_selected_element();

            // Add class.
            body.addClass("yp-hide-borders-now yp-force-hide-select-ui");

            var time = the_element.css("animationDuration");
            var timeDelay = the_element.css("animationDelay");
            
            // Getting right time delay if have multiple animations.
            var newDelay = get_multiple_delay(time,timeDelay);

            if(newDelay !== false){
                timeDelay = newDelay;
            }else if(isUndefined(timeDelay)){
                timeDelay = 0;
            }else{
                timeDelay = duration_ms(timeDelay); // timeDelay
            }

            if (isUndefined(time)){
                time = 1000;
            }else{
                time = duration_ms(time); // Time
            }
                    
            time = parseFloat(time) + parseFloat(timeDelay);

            if(time === 0){
                time = 1000;
            }

            time = time + 100;

            clear_animation_timer();

            window.animationTimer5 = setTimeout(function() {

                // remove class.
                body.removeClass("yp-hide-borders-now yp-force-hide-select-ui");

                element_animation_end();

                // Play icon
                $(".anim-player-icon").removeClass("dashicons-controls-pause").addClass("dashicons-controls-play");

                // Update.
                draw();

                // Show frame ui if mouse on iframe
                if(mainBody.hasClass("yp-iframe-mouseleave") == false){
                    setTimeout(function(){
                        show_frame_ui(200);
                    }, 300);
                }

            }, time);

        }, 5);

    });



    // Toggle options.
    $(".wf-close-btn-link").click(function(e) {
        if ($(".yp-editor-list > li.active").length > 0) {
            e.preventDefault();
            $(".yp-editor-list > li.active > h3").trigger("click");
        }
    });



    /* ---------------------------------------------------- */
    /* Creating live CSS because more faster. Color/Slider  */
    /* ---------------------------------------------------- */
    window.cachedSelector = null;
    window.cachedSelectorStrong = null;
    function insert_live_css(id, val, custom) {

        // get selector
        var selector = get_current_selector();


        // Don't use strong selector if selector is multiple.
        // to parsing and creating strong selector for each other, will affect performance.
        if(selector.indexOf(",") == -1){

            if(window.cachedSelector != selector){

                window.cachedSelector = get_current_selector();
                window.minCroppedSelector = 12;
                window.cachedSelectorStrong = get_parents(iframe.find(".yp-content-selected .yp-selected"), window.lastParentQueryStatus);
                window.minCroppedSelector = false;

            }
            
            selector = window.cachedSelectorStrong;

        }

        // Set parent element as current
        if(id == 'perspective'){

            // Update selector var
            selector = $.trim(get_parents(get_selected_element().parent(), "defaultNoCache"));

        }

        // Checks min height and min width and update.
        if(id == 'height' || id == 'width'){

            // minValue & minFormat
            var minVal = number_filter($("#min-"+id+"-value").val());
            var prefix = $("#"+id+"-after").val();
            var minFormat = $("#min-"+id+"-after").val();

            // if height is smaller than min-height, so update min height
            if(parseFloat(val) < parseFloat(minVal) && prefix == minFormat){

                // Insert min-height
                delete_live_css('min-'+id,false);
                insert_live_css('min-'+id,val,false);

            }

        }

        // Style id
        var styleId;
        if (custom !== false && custom !== undefined) {
            styleId = custom;
        } else {
            styleId = "#" + id + "-live-css";
        }

        //Element
        var element = iframe.find(styleId);

        // Check
        if (element.length === 0) {

            var idAttr = styleId.replace('#', '').replace('.', '');

            // No px em etc for this options.
            var idP = get_default_property(id);
            if (idP == "animation-iteration-count" || idP == 'flex-grow' || idP == 'flex-shrink' || idP == 'opacity' || idP == 'blur-filter' || idP == 'grayscale-filter' || idP == 'brightness-filter' || idP == 'z-index' || idP == 'contrast-filter' || idP == 'hue-rotate-filter' || idP == 'saturate-filter' || idP == 'sepia-filter' || idP.indexOf("-transform") != -1) {
                if(idP != "text-transform"){
                    val = number_filter(val);
                }
            }

            // Filter Default options.
            if (id == 'blur-filter' || id == 'grayscale-filter' || id == 'brightness-filter' || id == 'contrast-filter' || id == 'hue-rotate-filter' || id == 'saturate-filter' || id == 'sepia-filter') {

                id = 'filter';
                idAttr = 'filter';

                val = filter_generator(false);

            }

            // Transform Settings
            if (idP.indexOf("-transform") != -1 && idP != "text-transform") {

                id = 'transform';
                idAttr = 'transform';

                val = transform_generator(false);
                

            }

            // Box Shadow
            if (id == 'box-shadow-inset' || id == 'box-shadow-color' || id == 'box-shadow-vertical' || id == 'box-shadow-blur-radius' || id == 'box-shadow-spread' || id == 'box-shadow-horizontal') {

                id = 'box-shadow';
                idAttr = 'box-shadow';

                val = box_shadow_generator(selector, false);
                
            }

            // plus style for the current rule
            var plusStyle = "";
            var position = get_selected_element().css("position");
            if(position == "static"){
                if(id == "top" || id == "left" || id == "right" || id == "bottom"){
                    plusStyle = "position:relative !important;";
                }
            }

            // animations support
            if(id == "animation-name"){

                plusStyle = "-webkit-animation-duration:1000ms !important;animation-duration:1000ms !important;-webkit-animation-delay:100ms !important;animation-delay:100ms !important;-webkit-animation-fill-mode:none !important;animation-fill-mode:none !important;";

                if (val == 'bounce') {
                    plusStyle += "-webkit-transform-origin:center bottom !important;transform-origin:center bottom !important;";
                } else if (val == 'swing') {
                    plusStyle += "-webkit-transform-origin:top center !important;transform-origin:top center !important;";
                } else if (val == 'jello') {
                    plusStyle += "-webkit-transform-origin:center !important;transform-origin:center !important;";
                }

                if (val == 'flipInX') {
                    plusStyle += "-webkit-backface-visibility:visible !important;backface-visibility:visible !important;";
                }

            }

            // Append
            if(window.webkitArray.indexOf(id) != -1){ // Webkit support

                iframeBody.append("<style class='" + idAttr + " yp-live-css' id='" + idAttr + "'>.yp-selected,.yp-selected-others," + selector + "{" + id + ":" + val + " !important;-webkit-" + id + ":" + val + " !important;"+plusStyle+"}</style>");

            }else if(id == "justify-content"){

                iframeBody.append("<style class='" + idAttr + " yp-live-css' id='" + idAttr + "'>.yp-selected,.yp-selected-others," + selector + "{" + id + ":" + val + " !important;-webkit-box-pack:" + val + " !important;"+plusStyle+"}</style>");

            }else if(id == "align-items"){

                iframeBody.append("<style class='" + idAttr + " yp-live-css' id='" + idAttr + "'>.yp-selected,.yp-selected-others," + selector + "{" + id + ":" + val + " !important;-webkit-box-align:" + val + " !important;"+plusStyle+"}</style>");

            }else if(id == "flex-grow"){

                iframeBody.append("<style class='" + idAttr + " yp-live-css' id='" + idAttr + "'>.yp-selected,.yp-selected-others," + selector + "{" + id + ":" + val + " !important;-webkit-box-flex:" + val + " !important;"+plusStyle+"}</style>");

            }else{ // default

                iframeBody.append("<style class='" + idAttr + " yp-live-css' id='" + idAttr + "'>.yp-selected,.yp-selected-others," + selector + "{" + id + ":" + val + " !important;"+plusStyle+"}</style>");

            }

        }

    }


    /* ---------------------------------------------------- */
    /* Generating transform generator                       */
    /* ---------------------------------------------------- */
    function transform_generator(type){

        // Getting all other options.
        var scale = "scale(" + $.trim($("#scale-transform-value").val()) + ")";
        var rotate = "rotate(" + $.trim($("#rotate-transform-value").val()) + "deg)";
        var rotatex = "rotateX(" + $.trim($("#rotatex-transform-value").val()) + "deg)";
        var rotatey = "rotateY(" + $.trim($("#rotatey-transform-value").val()) + "deg)";
        var rotatez = "rotateZ(" + $.trim($("#rotatez-transform-value").val()) + "deg)";
        var translateX = "translatex(" + $.trim($("#translate-x-transform-value").val()) + "px)";
        var translateY = "translatey(" + $.trim($("#translate-y-transform-value").val()) + "px)";
        var skewX = "skewx(" + $.trim($("#skew-x-transform-value").val()) + "deg)";
        var skewY = "skewy(" + $.trim($("#skew-y-transform-value").val()) + "deg)";

        if(type == true){

        // Check if disable or not
        if ($("#scale-transform-group").hasClass("reset-enable") == false) {
            scale = '';
        }

        if ($("#rotate-transform-group").hasClass("reset-enable") == false) {
            rotate = '';
        }

        if ($("#rotatex-transform-group").hasClass("reset-enable") == false) {
            rotatex = '';
        }

        if ($("#rotatey-transform-group").hasClass("reset-enable") == false) {
            rotatey = '';
        }

        if ($("#rotatez-transform-group").hasClass("reset-enable") == false) {
            rotatez = '';
        }

        if ($("#translate-x-transform-group").hasClass("reset-enable") == false) {
            translateX = '';
        }

        if ($("#translate-y-transform-group").hasClass("reset-enable") == false) {
            translateY = '';
        }

        if ($("#skew-x-transform-group").hasClass("reset-enable") == false) {
            skewX = '';
        }

        if ($("#skew-y-transform-group").hasClass("reset-enable") == false) {
            skewY = '';
        }

        // Dont insert if no data.
        if (scale == 'scale()') {

            if (is_animate_creator() === false) {
                scale = '';
            } else {
                scale = 'scale(1)';
            }

        }

        if (rotate == 'rotate(deg)') {

            if (is_animate_creator() === false) {
                rotate = '';
            } else {
                rotate = 'rotate(0deg)';
            }

        }

        if (rotatex == 'rotateX(deg)') {

            if (is_animate_creator() === false) {
                rotatex = '';
            } else {
                rotatex = 'rotateX(0deg)';
            }

        }

        if (rotatey == 'rotateY(deg)') {

            if (is_animate_creator() === false) {
                rotatey = '';
            } else {
                rotatey = 'rotateY(0deg)';
            }

        }

        if (rotatez == 'rotateZ(deg)') {

            if (is_animate_creator() === false) {
                rotatez = '';
            } else {
                rotatez = 'rotateZ(0deg)';
            }

        }

        if (translateX == 'translatex(px)') {

            if (is_animate_creator() === false) {
                translateX = '';
            } else {
                translateX = 'translatex(0px)';
            }

        }

        if (translateY == 'translatey(px)') {

            if (is_animate_creator() === false) {
                translateY = '';
            } else {
                translateY = 'translatey(0px)';
            }

        }

        if (skewX == 'skewx(deg)') {

            if (is_animate_creator() === false) {
                skewX = '';
            } else {
                skewX = 'skewx(0deg)';
            }

        }

        if (skewY == 'skewy(deg)') {

            if (is_animate_creator() === false) {
                skewY = '';
            } else {
                skewY = 'skewy(0deg)';
            }

        }

        }

        // All data.
        var translateData = $.trim(space_cleaner(scale + " " + rotate + " " + rotatex + " " + rotatey + " " + rotatez + " " + translateX + " " + translateY + " " + skewX + " " + skewY));

        if (translateData === '' || translateData == ' ') {
            translateData = 'disable';
        }

        return translateData;

    }



    /* ---------------------------------------------------- */
    /* Filter generating                                    */
    /* ---------------------------------------------------- */
    function filter_generator(type){

        // Getting all other options.
        var blur = "blur(" + $.trim($("#blur-filter-value").val()) + "px)";
        var grayscale = "grayscale(" + $.trim($("#grayscale-filter-value").val()) + ")";
        var brightness = "brightness(" + $.trim($("#brightness-filter-value").val()) + ")";
        var contrast = "contrast(" + $.trim($("#contrast-filter-value").val()) + ")";
        var hueRotate = "hue-rotate(" + $.trim($("#hue-rotate-filter-value").val()) + "deg)";
        var saturate = "saturate(" + $.trim($("#saturate-filter-value").val()) + ")";
        var sepia = "sepia(" + $.trim($("#sepia-filter-value").val()) + ")";

        if(type == true){

        // Check if disable or not
        if ($("#blur-filter-group").hasClass("reset-enable") == false) {
            blur = '';
        }

        if ($("#grayscale-filter-group").hasClass("reset-enable") == false) {
            grayscale = '';
        }

        if ($("#brightness-filter-group").hasClass("reset-enable") == false) {
            brightness = '';
        }

        if ($("#contrast-filter-group").hasClass("reset-enable") == false) {
            contrast = '';
        }

        if ($("#hue-rotate-filter-group").hasClass("reset-enable") == false) {
            hueRotate = '';
        }

        if ($("#saturate-filter-group").hasClass("reset-enable") == false) {
            saturate = '';
        }

        if ($("#sepia-filter-group").hasClass("reset-enable") == false) {
            sepia = '';
        }

        // Dont insert if no data.
        if (blur == 'blur(px)') {

            if (is_animate_creator() === false) {
                blur = '';
            } else {
                blur = 'blur(0px)';
            }

        }

        if (grayscale == 'grayscale()') {

            if (is_animate_creator() === false) {
                grayscale = '';
            } else {
                grayscale = 'grayscale(0)';
            }

        }

        if (brightness == 'brightness()') {

            if (is_animate_creator() === false) {
                brightness = '';
            } else {
                brightness = 'brightness(1)';
            }

        }

        if (contrast == 'contrast()') {

            if (is_animate_creator() === false) {
                contrast = '';
            } else {
                contrast = 'contrast(1)';
            }

        }

        if (hueRotate == 'hue-rotate(deg)') {

            if (is_animate_creator() === false) {
                hueRotate = '';
            } else {
                hueRotate = 'hue-rotate(0deg)';
            }

        }

        if (saturate == 'saturate()') {

            if (is_animate_creator() === false) {
                saturate = '';
            } else {
                saturate = 'saturate(1)';
            }

        }

        if (sepia == 'sepia()') {

            if (is_animate_creator() === false) {
                sepia = '';
            } else {
                sepia = 'sepia(0)';
            }

        }

        }

        // All data.
        var filterData = $.trim(space_cleaner(blur + " " + brightness + " " + contrast + " " + grayscale + " " + hueRotate + " " + saturate + " " + sepia));

        if (filterData === '' || filterData == ' ') {
            filterData = 'disable';
        }

        return filterData;

    }


    /* ---------------------------------------------------- */
    /* Box Shadow generating                                */
    /* ---------------------------------------------------- */
    function box_shadow_generator(selector, type){

        // Get inset option
        var inset = '';
        if ($("#box-shadow-inset-inset").parent().hasClass("active")) {
            inset = 'inset';
        }

        // Getting all other options.
        var color = $.trim($("#yp-box-shadow-color").val());
        var vertical = $.trim($("#yp-box-shadow-vertical").val());
        var radius = $.trim($("#yp-box-shadow-blur-radius").val());
        var spread = $.trim($("#yp-box-shadow-spread").val());
        var horizontal = $.trim($("#yp-box-shadow-horizontal").val());

        if ($("#box-shadow-color-group .yp-none-btn").hasClass("active")) {
            color = get_color(iframe.find(selector).css("color"));
        }

        if(type == true){

            if (!$("#box-shadow-vertical-group").hasClass("reset-enable")) {
                vertical = '0';
            }

            if (!$("#box-shadow-blur-radius-group").hasClass("reset-enable")) {
                radius = '0';
            }

            if (!$("#box-shadow-spread-group").hasClass("reset-enable")) {
                spread = '0';
            }

            if (!$("#box-shadow-horizontal-group").hasClass("reset-enable")) {
                horizontal = '0';
            }

        }

        var shadowData = $.trim(space_cleaner(horizontal + "px " + vertical + "px " + radius + "px " + spread + "px " + color + " " + inset));

        if(horizontal == 0 && vertical == 0 && radius == 0 && spread == 0){
            shadowData = 'none';
        }

        return shadowData;

    }


    /* ---------------------------------------------------- */
    /* Delete live CSS                                      */
    /* ---------------------------------------------------- */
    function delete_live_css(id, custom) {

        // trigger anim stop
        if(id == "animation-name"){
            body.removeClass("yp-has-transform");
            element_animation_end();
        }

        // Style id
        var styleId;
        if (custom !== false && custom !== undefined) {
            styleId = custom;
        } else {
            styleId = "#" + id + "-live-css";
        }

        var element = iframe.find(styleId);

        if (element.length > 0) {
            element.remove();
        }

    }


    /* ---------------------------------------------------- */
    /* iris color picker helper                             */
    /* ---------------------------------------------------- */
    mainDocument.on("mousemove", function(){

        var element,css,val;

        if ($(".iris-dragging").length > 0) {

            element = $(".iris-dragging").parents(".yp-option-group");

            css = element.data("css");
            val = element.find(".wqcolorpicker").val();

            if(css != 'background-image'){
                delete_live_css(css, false);
                insert_live_css(css, val, false);
            }

            if($(".fake-layer").length === 0){
                mainBody.append("<div class='fake-layer'></div>");
            }

        }

        if ($(".iris-slider").find(".ui-state-active").length > 0) {

            element = $(".iris-slider").find(".ui-state-active").parents(".yp-option-group");

            css = element.data("css");
            val = element.find(".wqcolorpicker").val();

            if(css != 'background-image'){
                delete_live_css(css, false);
                insert_live_css(css, val, false);
            }

            if($(".fake-layer").length === 0){
                mainBody.append("<div class='fake-layer'></div>");
            }

        }

        if ($(".cs-alpha-slider").find(".ui-state-active").length > 0) {

            element = $(".cs-alpha-slider").find(".ui-state-active").parents(".yp-option-group");

            css = element.data("css");
            val = element.find(".wqcolorpicker").val();

            if(css != 'background-image'){
                delete_live_css(css, false);
                insert_live_css(css, val, false);
            }

            if($(".fake-layer").length === 0){
                mainBody.append("<div class='fake-layer'></div>");
            }

        }

    });


    /* ---------------------------------------------------- */
    /* Iris color picker insert Color                       */
    /* ---------------------------------------------------- */
    mainDocument.on("mouseup", function(event) {

        var element;

        if ($(document).find(".iris-dragging").length > 0) {

            element = $(".iris-dragging").parents(".yp-option-group");

            element.find(".wqcolorpicker").trigger("change");

            $(".fake-layer").remove();

            if(element.attr("id") == 'background-image-group'){
                update_gradient("insert");
            }

        } else if ($(document).find(".iris-slider .ui-state-active").length > 0) {

            element = $(".ui-state-active").parents(".yp-option-group");

            element.find(".wqcolorpicker").trigger("change");

            $(".fake-layer").remove();

            if(element.attr("id") == 'background-image-group'){
                update_gradient("insert");
            }

        } else if ($(document).find(".cs-alpha-slider .ui-state-active").length > 0) {

            element = $(".cs-alpha-slider .ui-state-active").parents(".yp-option-group");

            $(".fake-layer").remove();

            if(element.attr("id") == 'background-image-group'){
                update_gradient("insert");
            }

        } else if($(event.target).hasClass("iris-square-handle")){

            element = $(event.target).parents(".yp-option-group");

            element.find(".wqcolorpicker").trigger("change");

            $(".fake-layer").remove();

            if(element.attr("id") == 'background-image-group'){
                update_gradient("insert");
            }

        }

    });



    /* ---------------------------------------------------- */
    /* Color Event                                          */
    /* ---------------------------------------------------- */
    // Color picker on blur
    $(".wqcolorpicker").on("blur", function() {

        // If empty, set disable.
        if ($(this).val() == '') {
            return false;
        }


    // Show picker on click
    }).on("click", function() {

        $(this).parent().parent().find(".iris-picker").show();


    // Update on keyup
    }).on("keydown keyup", function() {

        $(this).parent().find(".wqminicolors-swatch-color").css("backgroundColor", $(this).val());

    // Color picker on change
    }).on('change', function() {

        var element, group, css, val;

        element = $(this);
        group = element.parent().parent().parent();

        css = group.data("css");
        val = element.val();

        // Fix multiple ## problem.
        val = val.replace(/##/g, "#");
        element.val(val);

        // Changed
        group.addClass("reset-enable");

        if (val.indexOf("#") == -1 && val.indexOf("rgb") == -1) {
            val = "#" + val;
        }

        // Disable
        group.find(".yp-btn-action.active").trigger("click");

        if (val.length < 3) {
            val = 'transparent';
            group.find(".yp-none-btn:not(.active)").trigger("click");
        }

        // clean live
        delete_live_css(css, false);

        // add
        insert_rule(null, css, val, '');

        // Option Changed
        option_change();

    });



    /* ---------------------------------------------------- */
    /* Input Event                                          */
    /* ---------------------------------------------------- */
    $(".yp-input-option .yp-input").on('keyup', function() {

        var element, group, val, imgSrc, id;

        element = $(this);
        group = element.parent().parent().parent();
        id = group.attr("data-css");
        val = element.val();

        // Changed
        group.addClass("reset-enable");

        // Disable
        group.find(".yp-btn-action.active").trigger("click");

        if (val == 'none') {
            group.find(".yp-none-btn").not(".active").trigger("click");
            element.val('');
        }

        if (val == 'disable') {
            group.find(".yp-disable-btn").not(".active").trigger("click");
            element.val('');
        }

        // Background image
        if (id == 'background-image' && val.indexOf("linear-gradient(") == -1) {

            val = val.replace(/\)/g, '').replace(/\url\(/g, '');

            element.val(val);

            val = 'url("' + val + '")';

            $(".yp-background-image-show").remove();

            imgSrc = val.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, "");

            if (val.indexOf("yellow-pencil") == -1) {

                if (imgSrc.indexOf("//") != -1 || imgSrc.indexOf("data:") != -1) {
                    $("#background-image-group .yp-part").append("<img src='" + imgSrc + "' class='yp-background-image-show' />");
                }

            }

        }

        // List Style image
        if (id == 'list-style-image') {

            val = val.replace(/\)/g, '').replace(/\url\(/g, '');

            element.val(val);

            val = 'url("' + val + '")';

        }

        // Remove active pattern if not have pattern more.
        if(id == 'background-image' && val.indexOf("yellow-pencil") == -1){
            $(".yp_bg_assets.active").removeClass("active");
        }

        // Add
        if(id == 'background-image' && val.indexOf("yellow-pencil") != -1){
            $(".yp_bg_assets.active").addClass("active");
        }

        // Set for demo
        insert_rule(null, id, val, '');

        // Option Changed
        option_change();

    });



    /* ---------------------------------------------------- */
    /* Clean data that not selected yet.                    */
    /* ---------------------------------------------------- */
    function simple_clean(){

        // Cleaning style attr
        if(is_content_selected()){

            if(window.defaultStyleAttr != undefined && window.defaultStyleAttr != false){

                // Only clean up rules added by yellowpencil
                if(window.defaultStyleAttr.indexOf("relative") == -1 && window.defaultStyleAttr.indexOf("animation-fill-mode") == -1){

                    // get current style
                    var currentStyle = get_selected_element().attr("style");

                    // clean up new rules
                    currentStyle = currentStyle.replace(/position:(\s*?)relative(\;?)|animation-fill-mode:(\s*?)(both|forwards|backwards|none)(\;?)/g, "");

                    // remove style attr
                    if(currentStyle.length < 3){
                        get_selected_element().removeAttr("style");
                    }

                    // apply style attr
                    get_selected_element().attr("style", currentStyle);

                // back to first selection style value
                }else{
                    get_selected_element().attr("style", window.defaultStyleAttr);
                }

            }else{
                get_selected_element().removeAttr("style");
            }

        }

        // Clean basic classes
        body.removeAttr("data-clickable-select").removeAttr("data-yp-selector").removeClass("yp-flex-container yp-flex-element yp-grid-element yp-element-list yp-element-float yp-content-selected yp-body-select-just-it yp-has-transform yp-element-resizing yp-element-resizing-height-bottom yp-element-resizing-width-right yp-visual-editing yp-visual-editing-x yp-visual-editing-y yp-element-not-visible").removeClass("yp-selector-hover yp-selector-focus yp-selector-link yp-selector-visited yp-selector-active yp-selector-checked yp-selector-disabled yp-selector-enabled yp-selector-invalid yp-selector-valid");

        // for html overflow hidden on resizing
        iframe.find("html").removeClass("yp-element-resizing");
 
        // Clean classes from selected element
        iframe.find(".yp-selected,.yp-selected-others").removeClass("ui-draggable ui-draggable-handle ui-draggable-handle");

        // Remove yp-selected classes
        iframe.find(".yp-selected-others,.yp-selected").removeClass("yp-selected-others").removeClass("yp-selected");

        // Basic fast
        paintCanvas.general.empty();
        paintCanvas.other.empty();
        paintCanvas.active.empty();

        // show again
        paint.removeAttr("style");
            
        // Empty
        window.lastTextColor = null;

        // CSS
        iframe.find(".yp-live-css").remove();

        // Update informations
        if($(".advanced-info-box").css("display") == 'block' && $(".element-btn").hasClass("active")){
            $(".info-element-selected-section").hide();
            $(".info-no-element-selected").show();
        }

        $(".yp-disable-btn.active").removeClass("active");

    }



    /* ---------------------------------------------------- */
    /* Gradient Generator Start                             */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-gradient-pointer-area", function(e) {

        // Not action if picker open
        if ($(".iris-picker:visible").length !== 0) {
            return true;
        }

        // only blank area clicks are valid
        if ($(e.target).hasClass("yp-gradient-pointer") || $(e.target).hasClass("yp-gradient-pointer-color")) {
            return false;
        }

        // gradient pointer area
        var area = $(".yp-gradient-pointer-area");

        // Getting pointer area width
        var areaWidth = area.width();

        // Getting pointer area offset
        var areaOffset = area.offset();
        var leftOffset = areaOffset.left;

        // rel x in px
        var deg = e.pageX - leftOffset;

        // find relX in % format
        deg = parseInt(deg/areaWidth*100);

        $(".yp-gradient-pointer").removeClass("active");

        // get color
        var color = "#FF5253";
        if($("#iris-gradient-color").val().length == 7){
            color = $("#iris-gradient-color").val();
        }

        // pointer html Template
        var pointerTemplate = '<div class="yp-gradient-pointer active" data-color="'+color+'" data-position="'+deg+'" style="left:'+deg+'%;"><i class="yp-gradient-pointer-color" style="background-color:'+color+';"></i></div>';

        // Append pointer
        area.append(pointerTemplate);

        // Adds draggable support to pointers
        update_gradient_pointers();

        // Update after append
        update_gradient("insert");

    });


    /* ---------------------------------------------------- */
    /* Draggable gradient pointers                          */
    /* ---------------------------------------------------- */
    $(".yp-gradient-orientation i").draggable({

        containment: "parent",

        start: function(e,ui){
        },

        drag: function(e,ui){

            var ori = $(".yp-gradient-orientation");

            var offset = ori.offset();

            var center_x = (offset.left) + (ori.width()/2);
            var center_y = (offset.top) + (ori.height()/2);

            var x = ui.offset.left;
            var y = ui.offset.top;

            var radians = Math.atan2(x - center_x, y - center_y);
            var degree = (radians * (180 / Math.PI) * -1);

            $(this).parent().attr("data-degree",parseInt(degree));

            update_gradient("live");

        },

        stop: function(e,ui){
            update_gradient("insert");
        }

    });


    window.blockIris = false;

    /* ---------------------------------------------------- */
    /* Updating gradient                                    */
    /* ---------------------------------------------------- */
    function update_gradient_pointers(){

        // gradient pointer area
        var area = $(".yp-gradient-pointer-area");

        // Getting pointer area width
        var areaWidth = area.width();

        // Getting pointer area offset
        var areaOffset = area.offset();
        var leftOffset = areaOffset.left;
        var topOffset = areaOffset.top;

        // clean draggable
        if($(".yp-gradient-pointer").hasClass("ui-draggable")){

            // Try
            try{
                $(".yp-gradient-pointer.ui-draggable").draggable("destroy"); // Try to destory draggable.
            } catch (e){

            }

        }

        // Draggable gradient pointers
        $(".yp-gradient-pointer").draggable({

            containment: [leftOffset, topOffset, (leftOffset+areaWidth), topOffset],

            start: function(e,ui){
                $(".yp-gradient-pointer").removeClass("active");
                $(this).addClass("active");

                //Block iris. not let to open while dragging
                window.blockIris = true;

                // Hide iris if open
                $(".yp-gradient-section .iris-picker").hide();

                window.gradientPointerTop = $(this).offset().top;
                window.gradientPointerLen = $(".yp-gradient-pointer:not(.disable)").length;

            },

            drag: function(e,ui){

                // Add class to parent
                area.addClass("gradient-pointer-no-cursor");

                // update pointer position
                $(this).attr("data-position",parseInt(ui.position.left/areaWidth*100));

                // disable
                if(window.gradientPointerLen > 2){

                    if(e.pageY < (window.gradientPointerTop-20) || e.pageY > (window.gradientPointerTop+20)){
                        $(this).addClass("disable");
                    }else{
                        $(this).removeClass("disable");
                    }

                }

                // Updating view and data
                update_gradient("live");

            },

            stop: function(e,ui){

                // remove class from parent
                area.removeClass("gradient-pointer-no-cursor");
                
                // update pointer position
                $(this).attr("data-position",parseInt(ui.position.left/areaWidth*100));

                // Updating view and data
                update_gradient("insert");

                window.blockIris = false;

            },

            axis: "x"

        });

    }


    /* ---------------------------------------------------- */
    /* iris color picker global callback                    */
    /* ---------------------------------------------------- */
    window.iris_global_change_callback = function(event,ui){

        // if this is gradient color picker
        if($(".yp-gradient-section .iris-picker:visible").length > 0){

            // Update the pointer
            $(".yp-gradient-pointer.active i").css("background-color",ui.color.toString());
            $(".yp-gradient-pointer.active").attr("data-color",ui.color.toString());

            // insert gradint CSS before close picker
            update_gradient("live");

        }

    }


    /* ---------------------------------------------------- */
    /* ContextMenu on gradient pointers                     */
    /* ---------------------------------------------------- */
    $(document).on("click contextmenu", ".yp-gradient-pointer", function(e) {

        $(".yp-gradient-pointer").removeClass("active");
        $(this).addClass("active");

    });


    /* ---------------------------------------------------- */
    /* Double click support to gradient pointers            */
    /* ---------------------------------------------------- */
    $(document).on("dblclick", ".yp-gradient-pointer", function(e) {

        if(window.blockIris == true){
            return false;
        }

        // get color
        var color = $(this).attr("data-color");

        window.gradientlastColor = color;

        $(".yp-gradient-pointer").removeClass("active");

        $(this).addClass("active");

        $(".yp-gradient-pointer-area").addClass("gradient-pointer-no-cursor");

        $("#iris-gradient-color").iris("color",color);

        // If rgba
        var alpha = 100;
        if(color.indexOf("rgba") != -1){

            alpha = $.trim(color.replace(/^.*,(.+)\)/,'$1'));

                if(alpha.indexOf(".") != -1){

                    alpha = alpha.replace("000.","").replace("00.","").replace("0.","").replace(".","");

                    if(alpha.length == 1){
                        alpha = alpha.toString()+"0";
                    }

                    alpha = alpha.replace(/^0/, "");
                }

            }

        // Update iris alpha.
        $(".yp-gradient-section .iris-picker .cs-alpha-slider").slider('value',alpha);

        $(".yp-gradient-section .iris-picker").show();

    });
    
    
    /* ---------------------------------------------------- */
    /* Reading old gradient codes                           */
    /* ---------------------------------------------------- */
    function getOriginalGradient(gradient){

        var reverseDeg = false;
        if(/(-webkit-|-moz-)/g.test(gradient) == true){
            reverseDeg = true;
        }
      
        // Clean CSS3 prefixes
        gradient = gradient.replace(/(-webkit-gradient\(linear\,(\s+)?|-webkit-linear-gradient\(|-o-linear-gradient\(|-moz-linear-gradient\()/g, "linear-gradient(");

        // get direction
        var firstPart = /linear-gradient\(([^,]+)/.exec(gradient)[1];
        
        // no direction, add direction     
        if(/(deg|left|top|right|bottom)/g.test(firstPart) == false){
            gradient = gradient.replace(/linear-gradient\(/g, "linear-gradient(to right, ");

        // Old gradient
        }else if(firstPart.indexOf("to ") == -1){

            // Is deg
            if(firstPart.indexOf("deg") != -1 && reverseDeg == true){

                var deg = number_filter(firstPart);
                
                if(deg < 90){
                    deg = 90 - deg;
                }else if(deg > 90){
                    deg = 360 - (deg - 90);
                }

                // Fix reverse deg
                gradient = gradient.replace(/linear-gradient\(([^,]+)/, "linear-gradient("+deg+"deg");

            // Convert to new gradeint API
            }else{

                // trim
                firstPart = firstPart.trim();

                // one direction
                if(firstPart.indexOf(" ") == -1){

                    // Convert to TO TOP ETC
                    if(firstPart == "left"){
                        gradient = gradient.replace(/linear-gradient\(([^,]+)/, "linear-gradient(to right");
                    }else if(firstPart == "right"){
                        gradient = gradient.replace(/linear-gradient\(([^,]+)/, "linear-gradient(to left");
                    }else if(firstPart == "top"){
                        gradient = gradient.replace(/linear-gradient\(([^,]+)/, "linear-gradient(to bottom");
                    }else if(firstPart == "bottom"){
                        gradient = gradient.replace(/linear-gradient\(([^,]+)/, "linear-gradient(to top");
                    }

                }

            }

        }

        // add breakpoints if not available
        if(gradient.indexOf("%") == -1){

            // get colors
            gradient = gradient.replace(/rgb(a?)\((.*?)\)/g, function(match, contents, offset, string){
                return match.replace(/\,/g, "|-|-|");
            });

            // get colors
            var totalColor = gradient.match(/\,/g).length;
            var currentColor = -2;
            gradient = gradient.replace(/\,/g, function(match, contents, offset, string){

                currentColor++;

                // direction
                if(currentColor == -1){

                    return ",";

                // color-stop
                }else{
                    
                    return " " + parseInt(currentColor*100/totalColor) + "%,";

                }

            });

            // return to default rgb colors
            gradient = gradient.replace(/\|\-\|\-\|/g, ",");

            // last point to end
            gradient = gradient.replace(/\)$/, " 100%)");

        }

        return gradient;
      
    }


    /* ---------------------------------------------------- */
    /* CSS To Gradient View                                 */
    /* ---------------------------------------------------- */
    function read_gradient(value){

        // Variables
        var gradientObject,Colortype,color,lengthType,length,lengthFormat,lengthSpace,pointerTemplate,code,direction,directionType;

        // Cleans value.
        value = value.replace(/\s+?!important/g,'').replace(/\;$/g,'').trim();

        // No direction gradient for gradient bar
        code = 'linear-gradient(to right,';

        // Be sure value is a gradient
        if(value.indexOf("linear-gradient(") == -1){
            return false;
        }

        // convert old gradients to new gradient
        value = getOriginalGradient(value);

        // Parse gradient with a javascript plugin.
        try{
            gradientObject = window.GradientParser(value)[0];
        } catch (e) {
            // If not valid, false
            return false;
        }

        // getting direction type
        directionType = gradientObject.orientation.type;

        // getting direction value
        direction = gradientObject.orientation.value;

        // covert directional value to deg
        if(directionType == 'directional'){

            // Directional value to deg
            if(direction == 'top'){
                direction = '0';
            }else if(direction == 'right'){
                direction = '90';
            }else if(direction == 'bottom'){
                direction = '180';
            }else if(direction == 'left'){
                direction = '270';
            }else if(direction == 'top'){
                direction = '360';
            }

        }

        // Update direction data
        $(".yp-gradient-orientation").attr("data-degree",direction);

        // Empty bar
        $(".yp-gradient-pointer-area").empty();

        // Each color stops
        for(var i = 0; i < gradientObject.colorStops.length; i++){

            if(isDefined(gradientObject.colorStops[i])){

                // Length Type
                lengthType = gradientObject.colorStops[i].length.type;

                // Skip if not %
                if(lengthType != '%'){
                    return true;
                }

                // Length
                length = gradientObject.colorStops[i].length.value;
                lengthFormat = '%';
                lengthSpace = ' ';

            }else{

                // Auto length
                length = (i*100/(gradientObject.colorStops.length-1));
                lengthFormat = '%';
                lengthSpace = ' ';

            }

            // Int
            length = parseInt(length);
            
            // Color type
            Colortype = gradientObject.colorStops[i].type;

            // Color
            color = gradientObject.colorStops[i].value;

            // CSS Color
            if(Colortype == 'rgb' || Colortype == 'rgba'){
                color = Colortype + "(" + color + ")";
            }

            if(Colortype == 'hex'){
                color = '#' + color;
            }

            // Set first color as default color
            if(i == 0){
                $("#iris-gradient-color").val(color);
            }

            // add colorStops
            code += ' ' + color + lengthSpace + length + lengthFormat;

            // add if not last.
            if(gradientObject.colorStops.length-1 != i){
                code += ",";
            }

            // pointer html Template
            pointerTemplate = '<div class="yp-gradient-pointer" data-color="'+color+'" data-position="'+length+'" style="left:'+length+''+lengthFormat+';"><i class="yp-gradient-pointer-color" style="background-color:'+color+';"></i></div>';

            // Append pointer
            $(".yp-gradient-pointer-area").append(pointerTemplate);

        }

        code += ')';

        // Remove old style
        $("#gradient-bar-view-style").remove();

        // Add new
        mainBody.append('<style id="gradient-bar-view-style">.yp-gradient-bar{background-image:'+code+';}.yp-gradient-orientation{background-image:'+value+';}</style>');

        // Add support
        setTimeout(function(){
            update_gradient_pointers();
        },26);

    }

    
    /* ---------------------------------------------------- */
    /* Gradient View to CSS Code                            */
    /* ---------------------------------------------------- */
    function update_gradient(type){

        // Getting direction
        var direction = $(".yp-gradient-orientation").attr("data-degree") + "deg";

        if(direction == '0deg'){
            direction = 'to top';
        }else if(direction == '90deg'){
            direction = 'to right';
        }else if(direction == '180deg'){
            direction = 'to bottom';
        }else if(direction == '270deg'){
            direction = 'to left';
        }else if(direction == '360deg'){
            direction = 'to top';
        }

        // Linear gradient
        var codeBar = 'linear-gradient(to right,';
        var code = 'linear-gradient('+direction+',';

        // Sort points by position
        $(".yp-gradient-pointer-area .yp-gradient-pointer:not(.disable)").sort(function(a, b) {
            return +a.dataset.position - +b.dataset.position;
        }).appendTo(".yp-gradient-pointer-area");

        // Each all pointers
        $(".yp-gradient-pointer-area .yp-gradient-pointer:not(.disable)").each(function(i){

            // Element
            var pointer = $(this);

            // Getting pointer data
            var color = pointer.attr("data-color");
            var position = pointer.attr("data-position");

            // Adds to CSS
            code += ' ' + color + ' ' + parseInt(position) + '%';
            codeBar += ' ' + color + ' ' + parseInt(position) + '%';

            // add if not last.
            if($(".yp-gradient-pointer:not(.disable)").length-1 != i){
                code += ",";
                codeBar += ",";
            }

        });

        code += ')';
        codeBar += ')';

        // Remove old style
        $("#gradient-bar-view-style").remove();

        // Add new
        mainBody.append('<style id="gradient-bar-view-style">.yp-gradient-bar{background-image:'+codeBar+';}.yp-gradient-orientation{background-image:'+code+';}</style>');

        // Update CSS
        if(type == 'live'){
            delete_live_css("background-image",false);
            insert_live_css("background-image",code,false);
            $("#yp-background-image").val(code);
        }else if(type == 'insert'){
            delete_live_css("background-image",false);
            $("#yp-background-image").val(code).trigger("keyup");
        }

    }


    /* ---------------------------------------------------- */
    /* Disable right click on gradient parts                */
    /* ---------------------------------------------------- */
    $(".yp-gradient-pointer-area,.yp-gradient-bar").on("contextmenu", function(e){

        // right click allowed just on pointer
        if ($(e.target).hasClass("yp-gradient-pointer") == false && $(e.target).hasClass("yp-gradient-pointer-color") == false) {
            return false;
        }

    });



    /* ---------------------------------------------------- */
    /* Clean previous changes, settings                     */
    /* ---------------------------------------------------- */
    function clean() {

        // Clean selection
        window.firstSelectLimit = false;

        // Use yp_simple_clean function for simple clean data.
        if(is_content_selected() === false){
            simple_clean();
            return false;
        }else{

            // Stop if dragging
            if (is_dragging()){
                return false;
            }

            // Clean Parent tree
            if(window.targetIsParentTree == false){

                $("#parent-bar ul").empty();
                $("#parent-bar span").remove();
                $("#parent-bar").append("<span>"+lang.empty_element_tree+"</span>");

                // remove parent way classes after element leave
                iframe.find('[class*="yp-parent-way"]').each(function(){

                    if(typeof this.className === "string"){
                        this.className = this.className.replace(/yp-parent-way-[0-9]+/g, '');
                    }

                });

            }

            // remove active visual manager selector group.
            $(".selector-group.active").removeClass("active");

            // clean property size
            $(".property-has-queries").removeClass("property-has-queries property-size-tabs-visible");
            body.removeClass("property-query-active");
            $(".property-size").tooltip("destroy");
            $(".property-size-tabs").empty();

            // Because propery-size changed.
            if(is_responsive_mod()){
                update_responsive_size_notice();
                update_responsive_breakpoints();
            }

            // Hide if close while playing an animate.
            if(body.hasClass("yp-force-hide-select-ui")){
                body.removeClass("yp-force-hide-select-ui yp-hide-borders-now");
            }

            /* this function remove menu from selected element */
            if (iframe.find(".context-menu-active").length > 0) {
                get_selected_element().contextMenu("hide");
            }

            // destroy ex element draggable feature.
            if (iframe.find(".yp-selected.ui-draggable").length > 0){

                // Try
                try{
                    get_selected_element().draggable("destroy"); // Try to destory draggable.
                } catch (e) {

                }

            }

            // Clean lock button active classes
            $(".lock-btn").removeClass("active");

            // Clean popovers.
            $("#margin-left-group,#margin-right-group,#margin-top-group,#margin-bottom-group,#padding-left-group,#padding-right-group,#padding-top-group,#padding-bottom-group,#background-color-group,#background-size-group,#background-repeat-group,#background-blend-mode-group,#background-attachment-group,#background-position-x-group,#background-position-y-group,#box-shadow-color-group,#animation-name-group,#list-style-position-group,#list-style-image-group,#list-style-type-group").popover("destroy");

            // close open menu
            $(".yp-editor-list > li.active > h3").trigger("click");

            // Edited Class remove
            $(".yp-editor-list > li > h3.yp-group-edited").removeClass("yp-group-edited");

            // Dont stop playing animate
            if(mainBody.hasClass("yp-animate-manager-playing") === false){
                iframe.find(".yp_onscreen,.yp_hover,.yp_click,.yp_focus").removeClass("yp_onscreen yp_hover yp_click yp_focus");
            }

            // Remove classes
            $(".reset-enable").removeClass("reset-enable");

            // Update panel
            $(".yp-after").css("display", "block");

            // delete cached data.
            $("li[data-loaded]").removeAttr("data-loaded");

            // copied by iframe click select section.
            $(".input-autocomplete").removeAttr("style");
            $(".yp-disable-contextmenu").removeClass("yp-disable-contextmenu");
            $(".yp-active-contextmenu").removeClass("yp-active-contextmenu");

            // Cancel if animater active
            if(is_animate_creator()){
                close_animation_generator(true);
            }

            // Hide some elements from panel
            $(".yp-transform-area,.yp-filter-area").hide();
            $(".yp-on").removeClass("yp-on");

            simple_clean();

            // Editor Panel Resetting
            $(".iris-picker,.yp-border-top-section,.yp-border-right-section,.yp-border-bottom-section,.yp-border-left-section").hide();
            $(".yp-border-all-section").show();
            $(".yp-gradient-pointer-area").removeClass("gradient-pointer-no-cursor");
            $(".yp_background_assets,.yp-gradient-section,.yp_nice_colors_area,.yp_meterial_colors_area,.yp_flat_colors_area,.yp_theme_colors_area").hide();
            $(".yp-bg-img-btn,.yp-flat-colors,.yp-meterial-colors,.yp-nice-colors,.yp-theme-colors,.yp-gradient-pointer,.yp-gradient-btn,#border-type-group .yp-radio.active").removeClass("active");

            // Disable picker on color close.
            if(mainBody.hasClass("yp-element-picker-active")){
                $(".yp-element-picker").trigger("click");
            }

            gui_update();

            // update animations
            if(is_animation_manager()){

                if($("#yp-animate-bar-current .yp-anim-process-bar").length == 0 && $("#yp-animate-bar-current").length > 0){
                    $(".anim-active-row").remove();
                }else{
                    $(".anim-active-row").removeClass("anim-active-row");
                }

                // toggle empty message / animations
                if($(".yp-animate-bar").length == 0){
                    $(".animation-manager-empty").show();
                    $(".yp-anim-list-menu").hide();
                }else{
                    $(".animation-manager-empty").hide();
                }

            }

            active_view_group();

            // hide these properties settings as default
            $("#min-width-group .yp-after,#min-height-group .yp-after,#max-width-group .yp-after,#max-height-group .yp-after").css("display", "none");

            window.parentItems = '';
            window.childrenItems = '';

            $(".yp-gradient-demo").removeClass("active");

            body.removeClass("yp-full-width-selected");

            // Update CSS Editor
            if(mainBody.hasClass("yp-css-editor-active")){
                editor_update(true);
            }

        }

    }


    /* ---------------------------------------------------- */
    /* Data element                                         */
    /* ---------------------------------------------------- */
    function editor_data_element(){

        return iframe.find("#yp-styles-area");

    }


    /* ---------------------------------------------------- */
    /* Getting Stylizer data                                */
    /* ---------------------------------------------------- */
    function get_editor_data(type) {
        return iframe.find("[data-source-mode='"+type+"']").html();
    }


    /* ---------------------------------------------------- */
    /* Getting cleaned CSS data                             */
    /* ---------------------------------------------------- */
    function get_clean_css(marker, type, autoMediaComments) {

        var data;

        // return cached css if need to process
        if(iframe.find("#yp-live-css-data").length > 0 && type == get_active_type()){
            
            data = iframe.find("#yp-live-css-data").html();

        // undefined type is current type.
        }else if(iframe.find("#yp-live-css-data").length > 0 && type == null){

            data = iframe.find("#yp-live-css-data").html();

        }else{

            // Default current
            var editorData;
            
            // If has type, get data by type
            if(type != null){
                editorData = getStyles(type, false);
            }else{
                editorData = getStyles(null, false);
            }

            data = get_css_by_screensize('desktop', type);

            // IS editorData
            var styles = findStyle(editorData, "[style]");

            if (styles.length > 0) {

                var mediaArray = [];

                var v;
                for(var i = 0; i < styles.length; i++){

                    v = /\[msize\=(.*?)\]/g.exec(styles[i])[1];

                    if ($.inArray(v, mediaArray) === -1 && v != 'desktop') {
                        mediaArray.push(v);
                    }

                }

                $.each(mediaArray, function(i, v) {

                    var q = get_css_by_screensize(v);

                    // Add extra tab for media query content.
                    q = "\t" + q.replace(/\r/g, '\r\t').replace(/\t$/g, '').replace(/\t$/g, '');

                    if (v == 'tablet') {
                        v = '(min-width: 768px) and (max-width: 991px)';
                    }

                    if (v == 'mobile') {
                        v = '(max-width:767px)';
                    }

                    if(isDefined(v)){
                        data = data + "\r\r@media " + v + "{\r\r" + q + "}";
                    }

                });

            }

        }

        // Fix extra spaces on media queries
        data = data.replace(/\{\r\r/g, "{");

        // Convert interactives YP Styles to default for show.
        data = data.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)(.*?){/g, function(match, contents, offset, input_string){
       
            var selection = match.match(/\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g)[0].replace(/(body)?\.yp-selector-/g,"");
            var selector = match.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g, "");
              
            if(selector[0] != " "){selector = "body" + selector;}
            selector = selector.trim().replace(/\{/g, ":" + selection) + "{";
              
            return selector;
              
        });

        // clean webkit filter, transform.
        data = data.replace(/(\t+)?-webkit-(filter|transform|background-clip|perspective|background-size|box-sizing|animation-name|animation-iteration-count|animation-duration|animation-delay|animation-fill-mode|box-shadow|flex-direction|flex-wrap|box-pack|box-align|align-content|flex-basis|align-self|box-flex|flex-shrink|transform-origin|backface-visibility):(.*?);(\n|\r)?/g, "");

        // Adding break
        data = data.replace(/\)\{/g, "){\r").replace(/\)\{/g, "){\r");

        // Clean spaces for nth-child and not.
        var ars = Array(
            "nth-child",
            "not",
            "lang",
            "nth-last-child",
            "nth-last-of-type",
            "nth-of-type"
        );

        for(var ai = 0; ai < ars.length; ai++){

            // Reg
            var k = new RegExp(ars[ai] + "\\((.*?)\\)\{\r\r", "g");

            // Replace
            data = data.replace(k, ars[ai] + "\($1\)\{");

        }

        if (marker === true) {
            data = data.replace(/\r\ta:a !important;/g, "");
            data = data.replace(/a:a !important;/g, "");
            data = data.replace(/a:a;/g, "");
        }

        // Clean first empty lines.
        data = data.replace(/^\r/g, '').replace(/^\r/g, '');
        data = data.replace(/\}\r\r\r\r@media/g, '}\r\r@media');


        // Automatic Media comments
        if(autoMediaComments == true){
        
            // Comment variables
            var size, processedSize;

            // Each all selectors
            data = data.replace(/(^)(.*?){/mg, function(match, contents, offset, input_string){

                // MEDIA COMMENTS ****/
                if(match.indexOf("@media") != -1){

                    // Get size
                    size = $.trim(match.match(/@media(.*?){/g).toString().replace(/(\{|@media(\s+)?)/g,''));
                    
                    // process Size
                    processedSize = process_media_query(size);

                    // addings comment of size if processed size valid
                    if(isDefined(processedSize)){

                        // Convert to String
                        processedSize = processedSize.toString();

                        //  update size view
                        size = size.replace(/desktop/i, lang.all_devices);

                        // more understandable title
                        if(processedSize.indexOf(",") == -1){
                            size = processedSize.replace(/([^\d+])(\d+)/g, "$2$1").replace(/\</g,' and below').replace(/\>/g,' and above').replace(/\.\d+/g, "").replace(/(\d+)(\s|$)/g, "$1px$2") + " screen sizes";
                        }else{
                            size = "screen sizes " + processedSize.replace(/\</g,'smaller than ').replace(/\>/g,'larger than ').replace(/\,/g,' and ').replace(/\.\d+/g, "").replace(/(\d+)(\s|$)/g, "$1px$2");
                        }

                        // Return media query comment
                        return "/* " + size + " */\n" + match;

                    // no size mean no comment
                    }else{
                        return match;
                    }

                // SELECTOR COMMENTS *****
                }else{
                    return match;
                }

            });

        }

        return data;

    }


    /* ---------------------------------------------------- */
    /* Getting CSS styles by selector                       */
    /* ---------------------------------------------------- */
    function get_css_by_screensize(size, type) {

        // Default current
        var editorData = '';
        
        // If has type, get data by type
        if(type != null){
            editorData = getStyles(type, false);
        }else{
            editorData = getStyles(null, false);
        }

        if (editorData.length <= 1) {
            return '';
        }

        var totalCreated, selector, comment;

        totalCreated = '';
        var selectorArray = [];

        var styles = findStyle(editorData, "[msize=" + size + "]");
        var childStyles;
        for(var i = 0; i < styles.length; i++){

            selector = esc_data_selector(styles[i]);

            // If only for showing the comment and selector
            if(styles[i].indexOf("[rule=a]") != -1 && ypOption.append_auto_comments == true){
                comment = get_comment(selector, false);
            }else{
                // normal comment
                comment = get_selector_comment(selector);
            }

            if(selectorArray.indexOf(selector) != -1){
                continue;
            }

            if(selector == '' || selector == false || selector == undefined){
                continue;
            }

            // cache for not append again.
            selectorArray.push(selector);

            // No comment if false
            if(comment != false){
                totalCreated += "/* " + comment + " */\n";
            }

            // Tab for selector in media query
            if(size != "desktop" && size != "all" && comment != false){
                totalCreated += "\t";
            }

            totalCreated += selector + "{\r";

            childStyles = findStyle(editorData, "[selector=" + get_id(selector) + "][msize=" + size + "]");

            // Append all rules of selector
            for(var x = 0; x < childStyles.length; x++){
                totalCreated += "\t" + esc_data_content(childStyles[x]) + ';\r';
            }

            totalCreated += "}\r\r";

        }

        return totalCreated;

    }


    /* ---------------------------------------------------- */
    /* Append fastest live css to iframe without edit       */
    /* ---------------------------------------------------- */
    function fastest_live_insert(selector, rule, value, size){

        var mediaBefore = create_media_query_before(size);
        var mediaAfter = create_media_query_after(size);

        // replace important tag.
        value = value.replace(/\s+\![a-zA-Z]{0,9}(\s+)?$/g, "");

        // Append
        if(window.webkitArray.indexOf(rule) != -1){ // Webkit support

            iframeBody.append("<style class='yp-fastest-live-css'>" + mediaBefore + selector + "{" + rule + ":unset !important;" + rule + ":" + value + " !important;-webkit-" + rule + ":" + value + " !important;}" + mediaAfter + "</style>");

        }else if(rule == "justify-content"){

            iframeBody.append("<style class='yp-fastest-live-css'>" + mediaBefore + selector + "{" + rule + ":unset !important;" + rule + ":" + value + " !important;-webkit-box-pack:" + value + " !important;}" + mediaAfter + "</style>");

        }else if(rule == "align-items"){

            iframeBody.append("<style class='yp-fastest-live-css'>" + mediaBefore + selector + "{" + rule + ":unset !important;" + rule + ":" + value + " !important;-webkit-box-align:" + value + " !important;}" + mediaAfter + "</style>");

        }else if(rule == "flex-grow"){

            iframeBody.append("<style class='yp-fastest-live-css'>" + mediaBefore + selector + "{" + rule + ":unset !important;" + rule + ":" + value + " !important;-webkit-box-flex:" + value + " !important;}" + mediaAfter + "</style>");

        }else{ // default

            iframeBody.append("<style class='yp-fastest-live-css'>" + mediaBefore + selector + "{" + rule + ":unset !important;" + rule + ":" + value + " !important;}" + mediaAfter + "</style>");

        }

    }


    /* ---------------------------------------------------- */
    /* Remove fastest live css                              */
    /* ---------------------------------------------------- */
    function fastest_live_remove(){
        iframe.find(".yp-fastest-live-css").remove();
    }


    /* ---------------------------------------------------- */
    /* editable rule value on click - visual manager        */
    /* ---------------------------------------------------- */
    $(document).on("click", ".view-rule-value", function(){

        var text = $(this);
        var input = text.next(".value-input");

        text.hide();

        input.val(text.text()); // set val
        input.css("display", "inline").focus(); // focus
        input[0].setSelectionRange(0, input.val().length); // select

        text.parent().find(".rule-end").css("margin-left", "-12px");

        // update input size
        text.next(".value-input").autoGrowInput();

        if(text.parents(".css-rule-view").hasClass("view-rule-disabled")){
            input.addClass("rule-was-disable");
            text.parents(".css-rule-view").removeClass("view-rule-disabled");
        }

    });


    /* ---------------------------------------------------- */
    /* Rule disable / Enable by click                       */
    /* ---------------------------------------------------- */
    $(document).on("change", ".css-rule-label input", function(){

        var line = $(this).parents(".css-rule-view");

        var valueInput = line.find(".value-input");

        if($(this).is(":checked") == false){
            line.addClass("view-rule-disabled");
            valueInput.val("disable");
        }else{
            var orginValue = valueInput.prev(".view-rule-value").text();
            valueInput.val(orginValue);
        }

        valueInput.trigger("blur");

        if($(this).is(":checked") == true){
            line.removeClass("view-rule-disabled");
        }

    });


    /* ---------------------------------------------------- */
    /* Manage This Type link                                */
    /* ---------------------------------------------------- */
    $(document).on("click", ".manage-this-type", function(){

        var type = $(this).parent().attr("data-value");

        open_visual_manager();
        $("#visual-rule-filter").val(type + ".css").trigger("keyup");

        // close customizing type list
        if($("#customizing-type-list").css("display") == "block"){
            $("#customizing-type-list").toggle();
            $("#customizing-mode,#customizing-type-list").removeClass("active");
            $(".starter-notice").removeClass("padded-starter-notice");
        }

        return false;

    });


    /* ---------------------------------------------------- */
    /* Reset this type link                                 */
    /* ---------------------------------------------------- */
    $(document).on("click", ".reset-this-type", function(){

        var type = $(this).parent().attr("data-value");

        ypMessage({
            title: lang.reset_type_msg.replace("{$1}", type),
            confirmButtonText: lang.reset_btn,
            showCancelButton: true,
            animation: false,
            confirmButtonColor: "#DD6B55",
            customClass: "editor-style editor-style-reset",
            html: true
        },function(isConfirm){

            if(isConfirm == false){
                return false;
            }

            // Process before Set Style
            if (mainBody.hasClass("yp-need-to-process")){
                process();
            }

            setStyles("", type);

            // close customizing type list
            if($("#customizing-type-list").css("display") == "block"){
                $("#customizing-mode,#customizing-type-list").removeClass("active");
                $("#customizing-type-list").toggle();
                $(".starter-notice").removeClass("padded-starter-notice");
            }

            option_change();

        });

        return false;

    });


    /* ---------------------------------------------------- */
    /* Select selector by click in visual manager           */
    /* ---------------------------------------------------- */
    $(document).on("click", ".css-selector-open .selector-view span", function(){

        var selector = $(this).parents(".selector-group").attr("data-view-selector");

        var sameEl = false;
        if(is_content_selected()){
            if(selector == get_current_selector()){
                sameEl = true;
            }
        }

        var selectorTest = get_foundable_query(selector, true,true,true,true);

        if(!sameEl && check_selector(selectorTest,true,false,false) != false){

            // Convert interactives YP selector to default for show.
            selector = selector.replace(/\.(yp_onscreen|yp_focus|yp_hover|yp_click)/g,'');
            selector = selector.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)(.*?)$/g, function(match, contents, offset, input_string){
       
                  var selection = match.match(/\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g)[0].replace(/(body)?\.yp-selector-/g,"");
                  var selector = match.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g, "");
              
                  if(selector[0] != " "){selector = "body" + selector;}
                  selector = selector.trim().replace(/\{/g, ":" + selection);
              
                  return selector;
              
            });

            window.selectedByView = true;
            set_selector(selector, null, true);
            window.selectedByView = false;

            $(".selector-group").removeClass("active");
            $(this).parents(".selector-group").addClass("active");

            // delete focus
            paintCanvas.extra.find(".yp-element-viewer").remove();

        }

        scroll_to_element(null, true);

    });



    /* ---------------------------------------------------- */
    /* Select selector by selector heading click            */
    /* ---------------------------------------------------- */
    $(document).on("click", ".selector-heading span", function(){

        var selector = $(this).parents(".selector-group").attr("data-view-selector");

        var sameEl = false;
        if(is_content_selected()){
            if(selector == get_current_selector()){
                sameEl = true;
            }
        }

        var selectorTest = get_foundable_query(selector, true, true, true, true);

        if(!sameEl && check_selector(selectorTest,true,false,false) != false){

            // Convert interactives YP selector to default for show.
            selector = selector.replace(/\.(yp_onscreen|yp_focus|yp_hover|yp_click)/g,'');
            selector = selector.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)(.*?)$/g, function(match, contents, offset, input_string){
       
                  var selection = match.match(/\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g)[0].replace(/(body)?\.yp-selector-/g,"");
                  var selector = match.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g, "");
              
                  if(selector[0] != " "){selector = "body" + selector;}
                  selector = selector.trim().replace(/\{/g, ":" + selection);
              
                  return selector;
              
            });

            window.selectedByView = true;
            set_selector(selector, null, true);
            window.selectedByView = false;

            $(".selector-group").removeClass("active");
            $(this).parents(".selector-group").addClass("active");

            // delete focus
            paintCanvas.extra.find(".yp-element-viewer").remove();

        }

        scroll_to_element(null, true);

    });


    /* ---------------------------------------------------- */
    /* Focus to element on selector heading hover           */
    /* ---------------------------------------------------- */
    $(document).on("mouseover", ".selector-heading span", function(){

        var el = $(this);

        window.focusDelay = setTimeout(function(){

            var selector = el.parents(".selector-group").attr("data-view-selector");

            selector = get_foundable_query(selector,true,true,true,true);

            if(selector.trim() == "*"){
                return false;
            }

            var element = check_selector(selector,true,false,false);

            // stop if not valid or not have on the page
            if(element == false){
                return false;
            }

            element_focus(element);

        }, 200);

    });


    /* ---------------------------------------------------- */
    /* Animation manager, Aim icon click                    */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-anim-el-column > i", function(){

        var selector = $(this).attr("data-title");

        var sameEl = false;
        if(is_content_selected()){
            if(selector == get_current_selector()){
                sameEl = true;
            }
        }

        var selectorTest = get_foundable_query(selector, true, true, true, true);

        if(!sameEl && check_selector(selectorTest,true,false,false) != false){

            // Convert interactives YP selector to default for show.
            selector = selector.replace(/\.(yp_onscreen|yp_focus|yp_hover|yp_click)/g,'');
            selector = selector.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)(.*?)$/g, function(match, contents, offset, input_string){
       
                  var selection = match.match(/\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g)[0].replace(/(body)?\.yp-selector-/g,"");
                  var selector = match.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g, "");
              
                  if(selector[0] != " "){selector = "body" + selector;}
                  selector = selector.trim().replace(/\{/g, ":" + selection);
              
                  return selector;
              
            });

            window.selectedByView = true;
            set_selector(selector, null, true);
            window.selectedByView = false;

            $(".selector-group").removeClass("active");
            $(this).parents(".selector-group").addClass("active");

            // delete focus
            paintCanvas.extra.find(".yp-element-viewer").remove();

        }

        scroll_to_element(null, true);

    });

    /* ---------------------------------------------------- */
    /* focus to element on selector for animation manager   */
    /* ---------------------------------------------------- */
    $(document).on("mouseover", ".yp-anim-el-column > i", function(){

        var el = $(this);
        window.focusDelay = setTimeout(function(){

            var selector = el.attr("data-title");

            selector = get_foundable_query(selector,true,true,true,true);

            if(selector.trim() == "*"){
                return false;
            }

            // check and get element
            var element = check_selector(selector,true,false,false);

            // stop if selector not valid or not have on the page
            if(element == false){
                return false;
            }

            element_focus(element);

        }, 200);

    });


    /* ---------------------------------------------------- */
    /* Delete focus on selector heading mouseout            */
    /* ---------------------------------------------------- */
    $(document).on("mouseleave mouseout", ".selector-heading span, .css-selector-open .selector-view span,.yp-anim-el-column > i", function(){

        clearTimeout(window.focusDelay);

        // delete focus
        paintCanvas.extra.find(".yp-element-viewer").remove();

    });


    /* ---------------------------------------------------- */
    /* focus to element on selector heading hover           */
    /* ---------------------------------------------------- */
    $(document).on("mouseover", ".css-selector-open .selector-view span", function(){

        var el = $(this);
        window.focusDelay = setTimeout(function(){

            var selector = el.parents(".selector-group").attr("data-view-selector");

            selector = get_foundable_query(selector,true,true,true,true);

            if(selector.trim() == "*"){
                return false;
            }

            var element = check_selector(selector,true,false,false);

            if(element == false){
                return false;
            }

            element_focus(element);

        }, 200);

    });



    /* ---------------------------------------------------- */
    /* Show selector in CSS editor when click source view   */
    /* ---------------------------------------------------- */
    $(document).on("click", ".source-view", function(){

        // get type from text
        var type = $(this).text().replace(/.css/g, "");

        // disable
        window.disable_auto_insert = true;

        // check css editor is active
        if (mainBody.hasClass("yp-css-editor-active") == false) {

            // Open if hidden
            $(".css-editor-btn").trigger("click");

        }

        // stop editor_update 
        window.sourceViewClick = true;

        // active type
        $("#customizing-type-list li[data-value='"+type+"']").trigger("click");

        // back to default
        window.sourceViewClick = false;

        // Get editor data from ace editor if open                            
        var cssData = get_clean_css(true, null, true);

        // enable again.
        window.disable_auto_insert = false;

        var group = $(this).parents(".selector-group");

        // Getting breakpoint query
        var selector = group.attr("data-view-selector") + "{";

        // check media
        var media = group.attr("data-view-size");

        if(media != "desktop"){
            selector = "\t" + group.attr("data-view-selector") + "{";
        }

        // Find media start line
        var matchLine = cssData.split(selector)[0];
        var goToLine = matchLine.split(/\r\n|\r|\n/).length;
        
        // Delay
        setTimeout(function(){

            // Scroll to line
            editor.focus();
            editor.scrollToLine(goToLine, true, false);

            if(media != "desktop"){
                editor.gotoLine(goToLine, 1, true);
            }else{
                editor.gotoLine(goToLine, 0, true);
            }

        },4);

    });


    /* ---------------------------------------------------- */
    /* Blur rule value in visual manager                    */
    /* ---------------------------------------------------- */
    $(document).on("blur", ".css-rule-view .value-input", function(e){

        var input = $(this);
        var line = input.parents(".css-rule-view");
        var group = input.parents(".selector-group");
        var value = input.val();
        var text = input.prev();

        input.hide();
        input.removeClass("rule-was-disable");

        text.parent().find(".rule-end").removeAttr("style");

        // replace last ; symbol
        value = value.replace(/\;$/i, "");

        // remove
        if(value.length == 0){
            value = "disable";
        }

        // remove line dynamically
        if(value == "disable" && line.hasClass("view-rule-disabled") == false){

            if(input.parents(".selector-group").find(".css-rule-view").length == 1){

                input.parents(".selector-group").css("background-color", "#A43A3A");
                input.parents(".selector-group").delay(100).slideUp(300);

                setTimeout(function(){
                    input.parents(".selector-group").remove();
                }, 420);

            }else{

                input.parents(".css-rule-view").css("background-color", "#A43A3A").delay(80).slideUp(200);

                setTimeout(function(){
                    input.parents(".css-rule-view").remove();
                }, 300);

            }

        }

        // Getting information
        var selectorv = group.attr("data-view-selector");
        var sizev = group.attr("data-view-size");
        var typev = group.attr("data-view-type");

        var rulev = line.attr("data-view-rule");
        var valuev = value.trim();

        // dont insert if empty or same.
        if(value.length == 0){
            text.show();
            return true;
        }

        if(value == text.text() && line.hasClass("view-rule-disabled") == false){
            text.show();
            return true;
        }

        // update text
        if(line.hasClass("view-rule-disabled") == false){
            text.text(value).show();
        }else{
            text.show();
        }

        if(e.originalEvent){
            line.find(".css-rule-label input").prop('checked', true);
        }

        // delete live here
        fastest_live_remove();

        // delete old same style (normal)
        setStyles(removeStyle(getStyles(typev, false), "[selector=" + get_id(selectorv) + "][rule=" + rulev + "][msize=" + sizev + "]"), typev);

        // delete old same style (webkit)
        setStyles(removeStyle(getStyles(typev, false), "[selector=" + get_id(selectorv) + "][rule=" + get_webkit_property(rulev) + "][msize=" + sizev + "]"), typev);

        // Edited by review changes
        window.editedByReview = true;

        // Variable, this index
        var insertIndex = null, firstActiveLine, firstRulev, UsedIndex, lineIndex;

        // Get Index
        firstActiveLine = group.find(".css-rule-view:not(.view-rule-disabled)").not(line).first();
        
        // If has
        if(firstActiveLine.length > 0){

            // Default first active
            firstRulev = firstActiveLine.attr('data-view-rule');
            insertIndex = getIndex(getStyles(typev, false), "[selector=" + get_id(selectorv) + "][rule=" + firstRulev + "][msize=" + sizev + "]");
            
            // Get indexes
            UsedIndex = (firstActiveLine.prevAll(".css-rule-view:not(.view-rule-disabled)").length);
            lineIndex = (line.prevAll(".css-rule-view:not(.view-rule-disabled)").length);

            // lineIndex > UsedIndex
            if(lineIndex >= UsedIndex){
                insertIndex = insertIndex + (lineIndex - UsedIndex);
            }

        }

        // Apply the change
        insert_rule(selectorv, rulev, valuev, "", sizev, typev, insertIndex);

        // undoable.
        option_change();

        window.editedByReview = false;

    });

    
    /* ---------------------------------------------------- */
    /* Editing rule value in visual manager                 */
    /* ---------------------------------------------------- */
    $(document).on("keyup", ".css-rule-view .value-input", function(e){

        var code = e.keyCode || e.which;

        var input = $(this);
        var line = input.parents(".css-rule-view");
        var group = input.parents(".selector-group");
        var value = input.val();
        var text = input.prev();

        var rulev = line.attr("data-view-rule");

        // delete live css
        fastest_live_remove();

        // enter
        if(code == 13){

            line.find(".css-rule-label input").prop('checked', true);
            input.trigger("blur");
            return false;
        }

        if(code == 27){

            input.val(text.text());

            if(input.hasClass("rule-was-disable")){
                line.addClass("view-rule-disabled");
                input.removeClass("rule-was-disable");
            }

            input.trigger("blur");
            return false;
        }

        // Getting information
        var selectorv = group.attr("data-view-selector");
        var sizev = group.attr("data-view-size");

        var valuev = value.replace(/\;$/i, "").trim(); // replace last ; symbol

        // remove
        if(value.length == 0){
            return true;
        }

        // insert live css on keyup
        fastest_live_insert(selectorv, rulev, valuev, sizev);

    });
    

    $("#visual-css-content").scroll(function(){

        if($(this).scrollTop() > 0){
            $("#visual-css-view").addClass("view-scrolled");
        }else{
            $("#visual-css-view").removeClass("view-scrolled");
        }

    });

    
    /* ---------------------------------------------------- */
    /* Active the current element in visual manager         */
    /* ---------------------------------------------------- */
    function active_view_group(noAnim){

        // update filter content
        $("#visual-rule-filter").trigger("keyup");

        if(window.selectedByView || $("#visual-rule-filter").val() == "matched" || mainBody.hasClass("visual-css-view-active") == false){
            return false;
        }

        if($("#visual-css-view").css("display") == "block" && is_content_selected() == true){

            var selector = get_current_selector();
            selector = get_foundable_query(selector, true,true,true,true);

            var activeGroup = $(".selector-group[data-clean-selector='"+selector+"']");

            if(activeGroup.length > 0){

                $(".selector-group.active").removeClass("active");

                activeGroup.addClass("active");

                var scrollT = activeGroup.last().offset().top + $("#visual-css-content").scrollTop() - 50;
                if(scrollT < 0){
                    scrollT = 0;
                }

                if(noAnim !== true){
                    $("#visual-css-content").stop().animate({scrollTop:scrollT}, 500, 'swing');
                }else{
                    $("#visual-css-content").scrollTop(scrollT);
                }

            }

        }

    }


    var lastValue = "";
    $(document).on("keyup keydown", "#visual-rule-filter", function(e){

        // variables
        var input, filter, container, items, item, currentSelector = null, matches;

        input = $(this);
        filter = input.val().toLowerCase().trim();
        container = $("#visual-css-content");

        // all items
        items = container.find(".selector-group");

        // dont show active on matched filter
        if(filter == "matched"){
            $(".selector-group.active").removeClass("active").removeClass("active-view-group");
        }

        if(filter.length > 0 && lastValue != filter){
            container.scrollTop(0);
        }

        lastValue = filter;

        // get selector
        if(is_content_selected()){
            currentSelector = get_current_selector();
        }

        // find
        items.each(function(){
                
            item = $(this);

            // global, single template search
            if(filter == "single.css" || filter == "template.css" || filter == "global.css"){
                if(item.attr("data-view-type").toLowerCase() == filter.replace(/\.css/g, "").trim()){
                    item.addClass("selector-group-visible");
                }else{
                    item.removeClass("selector-group-visible");
                }

            // basic text search
            } else if(filter != "matched"){

                if(item.text().toLowerCase().indexOf(filter.trim()) != -1){
                    item.addClass("selector-group-visible");
                }else{
                    item.removeClass("selector-group-visible");
                }

            // advanced match selectors
            }else if(filter == "matched" && currentSelector != null){

                matches = check_selector(item.attr("data-clean-selector"), true, false, false);

                if(matches == false){

                    item.removeClass("selector-group-visible");

                }else{

                    if(matches.hasClass("yp-selected")){
                        item.addClass("selector-group-visible");
                    }else{
                        item.removeClass("selector-group-visible");
                    }

                }

            }else{
                item.removeClass("selector-group-visible");
            }

        });

        // Show no found message
        if($(".selector-group-visible").length == 0){

            $("#view-no-item span").removeClass("view-hand-icon");

            // count visible results
            if(filter == "matched"){
                if(is_content_selected()){
                    $("#view-no-item p").text(lang.manager_msg1);
                }else{
                    $("#view-no-item span").addClass("view-hand-icon");
                    $("#view-no-item p").text(lang.manager_msg2);
                }
            }else if(filter == "single.css"){
                $("#view-no-item p").text(lang.manager_msg3);
            }else if(filter == "template.css"){
                $("#view-no-item p").text(lang.manager_msg4);
            }else if(filter == "global.css"){
                $("#view-no-item p").text(lang.manager_msg5);
            }else if(filter.indexOf("(max-width:") != -1 || filter.indexOf("(max-width:") != -1){
                $("#view-no-item p").text(lang.manager_msg6);
            }else if(filter != ""){
                $("#view-no-item p").text(lang.manager_msg7);
            }else{
                $("#view-no-item p").text(lang.manager_msg8);
            }

            // show message
            $("#view-no-item").show();
            $(".view-information").text("").hide();

        }else{

            // hide if have
            $("#view-no-item").hide();

            if(filter == ""){
                $(".view-information").text(lang.manager_msg9).show();
            }else if(filter == "matched"){
                $(".view-information").text(lang.manager_msg10).show();
            }else if(filter == "single.css"){
                $(".view-information").text(lang.manager_msg11).show();
            }else if(filter == "template.css"){
                $(".view-information").text(lang.manager_msg12).show();
            }else if(filter == "global.css"){
                $(".view-information").text(lang.manager_msg13).show();
            }else if(filter.indexOf("(max-width:") != -1 || filter.indexOf("(max-width:") != -1){
                $(".view-information").text(lang.manager_msg14).show();
            }else{
                $(".view-information").text("").hide();
            }

        }

        reorganize_visual_manager();

        viewScroll.update();

    });


    function reorganize_visual_manager(){

        $(".view-children-group").removeClass("view-children-group");

        if($("#visual-rule-filter").val() != "single.css" && $("#visual-rule-filter").val() != "template.css" && $("#visual-rule-filter").val() != "global.css"){
        
            var selectorArray = [];

            $(".selector-group.selector-group-visible").each(function(){

                var mainGroup = $(this);
                var selector = mainGroup.attr("data-view-selector");

                // cache
                if(selectorArray.indexOf(selector) != -1){
                    return true;
                }

                // push
                selectorArray.push(selector);

                $(".selector-group.selector-group-visible[data-view-selector='"+selector+"']").not(this).each(function(){

                    mainGroup.after($(this).addClass("view-children-group"));

                });

            });

        }

        $(".selector-group").removeClass("first-child last-child");
        $(".selector-group:visible").first().addClass("first-child");
        $(".selector-group:visible").last().addClass("last-child");

    }
    

    $(".yp-button-manage").click(function(){
        open_visual_manager();
        $("#visual-rule-filter").trigger("keyup");
    });


    $(".visual-manager-close").click(function(){
        close_visual_manager();
    });

    function open_visual_manager(){

        update_visual_view();

        $("#visual-css-content").scrollTop(0);

        mainBody.addClass("visual-css-view-active yp-clean-look-manual");

        $(".selector-group").removeClass("first-child last-child");
        $(".selector-group:visible").first().addClass("first-child");
        $(".selector-group:visible").last().addClass("last-child");

        // scroll to active
        if(is_content_selected()){
            active_view_group(true);
        }

        // uses same size with right panel if right panel is fixed
        if(mainBody.hasClass("yp-fixed-right-panel") && read_cookie("visualManagerWidth") == 288){
            
            // delete old
            $("#visual-manager-personalized-view").remove();

            // update
            mainBody.append("<style id='visual-manager-personalized-view'>#visual-css-view{width:"+parseInt($(".yp-select-bar").width())+"px !important;}</style>");

        }

        draw_iframe();
        draw();

    }


    /* ---------------------------------------------------- */
    /* Event on Close Visual CSS Manager                    */
    /* ---------------------------------------------------- */
    function close_visual_manager(){

        if(!mainBody.hasClass("visual-css-view-active")){
            return false;
        }

        $("#visual-rule-filter").val("");

        mainBody.removeClass("visual-css-view-active yp-clean-look-manual");

        draw_iframe();
        draw();

        insert_default_options();

    }



    /* ---------------------------------------------------- */
    /* Updating Visual CSS Manager                          */
    /* ---------------------------------------------------- */
    function update_visual_view(){

        // get types
        var types = ["global", "template", "single"];

        // variables
        var generatedMarkup = '<p class="view-information" style="display:none;"></p><div id="view-no-item" style="display:none;"><span></span><p></p></div>';

        var selector, cleanSelector, data, childStyles, selectorOR, heading, invalidGroup;
        var size, selectorArray, styles, allStyles, mediaArray, sizeView, typeView, cssContent, rule, value, activeGroup, sizeTitle, processedMedia,multipleSizeClass;

        // each types
        for(var i = 0; i < types.length; i++){

            // get type data
            data = getStyles(types[i], false);

            // skip
            if (data.length <= 1) {
                continue;
            }

            // to find media queries
            allStyles = findStyle(data, "[style]");

            // if has style
            if (allStyles.length == 0) {
                continue;
            }

            // array of all media of the current type
            mediaArray = ["desktop"];

            // getting media queries
            for(var s = 0; s < allStyles.length; s++){

                size = /\[msize\=(.*?)\]/g.exec(allStyles[s])[1];

                if ($.inArray(size, mediaArray) === -1 && size != 'desktop') {
                    mediaArray.push(size);
                }

            }

            var currentSelector = null;
            if(is_content_selected()){
                currentSelector = get_current_selector();
            }

            // update media queries as the best
            $.each(mediaArray, function(index, size) {

                if (size == 'tablet') {
                    size = '(min-width: 768px) and (max-width: 991px)';
                }

                if (size == 'mobile') {
                    size = '(max-width:767px)';
                }

                multipleSizeClass = "";
                if(size.indexOf("and") != -1){
                    multipleSizeClass = " disabled-media-line";
                }

                //  update size view
                sizeView = size.replace(/desktop/i, lang.all_devices);
                typeView = types[i];

                // process Size
                processedMedia = process_media_query(size);

                // be sure its valid
                if(isDefined(processedMedia)){

                    // Convert to string
                    processedMedia = processedMedia.toString();

                    // more understandable title
                    if(processedMedia.indexOf(",") == -1){
                        sizeTitle = processedMedia.replace(/([^\d+])(\d+)/g, "$2$1").replace(/\</g,' and below').replace(/\>/g,' and above').replace(/\.\d+/g, "").replace(/(\d+)(\s|$)/g, "$1px$2") + " screen sizes";
                    }else{
                        sizeTitle = "screen sizes " + processedMedia.replace(/\</g,'smaller than ').replace(/\>/g,'larger than ').replace(/\,/g,' and ').replace(/\.\d+/g, "").replace(/(\d+)(\s|$)/g, "$1px$2");
                    }

                }else{
                    sizeTitle = "Unknown Media Query";
                }

                // selector limit only for same type
                selectorArray = [];

                // getting styles by size
                styles = findStyle(data, "[msize=" + size + "]");

                // each all styles
                for(var si = 0; si < styles.length; si++){

                    selectorOR = esc_data_selector(styles[si]);

                    // Convert interactives YP Styles to default for show.
                    styles[si] = styles[si].replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)(.*?){/g, function(match, contents, offset, input_string){
       
                          var selection = match.match(/\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g)[0].replace(/(body)?\.yp-selector-/g,"");
                          var selector = match.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g, "");
                      
                          if(selector[0] != " "){selector = "body" + selector;}
                          selector = selector.trim().replace(/\{/g, ":" + selection) + "{";
                      
                          return selector;
                      
                    });

                    // espace selector
                    selector = esc_data_selector(styles[si]);

                    // skip if selector already inserted
                    if(selectorArray.indexOf(selector) != -1 || selector == undefined || selector == false || selector == ""){
                        continue;
                    }

                    // cache for not append again.
                    selectorArray.push(selector);

                    activeGroup = "";
                    if(currentSelector == selector){
                        activeGroup = " active-view-group";
                    }

                    // clean selector as well
                    cleanSelector = get_foundable_query(selectorOR, true,true,true,true);

                    // Get heading from element
                    heading = get_comment(selector, true);
                    invalidGroup = "";

                    // get heading from selector if element not avaiable.
                    if(check_selector(cleanSelector,true,false,false) == false){
                        invalidGroup = " unavailable-view-group";
                    }

                    // group open
                    generatedMarkup += "<div class='selector-group selector-group-visible" + activeGroup + "" + invalidGroup + "' data-view-selector='"+selectorOR+"' data-clean-selector='"+cleanSelector+"' data-view-size='"+size+"' data-view-type='"+types[i]+"'>";

                    // selector heading
                    generatedMarkup += "<div class='selector-heading'><span></span><input type='text' value='" + heading + "' class='selector-comment-input' maxlength='70' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' /></div>";

                    generatedMarkup += "<div class='view-before-selector'><div class='view-media-line"+multipleSizeClass+"' title='"+sizeTitle+"'>"+sizeView+"</div><span class='source-view'>"+typeView+".css</span><div class='yp-clear'></div></div>";
                    // full selector
                    generatedMarkup += "<div class='css-selector-open'><span class='selector-view'><span>" + selector + "</span><i>{</i></span></div>";

                    // css rule group begin
                    generatedMarkup += "<div class='css-rule-group'>";

                    // finding child styles
                    childStyles = findStyle(data, "[selector=" + get_id(selectorOR) + "][msize=" + size + "]");

                    // Append all rules of selector
                    for(var x = 0; x < childStyles.length; x++){

                        // parsing CSS rule
                        cssContent = /^(.*?):(.*?)$/i.exec(esc_data_content(childStyles[x]));

                        // skip if no content, not valid.
                        if(cssContent == null){
                            continue;
                        }

                        rule = cssContent[1];

                        // dont append webkit rules
                        if(rule.indexOf("-webkit-") != -1){
                            continue;
                        }

                        value = cssContent[2];

                        // append rule
                        generatedMarkup += '<div class="css-rule-view" data-view-rule="'+rule+'"><label class="css-rule-label"><input type="checkbox" checked="checked"><span class="rule-checkbox"></span><span class="view-rule">' + rule + ':</span></label><span class="view-rule-value">' + value + '</span><input class="value-input" type="text" /><span class="rule-end">;</span></div>';

                    }

                    // css rule group end
                    generatedMarkup += "</div>";

                    // css selector close
                    generatedMarkup += "<div class='css-selector-close'>}</div>";

                    // group close
                    generatedMarkup += "</div>";

                }

            });

        }

        $("#visual-css-content").html(generatedMarkup);

        if($(".selector-group").length == 0 && $("#visual-rule-filter").val() == ""){
            $("#view-no-item p").text(lang.manager_msg15);
            $("#view-no-item").show();
            return false;
        }

        reorganize_visual_manager();

        setTimeout(function(){
            viewScroll.update();
        }, 2);

        // add current type to visual css view parent container as attr
        $("#visual-css-view").attr("data-current-type", get_active_type());

        // destroy old tooltips
        $(".view-media-line").tooltip("destroy");

        // update tooltips
        $(".selector-group:not([data-view-size='desktop']) .view-media-line").tooltip({
            animation: false,
            template: '<div class="tooltip small-tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
            container: '#visual-css-content',
            delay: { show: 50, hide: 0 }
        });

    }


    /* ---------------------------------------------------- */
    /* Getting all CSS selectors in stylesheets             */
    /* ---------------------------------------------------- */
    function get_all_selectors(type){

        // Get data
        var source = get_clean_css(false, type, false);

        // Minimize CSS
        source = get_minimized_css(source, false);

        // Stop if not have any data.
        if (source == '') {
            return false;
        }

        // Stop if have any conflict in CSS
        if (source.split('{').length != source.split('}').length) {
            return false;
        }

        // outing media content and delete @media group
        source = source.replace(/@media(.*?){(.*?)}}/g,"$2}");

        // Create object
        var data = {};

        // Getting All CSS Selectors.
        data.selectors = source.replace(/\{(.*?)\}/g, '|BREAK|').split("|BREAK|");

        // Getting All CSS rules.
        data.rules = source.match(/\{(.*?)\}/g);

        // return
        return data;

    }


    /* ---------------------------------------------------- */
    /* Resetting selected element                           */
    /* ---------------------------------------------------- */
    function reset_selected_element(childs, type){

        // If not have an selected element
        if(!is_content_selected()){
            return false;
        }

        // Selectors
        var array = get_all_selectors(type).selectors;

        // If not have any selectors
        if(array != false && array != undefined && array.length > 0){

            // Getting curretn selector
            var thisSelector, thisElement;
            var styleData = getStyles(type, false);

            // Clean falses
            array = array.filter(Boolean);

            // Each all selectors
            for(var i = 0; i < array.length; i++){

                // loop selector
                thisSelector = get_foundable_query(array[i],true,true,true,true);
                thisElement = check_selector(thisSelector,true,false,false);

                // skip if selector is invalid
                if(thisElement == false){
                    continue;
                }

                // if children reset
                if(childs === true){

                    // Filter only childrens
                    if(iframe.find(thisSelector).parents(".yp-selected").length == 0){
                        continue;
                    }

                }else{

                    // check if selector not match with target element
                    if(iframe.find(thisSelector).hasClass("yp-selected") == false){
                        continue;
                    }

                }

                // remove
                styleData = removeStyle(styleData, "[selector=" + get_id(get_native_selector(array[i])) + "]");

            }

            // updata data
            setStyles(styleData, type);

            // Update
            option_change();

            // Set && update        
            insert_default_options();

        }

    }


    /* ---------------------------------------------------- */
    /* Find Child elements & focus                          */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter mouseover", ".yp-contextmenu-reset-single-childs,.yp-contextmenu-reset-template-childs,.yp-contextmenu-reset-global-childs", function(){

        // Type of current hover
        var thisType = $(this).attr("class").match(/yp-contextmenu-reset-(.*?)-childs/g)[0].replace(/(yp-contextmenu-reset-|-childs)/g, "").trim();

        // Selectors
        var array = get_all_selectors(thisType).selectors;

        // Array of selector
        var selectorArray = [];

        // If not have any selectors
        if(array != false && array != undefined && array.length > 0){

            // Clean falses
            array = array.filter(Boolean);

            // Getting curretn selector
            var thisSelector, thisElement;

            // Each all selectors
            for(var i = 0; i < array.length; i++){

                // loop selector
                thisSelector = get_foundable_query(array[i],true,true,true,true);
                thisElement = check_selector(thisSelector,true,false,false);

                // skip if selector is invalid
                if(thisElement == false){
                    continue;
                }

                // Filter only childrens
                if(iframe.find(thisSelector).parents(".yp-selected").length > 0){
                    selectorArray.push(thisElement); // Only in elements
                }

            }

            // Show All
            if(selectorArray.length > 0){
                element_focus($(selectorArray));
            }

        }

    });


    /* ---------------------------------------------------- */
    /* CleanUp focus from Child elements                    */
    /* ---------------------------------------------------- */
    $(document).on("mouseleave mouseout", ".yp-contextmenu-reset-single-childs,.yp-contextmenu-reset-template-childs,.yp-contextmenu-reset-global-childs", function(){

        paintCanvas.extra.find(".yp-element-viewer").remove();

    });

    
    /* ---------------------------------------------------- */
    /* Toggle background image show element                 */
    /* ---------------------------------------------------- */
    $("#background-image-group .yp-none-btn,#background-image-group .yp-disable-btn").click(function(e) {
        if(e.originalEvent){
            $("#background-image-group .yp-background-image-show").toggle();
        }
    });


    /* ---------------------------------------------------- */
    /* Fix box shadow inset option                          */
    /* ---------------------------------------------------- */
    $("#box-shadow-inset-group .yp-disable-btn").click(function(e) {
        if(e.originalEvent){
            $("#box-shadow-inset-inset").parent().removeClass("active");
            $("#box-shadow-inset-no").parent().addClass("active");
        }
    });


    /* ---------------------------------------------------- */
    /* Remove disable button if inset no selected           */
    /* ---------------------------------------------------- */
    $("#box-shadow-inset-no").click(function(e) {
        if(e.originalEvent){
            $("#box-shadow-inset-group").removeClass("reset-enable");
        }
    });


    /* ---------------------------------------------------- */
    /* Getting duration MS from CSS Duration                */
    /* ---------------------------------------------------- */
    function duration_ms(durations){

        durations = durations.toString();
        durations = durations.replace(/ms/g,"");

        // result
        var duration = 0;
        var ms;

        // Is multi durations?
        if(durations.indexOf(",") != -1){

            var durationsArray = durations.split(",");

            for(var i = 0; i < durationsArray.length; i++){

                var val = durationsArray[i];
                
                // Has dot?
                if(val.indexOf(".") != -1){

                    ms = parseFloat(val).toString().split(".")[1].length;
                    val = val.replace(".","").toString();

                    if(ms == 2){
                        val = val.replace(/s/g, "0");
                    }else if(ms == 1){
                        val = val.replace(/s/g, "00");
                    }

                }else{
                    val = val.replace(/s/g, "000");
                }

                duration = parseFloat(duration) + parseFloat(val);

            }

            return duration;

        }else{

            // Has dot?
            if(durations.indexOf(".") != -1){

                ms = parseFloat(durations).toString().split(".")[1].length;
                durations = durations.replace(".","").toString();

                if(ms == 2){
                    durations = durations.replace(/s/g, "0");
                }else if(ms == 1){
                    durations = durations.replace(/s/g, "00");
                }

            }else{
                durations = durations.replace(/s/g, "000");
            }

            return durations;

        }

    }


    /* ---------------------------------------------------- */
    /* Get inserted style by selector and rule              */
    /* ---------------------------------------------------- */
    function get_applied_style_data(selector, css, options){

        // Getting default selector
        if(selector == null){
            selector = get_current_selector();
        }

        // CleanUp selector
        selector = get_foundable_query(selector, true, true, true);

        // Adds selection
        var selection = "";
        if(mainBody.hasAttr("data-yp-selector")){
            selection = mainBody.attr("data-yp-selector");
            selector = selector + selection;
        }

        // Converts to native selector
        selector = get_native_selector(selector);

        // Perspective
        if(css == "perspective" && get_selected_element().parent().length > 0){
            selector = get_parents(get_selected_element().parent(), "defaultNoCache");
        }

        // options
        var check = options[1];
        var returnSize = options[2];
        var comparisonSelector = options[3];

        var value, deferred;


        // css rules
        var cssOriginal = css;
        var css2 = get_css_id(css)[1];
        css = get_css_id(css)[0];

        // Special check for Animation Generator
        if(is_animate_creator()){

            // Get active scene
            var activeScene = $(".scene-active").attr("data-scene");

            // Check if there is a data in current scene by this CSS Rule.
            var style = iframe.find("#yp-anim-scenes #" + activeScene + " " + 'style[data-rule="'+css+'"]');

            // get value
            if(style.length > 0){
                value = esc_data_value(style.html());
            }

            // if check mode
            if(check){

                // no style
                if(style.length == 0){

                    $("#" + cssOriginal + "-group").removeClass("reset-enable");
                    return false;

                // have style
                }else{

                    // Check if CSS part included to value.
                    if(css2 != null && css != 'box-shadow'){

                        // clean all empty values.
                        value = value.replace(/(scale\(1\)|rotate\(0deg\)|rotatex\(0deg\)|rotatey\(0deg\)|rotatez\(0deg\)|translatex\(0px\)|translatey\(0px\)|skewx\(0deg\)|skewy\(0deg\)|blur\(0px\)|brightness\(1\)|contrast\(1\)|grayscale\(0\)|hue-rotate\(0deg\)|saturate\(1\)|sepia\(0\))/gi, '');
                        
                        if(new RegExp(css2+"\\(", "gi").test(value) == false){
                            $("#" + cssOriginal + "-group").removeClass("reset-enable");
                            return false;
                        }

                    }

                    // box shadow undo button checks
                    if(box_shadow_check(css, css2, selector + "{" + css + ":" + value + "}", check) != false){
                        $("#" + cssOriginal + "-group").removeClass("reset-enable");
                        return false;
                    }

                    // if pass, true.
                    return true;

                }

            }

            // Stop
            if(!value){
                return false;
            }

            // deferred because Firefox bug.
            deferred = jQuery.Deferred();

            // Finds which selector work and get valuewith CSS Testing.
            if(returnSize == false){
                deferred.resolve(value);
            }else{
                deferred.resolve("all");
            }

            // return promise.
            return deferred.promise();

        }

        // Using this CSS to find which CSS selector works.
        var fakeCSS = 'outline';
        var fakeCSSOut = 'outline-width';

        // To get css value
        var CSSRegExp = new RegExp("(\{|\s+|\;)"+css+"(\s+)?:");

        // Default variables
        var size, data, mediaData, groups, thisSelector, find, thisValue, mediaGroups, contentRules, specificityId;

        var resultSizeArray = [];
        var resultDataArray = [];

        if(iframe.find("#yp-live-css-data").length > 0){

            // CSS Styles
            data = iframe.find("#yp-live-css-data").html();

            // all data
            mediaData = get_minimized_css(data, false);

            // Espace media queries
            data = get_minimized_css(data, true);

            // CSS groups
            groups = data.split("}");

            // Default all
            size = 'all';

            // Each groups
            $.each(groups, function(index, group){

                group += "}";

                // if target CSS not have.
                if(CSSRegExp.test(group) == false){
                    return true;
                }

                // Getting group content
                var content = group.match(/\{(.*?)\}$/m)[0].toString().replace(/(^\{|\}$)/g,'').trim();

                // Getting rules
                contentRules = array_cleaner(content.split(";"));

                // each rules
                $.each(contentRules, function(i,v){

                    if(v == ''){
                        return true;
                    }

                    // update value
                    if(v.split(":")[0].toString().trim() == css){

                        thisValue = v.replace(/^(.*?):(.*?)$/g, "$2").trim();

                    }

                });

                // Get Selector
                thisSelector = esc_data_selector(group);

                // skip if selector is invalid
                if(check_selector(thisSelector,true,false,false) == false){
                    return true;
                }

                // Comparison Selector
                if(comparisonSelector == true){
                    if(comparison_selector(selector, thisSelector) == false){
                        return true;
                    }
                }

                // This Selector
                find = iframe.find(thisSelector);

                // igrone if not selecting same elements
                if(find.hasClass("yp-selected") == false && css != "perspective"){
                    return true;
                }

                if(css == "perspective" && find.is(get_selected_element().parent()) == false){
                    return true;
                }

                if($('body').hasAttr('data-yp-selector') == true && thisSelector.indexOf(".yp-selector-") == -1){
                    return true;
                }

                // Check if CSS part included to value.
                if(css2 != null && css != 'box-shadow'){
                    if(new RegExp(css2+"\\(", "gi").test(thisValue) == false){
                        return true;
                    }
                }

                // box shadow undo button checks
                if(box_shadow_check(css, css2, thisSelector + "{" + css + ":" + thisValue + "}", check) != false){
                    return true;
                }

                // Append Value
                resultSizeArray.push(size);

                // Append Data
                resultDataArray.push(thisSelector + "{" + css + ":" + thisValue + "}");

            });

            // Media matching section start ---- 
            mediaGroups = mediaData.match(/@media(.*?){(.*?)}}/g);

            // Checks is valid
            if(mediaGroups != null){

                // Each groups
                $.each(mediaGroups, function(index, Mediagroup){

                    // Get media size
                    size = $.trim(Mediagroup.match(/@media(.*?){/g).toString().replace(/(\{|@media(\s+)?)/g,''));

                    // If media not match, igrone
                    if(!iframeContentWindow.matchMedia(size).matches){
                        return true;
                    }

                    // No media on all option
                    if($(".property-size-tabs-visible .property-size.active").attr("data-property-size") == "all"){
                        return true;
                    }

                    // Only current media if propery query active
                    if(mainBody.hasClass("property-query-active") == true && $(".property-size-tabs-visible .property-size.active").length > 0 && is_responsive_mod()){

                        // if not "all"
                        if($(".property-size-tabs-visible .property-size.active").attr("data-property-size") != "all"){

                            // process media
                            var processMedia = process_media_query(size);

                            // if valid 
                            if(isDefined(processMedia)){

                                // if not same
                                if(processMedia.toString() != $(".property-size-tabs-visible .property-size.active").attr("data-property-size")){
                                    return true;
                                }

                            }

                        }

                    // is responsive mod and have active breakpoint
                    }else if($(".breakpoint-bar .active").length > 0 && is_responsive_mod()){

                        // process media
                        var processMedia = process_media_query(size);
                        var processMedia2 = process_media_query($(".breakpoint-bar .active").attr("data-media-content"));

                        // if valid 
                        if(isDefined(processMedia) && isDefined(processMedia2)){

                            // this size must be same with active breakpoint size
                            if(processMedia.toString() != processMedia2.toString()){
                                return true;
                            }

                        }

                    }else if(is_responsive_mod() && $(".breakpoint-bar .active").length == 0){

                        // No Media
                        return true;

                    }

                    // clean up media queries from groups
                    Mediagroup = Mediagroup.match(/\{(.*?)\}$/g)[0].toString().replace(/(^\{|\}\}$)/g,'').trim() + "}";

                    // get mediagroup's selectors
                    groups = Mediagroup.split("}");

                    // Each css groups
                    $.each(groups, function(index, group){

                        group += "}";

                        // if target CSS not have.
                        if(CSSRegExp.test(group) == false){
                            return true;
                        }

                        // Getting group content
                        var content = group.match(/\{(.*?)\}$/m)[0].toString().replace(/(^\{|\}$)/g,'').trim();

                        // Getting rules
                        contentRules = array_cleaner(content.split(";"));

                        // each rules
                        $.each(contentRules, function(i,v){

                            if(v == ''){
                                return true;
                            }

                            // update value
                            if(v.split(":")[0].toString().trim() == css){

                                thisValue = v.replace(/^(.*?):(.*?)$/g, "$2").trim();

                            }

                        });

                        // Get Selector
                        thisSelector = esc_data_selector(group);

                        // skip if selector is invalid
                        if(check_selector(thisSelector,true,false,false) == false){
                            return true;
                        }

                        // Comparison Selector
                        if(comparisonSelector == true){
                            if(comparison_selector(selector, thisSelector) == false){
                                return true;
                            }
                        }

                        // This Selector
                        find = iframe.find(thisSelector);

                        // igrone if not selecting same elements
                        if(find.hasClass("yp-selected") == false && css != "perspective"){
                            return true;
                        }

                        if(css == "perspective" && find.is(get_selected_element().parent()) == false){
                            return true;
                        }

                        if($('body').hasAttr('data-yp-selector') == true && thisSelector.indexOf(".yp-selector-") == -1){
                            return true;
                        }

                        // Check if CSS part included to value.
                        if(css2 != null && css != 'box-shadow'){
                            if(new RegExp(css2+"\\(", "gi").test(thisValue) == false){
                                return true;
                            }
                        }

                        // box shadow undo button checks
                        if(box_shadow_check(css, css2, thisSelector + "{" + css + ":" + thisValue + "}", check) != false){
                            return true;
                        }

                        // Append Value
                        resultSizeArray.push(size);

                        // Append Data
                        resultDataArray.push(thisSelector + "{" + css + ":" + thisValue + "}");

                    });

                });

            }

        }else{

            // Getting same properties Data
            var samePropertiesData = findStyle(getStyles(null, false), "[rule=" + css + "]");

            if(samePropertiesData.length > 0){

                // Filtering @Media
                for(var index = 0; index < samePropertiesData.length; index++){

                    // Style Data
                    data = samePropertiesData[index];

                    // This size
                    size = /\[msize\=(.*?)\]/g.exec(data)[1];

                    // Covert desktop term to all.
                    if(size == 'desktop'){
                        size = 'all';
                    }

                    // If media not match, igrone
                    if(!iframeContentWindow.matchMedia(size).matches){
                        continue;
                    }

                    // No media on all option
                    if($(".property-size-tabs-visible .property-size.active").attr("data-property-size") == "all"){
                        continue;
                    }

                    // Only current media if propery query active
                    if(mainBody.hasClass("property-query-active") == true && $(".property-size-tabs-visible .property-size.active").length > 0 && is_responsive_mod()){

                        // if not "all"
                        if($(".property-size-tabs-visible .property-size.active").attr("data-property-size") != "all"){

                            // process media
                            var processMedia = process_media_query(size);

                            // if valid
                            if(isDefined(processMedia)){

                                // if not same
                                if(processMedia.toString() != $(".property-size-tabs-visible .property-size.active").attr("data-property-size")){
                                    continue;
                                }

                            }

                        }

                    // is responsive mod and have active breakpoint
                    }else if($(".breakpoint-bar .active").length > 0 && is_responsive_mod()){

                        // process media
                        var processMedia = process_media_query(size);
                        var processMedia2 = process_media_query($(".breakpoint-bar .active").attr("data-media-content"));

                        // if valid
                        if(isDefined(processMedia) && isDefined(processMedia2)){

                            // this size must be same with active breakpoint size
                            if(processMedia.toString() != processMedia2.toString()){
                                continue;
                            }

                        }

                    }else if(is_responsive_mod() && $(".breakpoint-bar .active").length == 0){

                        // No Media
                        continue;

                    }

                    data = esc_data_media(data);

                    // this selector
                    thisSelector = esc_data_selector(data);

                    // skip if selector is invalid
                    if(check_selector(thisSelector,true,false,false) == false){
                        continue;
                    }

                    // Comparison Selector
                    if(comparisonSelector == true){
                        if(comparison_selector(selector, thisSelector) == false){
                            continue;
                        }
                    }

                    // This Selector
                    find = iframe.find(thisSelector);

                    // igrone if not selecting same elements
                    if(find.hasClass("yp-selected") == false && css != "perspective"){
                        continue;
                    }

                    if(css == "perspective" && find.is(get_selected_element().parent()) == false){
                        continue;
                    }

                    if($('body').hasAttr('data-yp-selector') == true && thisSelector.indexOf(".yp-selector-") == -1){
                        continue;
                    }

                    if(thisSelector == esc_data_selector(resultDataArray[index])){
                        resultDataArray.pop();
                    }

                    // Check if CSS part included to value.
                    if(css2 != null && css != 'box-shadow'){
                        if(new RegExp(css2+"\\(", "gi").test(esc_data_value(data, false)) == false){
                            continue;
                        }
                    }

                    // box shadow undo button checks
                    if(box_shadow_check(css, css2, data, check) != false){
                        continue;
                    }

                    // Append Value
                    resultSizeArray.push(size);

                    // Append Data
                    resultDataArray.push(data);

                }

            }

        }

        // False if not have a data.
        if(resultDataArray.length == 0){
            return false;
        }

        // Stop here if is check
        if(check == true){

            if(resultDataArray.length > 0){
                return true;
            }else{
                return false;
            }

        }

        // deferred because Firefox bug.
        deferred = jQuery.Deferred();
        if(resultDataArray.length > 0){

            // Important Tag
            var hasImportant;

            // CSS Specificity Calcator
            var calcatureStyle = '<style id="yp-calcature-style">'+get_current_selector()+'{outline:unset;}';

            // Each
            $.each(resultDataArray, function(index, data){

                // Adding Media
                if(resultSizeArray[index] != 'all'){
                    calcatureStyle += "@media "+resultSizeArray[index]+"{";
                }

                if(/\!important/g.test(data)){
                    hasImportant = ' !important';
                }else{
                    hasImportant = '';
                }

                // Update Style Value
                if(/\:(.*?);/g.test(data)){
                    calcatureStyle += data.replace(/\:(.*?);/g, ":" + (index + 1) + 'px solid transparent' + hasImportant + ";");
                }else if(/\:(.*?)}/g.test(data)){
                    calcatureStyle += data.replace(/\:(.*?)}/g, ":" + (index + 1) + 'px solid transparent' + hasImportant + ";}").replace("}}","}");
                }

                // Using Animation Delay for specificity test.
                calcatureStyle = calcatureStyle.replace("{"+css+':','{'+fakeCSS+':');
                
                // Endding Media
                if(resultSizeArray[index] != 'all'){
                    calcatureStyle += "}";
                }

            });

            // End
            calcatureStyle += '</style>';

            // Append
            iframeBody.append(calcatureStyle);

        }

        // Sleep
        setTimeout(function(){

            // Get computed Style ID
            if(resultDataArray.length > 0){

                // get
                specificityId = parseInt(get_selected_element().css(fakeCSSOut)) - 1;

            // zero mean not have
            }else{
                specificityId = -1;
            }

            // Finds which selector work and get valuewith CSS Testing.
            if(returnSize == false){

                // Not have any in this list
                if(specificityId < 0){

                    deferred.resolve(get_selected_element().css(css));

                }else{

                    // get result
                    var valueX = esc_data_value(resultDataArray[specificityId]);

                    // Maybe can't read
                    if(valueX == null || valueX == undefined || valueX == false){

                        deferred.resolve(get_selected_element().css(css));

                    // If returned value is not valid, use computedStyle
                    }else{

                        if(valueX.indexOf("var(--") != -1){
                            deferred.resolve(get_selected_element().css(css));
                        }else{
                            deferred.resolve(valueX);
                        }

                    }

                }

            // Result type: Size
            }else{

                // not have any in this list
                if(specificityId < 0 || specificityId == 0){

                    deferred.resolve(false);

                }else{

                    deferred.resolve(resultSizeArray[specificityId]);

                }

            }

            // Remove Appended Style
            if(resultDataArray.length > 0){
                iframeBody.find("#yp-calcature-style").remove();
            }

        }, window.YellowDelay);

        // return promise.
        return deferred.promise();

    }


    // parsing box-shadow CSS to check if this default value or this value changed.
    // will show a undo button if changes.
    // we can't check box-shadow as filter or transform, box-shadow has only numbers,
    // not have scale(1) etc. so we need to parse it.
    function box_shadow_check(css, css2, data, check){

        if(css2 != null && css == 'box-shadow' && check == true){

            var boxShadow = esc_data_value(data);

            // No change, skip
            if(boxShadow == 'none'){
                return true;
            }

            // Box shadow color default value.
            if (css2 == 'color') {

                var boxShadowColor = boxShadow;

                // Hex
                if (boxShadowColor.indexOf("#") != -1) {

                     if (boxShadowColor.split("#")[1].indexOf("inset") == -1) {
                        boxShadowColor = $.trim(boxShadowColor.split("#")[1]);
                    } else {
                        boxShadowColor = $.trim(boxShadowColor.split("#")[1].split(' ')[0]);
                    }

                } else {

                    if (boxShadowColor.indexOf("rgb") != -1) {
                        boxShadowColor = boxShadowColor.match(/rgb(.*?)\((.*?)\)/g).toString();
                    }

                }

                // default is element's text color.
                if("#"+(boxShadowColor).trim() == get_color(get_selected_element().css("color")).trim()){
                    return true;
                }

            }

            // split all box-shadow data.
            var boxShadowNum = boxShadow.replace(/rgb(.*?)\((.*?)\) /g, '').replace(/ rgb(.*?)\((.*?)\)/g, '').replace(/inset /g, '').replace(/ inset/g, '');

            // shadow horizontal value.
            if (css2 == 'horizontal' && number_filter(boxShadowNum.split(" ")[0]) == 0) {
                return true;
            }

            // shadow vertical value.
            if (css2 == 'vertical' && number_filter(boxShadowNum.split(" ")[1]) == 0) {
                return true;
            }

            // shadow radius value.
            if (css2 == 'blur-radius' && number_filter(boxShadowNum.split(" ")[2]) == 0) {
                return true;
            }

            // shadow spread value.
            if (css2 == 'spread' && number_filter(boxShadowNum.split(" ")[3]) == 0) {
                return true;
            }

            // if no info about inset, default is no.
            if (css2 == 'inset' && boxShadow.indexOf("inset") == -1) {
                return true;
            }

        }

        return false;

    }


    /* ---------------------------------------------------- */
    /* Espace the media and out media content               */
    /* ---------------------------------------------------- */
    function esc_data_media(data){

        if(data === null || data === undefined || data === ''){
            return false;
        }

        var content = data.replace(/(\/\*|^)(.*?)\*\//g, "");

        if(content.indexOf("@media") != -1){
            content = content.trim().match(/\{(.*?)\}$/g).toString().replace(/(^\{|\}$)/g,'');
        }
        
        // return
        return content.trim();

    }


    /* ---------------------------------------------------- */
    /* Espace CSS rule & value by CSS code                  */
    /* ---------------------------------------------------- */
    function esc_data_content(data){

        if(data === null || data === undefined || data === ''){
            return false;
        }

        var content;

        data = data.replace(/(\/\*|^)(.*?)\*\//g, "");

        if(data.indexOf("@media") != -1){
            if(data.split("{")[2] == undefined){return "";}
            content = data.split("{")[2].split("}")[0];
        }else{
            if(data.split("{")[1] == undefined){return "";}
            content = data.split("{")[1].split("}")[0];
        }

        content = content.trim().replace(/(\s+)?\;$/g,'');
        
        // return
        return content.trim();

    }


    /* ---------------------------------------------------- */
    /* Espace CSS rule value by CSS code                    */
    /* ---------------------------------------------------- */
    function esc_data_value(data, cleanImportant){

        if(isUndefined(cleanImportant)){
            cleanImportant = true;
        }

        if(data === null || data === undefined || data === ''){
            return false;
        }

        data = data.replace(/(\/\*|^)(.*?)\*\//g, "");

        var value;

        if(data.indexOf("@media") != -1){
            value = data.split("{")[2].split("}")[0].replace(/^(.*?):(.*?)$/g, "$2");
        }else{
            value = data.split("{")[1].split("}")[0].replace(/^(.*?):(.*?)$/g, "$2");
        }

        if(cleanImportant !== false){
            value = value.trim().replace(/((\s+)?\;$|(\s+)?\!important)/g,'');
        }

        // return
        return value.trim();

    }



    /* ---------------------------------------------------- */
    /* Espace CSS selector by CSS code                      */
    /* ---------------------------------------------------- */
    function esc_data_selector(data){

        if(data === null || data === undefined || data === ''){
            return false;
        }

        data = data.replace(/(\/\*|^)(.*?)\*\//g, "");

        var selector = data.split("{")[0];

        if(selector == undefined || selector == false){
            return "";
        }

        if(selector.indexOf("@media") != -1){
            selector = data.split("{")[1].split("{")[0];
        }

        return selector.trim();

    }


    /* ---------------------------------------------------- */
    /* Get real CSS name and replace fake rules             */
    /* as scale transform. param1: real CSS name,          */
    /* param2: [scale]-transfrom. I.E "scale".              */
    /* ---------------------------------------------------- */
    function get_css_id(css){

        var cssDetail = null;

        // No webkit
        css = css.replace(/\-webkit\-/g,'');

        // Update transfrom parts
        if(css.indexOf("-transform") != -1 && css != 'text-transform'){

            // CSS
            cssDetail = css.replace(/-transform/g,'');
            css = 'transform';
            cssDetail = cssDetail.replace(/\-/g,"");

        }

        // Update filter parts
        if(css.indexOf("-filter") != -1){

            // CSS
            cssDetail = css.replace(/-filter/g,'');
            css = 'filter';

        }

        // Update filter parts
        if(css.indexOf("box-shadow-") != -1){

            // CSS
            cssDetail = css.replace(/box-shadow-/g,'');
            css = 'box-shadow';

        }

        return [css,cssDetail];

    }

    

    /* ---------------------------------------------------- */
    /* Shows an dot if (any) option edited                  */
    /* ---------------------------------------------------- */
    function states_changes_on_rule_group(){

        // Be sure content selected
        if(is_content_selected()){

            // Clean Old Class
            $(".yp-group-edited").removeClass("yp-group-edited");

            // Animation generator
            if(is_animate_creator() == false){

                // Variables
                var styleObject, currentSelector, currentType;

                // Getting Active Selector
                currentSelector = get_current_selector(true);

                // Converts to native selector
                currentSelector = get_native_selector(currentSelector);

                // Getting active type 
                currentType = get_active_type();

                // Check which data we can use
                var needProcess = mainBody.hasClass("yp-need-to-process");

                // Normal CSS
                for(var i = 0; i < iframejs.styleSheets.length; i++){

                    // Style Object
                    var styleElement = $(iframejs.styleSheets[i].ownerNode);

                    // NEED Process
                    if(needProcess == false){

                        // Looking current for inline data
                        if(styleElement.hasClass("yp-inline-data") && styleElement.attr("data-source-mode") == currentType){
                            styleObject = iframejs.styleSheets[i];
                        }

                    }else{

                        // Looking current for inline data
                        if(styleElement.hasAttr("id")){

                            // Live CSS Data
                            if(styleElement.attr("id") == "yp-live-css-data"){
                                styleObject = iframejs.styleSheets[i];
                            }

                        }

                    }

                }

                // Other variables
                var condition, thisRules, thisMediaRules, thisSelector, thisMediaSelector;

                // Each Rules
                for(i = 0; i < styleObject.cssRules.length; i++){

                    // Cache this object
                    thisRules = styleObject.cssRules[i];

                    // this selector
                    thisSelector = thisRules.selectorText;

                    // If undefined, so maybe this is media
                    if(!isUndefined(thisSelector)){

                        // Update
                        thisSelector = thisSelector.replace(/\.(yp_onscreen|yp_hover|yp_click|yp_focus)/g, '');

                        // continue If not same selector
                        if(thisSelector != currentSelector){
                            continue;
                        }

                    }

                    // Get Media
                    condition = thisRules.conditionText;


                    var validCSSRules, ip;

                    // If Media
                    if(!isUndefined(condition)){

                        // skip if this media not visible
                        if(!iframeContentWindow.matchMedia(condition).matches){
                            continue;
                        }

                        // Each media rules
                        for(var it = 0; it < thisRules.cssRules.length; it++){

                            // Cache this object
                            thisMediaRules = thisRules.cssRules[it];

                            // This selector
                            thisMediaSelector = thisMediaRules.selectorText;

                            // Continue if undefined
                            if(isUndefined(thisMediaSelector)){
                                continue;
                            }

                            // this media
                            thisMediaSelector = thisMediaSelector.replace(/\.(yp_onscreen|yp_hover|yp_click|yp_focus)/g, '');

                            // continue If not same selector
                            if(thisMediaSelector != currentSelector){
                                continue;
                            }

                            // Convert object to array
                            validCSSRules = $.map(thisMediaRules.style,function(value,index){
                                return [value];
                            });

                            // Each all current rules
                            for(ip = 0; ip < validCSSRules.length; ip++){

                                // Don't care perspective
                                if(validCSSRules[ip] == "perspective"){
                                    continue;
                                }

                                // Box-shadow:none is not an content
                                if(get_css_id(validCSSRules[ip])[0] == "box-shadow" && get_selected_element().css("box-shadow") == "none"){
                                    continue;
                                }
                                
                                // State this option
                                $(".yp-option-group[data-css-id='" + get_css_id(validCSSRules[ip])[0] + "']").parents("li").find("h3").addClass("yp-group-edited");

                            }

                        }

                    }else if(is_responsive_mod() == false){

                        // Convert object to array
                        validCSSRules = $.map(thisRules.style,function(value,index){
                            return [value];
                        });

                        // Each all current rules
                        for(ip = 0; ip < validCSSRules.length; ip++){

                            // Don't care perspective
                            if(validCSSRules[ip] == "perspective"){
                                continue;
                            }

                            // Box-shadow:none is not an content
                            if(get_css_id(validCSSRules[ip])[0] == "box-shadow" && get_selected_element().css("box-shadow") == "none"){
                                continue;
                            }
                            
                            // State this option
                            $(".yp-option-group[data-css-id='" + get_css_id(validCSSRules[ip])[0] + "']").parents("li").find("h3").addClass("yp-group-edited");

                        }

                    }

                }

            // Is animation generator
            }else{

                var styles, thisStyle, activeScene;

                // Get active scene
                activeScene = $(".scene-active").attr("data-scene");

                // Check if there is a data in current scene by this CSS Rule.
                styles = iframe.find("#yp-anim-scenes #" + activeScene + " " + 'style');

                // get value
                styles.each(function(){

                    // cache this style
                    thisStyle = $(this);

                    // Each options
                    $(".yp-option-group").each(function(){

                        // State this option
                        if($(this).attr("data-css-id") == get_css_id(thisStyle.attr("data-rule"))[0]){

                            // Don't care perspective
                            if(get_css_id(thisStyle.attr("data-rule"))[0] == "perspective"){
                                return true;
                            }

                            // Box-shadow:none is not an content
                            if(get_css_id(thisStyle.attr("data-rule"))[0] == "box-shadow" && get_selected_element().css("box-shadow") == "none"){
                                return true;
                            }

                            $(this).parents("li").find("h3").addClass("yp-group-edited");

                        }

                    });

                });

            }

        }

    }



    /* ---------------------------------------------------- */
    /* Update grid by grid inputs                           */
    /* ---------------------------------------------------- */
    $(document).on("keyup change", ".this-grid-input", function(){

        // Active property
        var grid = $(this).parents(".grid-builder-area");

        // Update grid
        create_new_grid(grid);

    });



    /* ---------------------------------------------------- */
    /* Update grid by grid format                           */
    /* ---------------------------------------------------- */
    $(document).on("change", ".grid-format", function(){

        // variables
        var formatEl = $(this);
        var input = formatEl.parent().parent().find(".this-grid-input");

        // get format
        var format = formatEl.val();

        // Disable if auto
        if(format == "auto"){
            input.val("").prop('disabled', true);

        // active if not auto
        }else{
            input.prop('disabled', false);

            // If empty
            if(input.val() == ""){

                // default val for empty
                if(format == "fr"){
                    input.val(1);
                }

                // default val for empty
                if(format == "%"){
                    input.val(10);
                }

            }

        }

        // create new grid value
        var grid = formatEl.parents(".grid-builder-area");
        create_new_grid(grid);

    });



    /* ---------------------------------------------------- */
    /* Add a new grid input                                 */
    /* ---------------------------------------------------- */
    $(document).on("click", ".grid-builder-add-new", function(){

        // Add new button
        var button = $(this);

        // Variables
        var grid = button.parents(".grid-builder-area");
        var css = button.parents(".yp-option-group").attr("data-css");
    
        // Index        
        var i = grid.find(".this-grid").length + 1;
            
        // Label
        var label = "Row";
        if(css == "grid-template-columns"){
            label = "Column";
        }

        // Add input template
        $(this).before('<div class="this-grid"><p>'+label+' '+i+'</p><input class="this-grid-input" placeholder="auto" type="number" min="1" value="1" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"><div class="grid-format-div"><select class="grid-format"><option value="fr" selected>fr</option><option value="%">%</option><option value="px">px</option><option value="auto">auto</option></select></div><span class="dashicons dashicons-no-alt delete-grid"></span></div>');

        // anymore more than 1
        $(".last-grid").removeClass("last-grid");

        // create new grid value
        create_new_grid(grid);

    });



    /* ---------------------------------------------------- */
    /* Delete a grid input                                  */
    /* ---------------------------------------------------- */
    $(document).on("click", ".delete-grid", function(){

        // Variables
        var grid = $(this).parents(".grid-builder-area");
        var id = $(this).parents(".yp-option-group").attr("data-css");

        // delete this input
        $(this).parent().remove();

        // Create new value
        create_new_grid(grid);

        // read new value again for update 1,2,3 numbers.
        set_default_value(id);


    });



    /* ---------------------------------------------------- */
    /* Creating new value by grid inputs                    */
    /* ---------------------------------------------------- */
    function create_new_grid(grid){

        // new value array
        var newValue = [], thisValue, thisFormat;

        // loop grids
        grid.find(".this-grid-input").each(function(){

            // variables
            thisValue = $(this).val().trim();
            thisFormat = $(this).next().find(".grid-format").val().trim();

            // If auto or empty, only format
            if(thisFormat == "auto" || thisValue == ""){
                newValue.push("auto");

            // add this one to grid
            }else{
                newValue.push(thisValue + thisFormat);
            }

        });

        // join all with space
        newValue = newValue.join(" ");

        // Set the value and trigger
        grid.parent().find(".grid-builder-input").val(newValue).trigger("keyup");

    }


    /* ---------------------------------------------------- */
    /* Grid input event                                     */
    /* ---------------------------------------------------- */
    $(".yp-grid-option .grid-builder-input").on('keyup', function() {

        // Variables
        var element, group, val, id;

        // This element
        element = $(this);

        // group
        group = element.parent().parent();

        // CSS
        id = group.attr("data-css");

        // Value
        val = element.val();

        // make it changed
        group.addClass("reset-enable");

        // Set for demo
        insert_rule(null, id, val, '');

        // Option Changed
        option_change();

    });


    /* ---------------------------------------------------- */
    /* Set Default Option Value                             */
    /* ---------------------------------------------------- */
    function set_default_value(id) {

        // Get Selector
        var selector = get_current_selector();

        // Set parent element as current
        if(id == 'perspective'){

            // Update selector var
            selector = $.trim(get_parents(get_selected_element().parent(), "defaultNoCache"));

        }

        // Get Element Object
        var the_element = get_selected_element(); // new, loads only main selected element's data.

        // Adding animation classes to element
        if (id == 'animation-name' || id == 'animation-duration' || id == 'animation-delay'){
            the_element.addClass("yp_onscreen yp_hover yp_click yp_focus");
        }

        // replace fake rules as scale-transfrom.
        var ruleID = get_css_id(id);

        // Get details
        var elementID = ruleID[0];
        var cssDetail = ruleID[1];

        // Current media size
        var size = get_media_condition();

        // Default
        var ypEvent = '';

        // get data
        var styles = getStyles(null, true);

        // onscreen event
        if (findStyle(styles ,"[selector=" + get_id(selector + ".yp_onscreen") + "][msize=" + size + "]").length > 0) {
            ypEvent = 'yp_onscreen';
        }

        // click event
        if (findStyle(styles ,"[selector=" + get_id(selector + ".yp_click") + "][msize=" + size + "]").length > 0) {
            ypEvent = 'yp_click';
        }

        // hover event
        if (findStyle(styles ,"[selector=" + get_id(selector + ".yp_hover") + "][msize=" + size + "]").length > 0) {
            ypEvent = 'yp_hover';
        }

        // Focus event
        if (findStyle(styles ,"[selector=" + get_id(selector + ".yp_focus") + "][msize=" + size + "]").length > 0) {
            ypEvent = 'yp_focus';
        }

        // hover event default
        if (mainBody.hasClass("yp-selector-hover") && ypEvent == '') {
            ypEvent = 'yp_hover';
        }

        // Focus event default
        if (mainBody.hasClass("yp-selector-focus") && ypEvent == '') {
            ypEvent = 'yp_focus';
        }

        // default is onscreen
        if (isUndefined(ypEvent) || ypEvent == '') {
            ypEvent = 'yp_onscreen';
        }

        // Getting value anim check.
        var valueData = '';
        var dynamicValue = get_applied_style_data(selector, id, [true, false, false, false]);
        if(typeof dynamicValue === 'object'){
            dynamicValue.always(function(data){
                valueData = data;
            });
        }

        // disable wireframe for getting color options
        if(id == "color" || id == "background-color" || id == "background-image" || get_css_id(id)[0] == "box-shadow" || id == "border-color" || id == "text-shadow" || get_css_id(id)[0].indexOf("-radius") != -1 || get_css_id(id)[0] == "filter"){
            the_element.addClass("yp-no-wireframe");
        }

        setTimeout(function() {

            // remove reset-enable class if is not a fake option.
            if(get_css_id(id)[1] == null){
                $("#" + id + "-group").removeClass("reset-enable");
            }

            // Has editor style?
            if (id == 'animation-name' || id == 'animation-duration' || id == 'animation-delay'){

                if(get_applied_style_data(selector+"."+ypEvent, id, [false, true, false, true])){
                    $("#" + id + "-group").addClass("reset-enable");
                }else{
                    $("#" + id + "-group").removeClass("reset-enable");
                }

            }else{
                
                if(get_applied_style_data(selector, id, [false, true, false, true])){
                    $("#" + id + "-group").addClass("reset-enable");
                }else{
                    $("#" + id + "-group").removeClass("reset-enable");
                }

            }
            

            // data is default value
            var data,numberData;

            // Getting CSS Data. (Animation play not an CSS rule.)
            if (id != 'animation-play' && id != 'border-width' && id != 'border-color' && id != 'border-style') {
                data = the_element.css(elementID);
                numberData = number_filter(data);
            }

            // If data has at CSS editor, get it
            if(get_applied_style_data(selector, id, [true, true, false, false])){

                // get computed css if real data is inherit vs.
                if(valueData == "inherit" || valueData == "auto" || valueData == "unset" || valueData == "auto" || valueData == "initial"){
                    data = the_element.css(elementID);
                    numberData = number_filter(data);
                }else{
                    data = valueData;
                    numberData = number_filter(data);
                }

            }

            // Not set auto for top and left
            if(id == 'top' || id == 'left'){
                if(data == 'auto'){
                    data = '0px';
                    numberData = 0;
                }
            }

            // Border: default is ALL
            if(id == 'border-type'){

                // Update only if not have a active radio.
                if($("#border-type-group").find(".yp-radio.active").length == false){
                    data = 'all';
                }

            }

            // Getting format: px, em, etc.
            var format = alfa_filter(data).replace(/(\.|\,)/g,'');

            // Chome return "rgba(0,0,0,0)" if no background color,
            // its is chrome hack.
            if (id == 'background-color' && data == 'rgba(0, 0, 0, 0)') {
                data = 'transparent';
            }

            // Check border style
            var top;
            if(id == 'border-style'){

                data = 'solid';

                top = the_element.css("borderTopStyle");

                if(top == the_element.css("borderLeftStyle") && top == the_element.css("borderRightStyle") && top == the_element.css("borderBottomStyle")){
                    data = top;
                }
                
            }

            // Check border width
            if(id == 'border-width'){

                data = '0px';
                numberData = 0;

                top = the_element.css("borderTopWidth");

                if(top == the_element.css("borderLeftWidth") && top == the_element.css("borderRightWidth") && top == the_element.css("borderBottomWidth")){
                    data = top;
                    numberData = number_filter(top);
                }
                
            }

            // Check border color
            if(id == 'border-color'){

                data = the_element.css("color");

                top = the_element.css("borderTopColor");

                if(top == the_element.css("borderLeftColor") && top == the_element.css("borderRightColor") && top == the_element.css("borderBottomColor")){
                    data = top;
                }
                
            }


            // Check if margin left/right is auto or else.
            if(id == 'margin-left' || id == 'margin-right'){

                var frameWidth = iframe.width();

                var marginLeft = parseFloat(the_element.css("marginLeft"));
                var width = parseFloat(the_element.css("width"));

                // Full in frame with margins
                if(frameWidth == (marginLeft * 2) + width && marginLeft > 0){

                    data = 'auto';
                    numberData = 0;

                // Full in parent with margins
                }else if(the_element.parent().length > 0){

                    if(parseFloat(the_element.parent().width()) == ((marginLeft * 2) + width) && marginLeft > 0){
                        data = 'auto';
                        numberData = 0;
                    }

                }

            }

            // No need to start, use the left.
            if(id == "text-align" && data == "start"){
                data = "left";
            }


            // some script for custom CSS Rule: animation-play
            if (id == 'animation-play') {
                data = ypEvent;
            }

        
            // Play if is animation name.
            if (id == 'animation-name' && data != 'none' && data != 'animationGeneratorTestAnimate'){

                // Add class.
                body.addClass("yp-hide-borders-now yp-force-hide-select-ui");

                // Pause icon
                $(".anim-player-icon").removeClass("dashicons-controls-play").addClass("dashicons-controls-pause");

                // Set timer
                var time = the_element.css("animationDuration");
                var timeDelay = the_element.css("animationDelay");
                
                // Getting right time delay if have multiple animations.
                var newDelay = get_multiple_delay(time,timeDelay);

                // Delay
                if(newDelay !== false){
                    timeDelay = newDelay;
                }else if(isUndefined(timeDelay)){
                    timeDelay = 0;
                }else{
                    timeDelay = duration_ms(timeDelay); // timeDelay
                }

                // Duration
                if (isUndefined(time)){
                    time = 1000;
                }else{
                    time = duration_ms(time); // Time
                }
                
                time = parseFloat(time) + parseFloat(timeDelay);

                if(time === 0){
                    time = 1000;
                }

                time = time + 100;

                clear_animation_timer();

                window.animationTimer2 = setTimeout(function() {

                    // remove class.
                    body.removeClass("yp-hide-borders-now yp-force-hide-select-ui");

                    element_animation_end();

                    // Update.
                    draw();

                    // Play icon
                    $(".anim-player-icon").removeClass("dashicons-controls-pause").addClass("dashicons-controls-play");

                    // Show frame ui if mouse on iframe
                    if(mainBody.hasClass("yp-iframe-mouseleave") == false){
                        setTimeout(function(){
                            show_frame_ui(200);
                        }, 300);
                    }

                }, time);

            }


            // Text shadow live change.
            if (id == 'text-shadow') {
                $("#yp-text-shadow").css(id, data);
            }

        
            // filter = explode filter data to parts
            if (elementID == 'filter'){

                // Try to get css with webkit prefix.
                if (data === null || data == 'none' || data === undefined) {
                    data = the_element.css("-webkit-filter"); // for chrome.
                }

                // Special default values for filter css rule.
                if (data != 'none' && data !== null && data !== undefined) {

                    // Get brightness, blur etc from filter data.
                    data = data.match(new RegExp(cssDetail+"\\((.*?)\\)","g"));

                    // is?
                    if (isDefined(data)) {

                        // replace prefixes
                        data = data.toString().replace("deg", "").replace("hue-rotate(", "").replace(")", "");

                        // Update data
                        data = number_filter(data);

                        // Update number data
                        numberData = data;

                    }else{

                        // Set default
                        data = 'disable';
                        numberData = 0;

                    }

                }else{

                    // Set default
                    data = 'disable';
                    numberData = 0;

                }

            }


            // Font weight fix.
            if (id == 'font-weight'){

                if(data == 'bolder'){ data = '700'; }
                if(data == 'bold'){ data = '600'; }
                if(data == 'normal'){ data = '400'; }
                if(data == 'lighter'){ data = '300'; }

            }


            // transform = explode transform data to parts
            if (elementID == 'transform') {

                // Get transfrom style from editor data.
                data = valueData;

                // Getting transform value from HTML Source ANIM.
                var styleString = null;
                if (is_animate_creator()){

                    var currentScene = parseInt(mainBody.attr("data-anim-scene").replace("scene-", ""));

                    // Check scenes by scenes for get transfrom data.
                    for(var transfromIndex = 0; transfromIndex < 6; transfromIndex++){

                        // style element
                        var styleOb = iframe.find('.scene-' + (currentScene - transfromIndex) + ' .scenes-transform-style');

                        // Get
                        if (styleOb.length > 0) {
                            styleString = styleOb.last().html();
                            break;
                        }

                    }

                    // Get scene transform data else default.
                    if(styleString != null){
                        data = esc_data_value(styleString);
                    }

                } // Anim end.

                
                // explode transform data
                if (data != 'none' && data !== false && data !== undefined) {

                    // Get brightness, blur etc from filter data.
                    data = data.match(new RegExp(cssDetail+"\\((.*?)\\)","gi"));

                    // is?
                    if (isDefined(data)) {

                        // String.
                        data = data.toString();

                        // Update data
                        data = number_filter(data);

                        // Update number data
                        numberData = data;

                    }else{

                        // Set default
                        data = 'disable';
                        numberData = 0;

                    }

                }else{

                    // Set default
                    data = 'disable';
                    numberData = 0;

                }

            }

            // Animation creator; don't append 0s duration.
            if (id == "animation-duration" && is_animate_creator() === true) {
                if (data == '0s' || data == '0ms') {
                    return false;
                }
            }

            // Set auto
            if(id == 'min-width' || id == 'min-height'){
                if(parseFloat(data) == 0){
                    data = 'auto';
                }
            }

            var p;

            // Check bottom and set auto
            if (id == 'bottom') {

                p = parseInt(parseFloat(the_element.css("top")) + parseFloat(the_element.css("bottom")));

                if (p === 0 || p == parseInt($("#iframe").height() - the_element.height())) {
                    data = 'auto';
                }

            }

            // Check right and set auto
            if (id == 'right') {

                p = parseInt(parseFloat(the_element.css("left")) + parseFloat(the_element.css("right")));

                if (p === 0 || p == parseInt($("#iframe").width() - the_element.width())) {
                    data = 'auto';
                }

            }

            // Box Shadow.
            if (elementID == 'box-shadow' && data != 'none' && data !== null && data !== undefined) {

                // Box shadow color default value.
                if (id == 'box-shadow-color') {

                    // Hex
                    if (data.indexOf("#") != -1) {
                        if (data.split("#")[1].indexOf("inset") == -1) {
                            data = $.trim(data.split("#")[1]);
                        } else {
                            data = $.trim(data.split("#")[1].split(' ')[0]);
                        }
                    } else {
                        if (data.indexOf("rgb") != -1) {
                            data = data.match(/rgb(.*?)\((.*?)\)/g).toString();
                        }
                    }

                    if(/(rgb|\#)/g.test(data) == false){
                        data = "#" + data;
                    }

                }

                // split all box-shadow data.
                var numbericBox = data.replace(/rgb(.*?)\((.*?)\) /g, '').replace(/ rgb(.*?)\((.*?)\)/g, '').replace(/inset /g, '').replace(/ inset/g, '');

                // shadow horizontal value.

                if (id == 'box-shadow-horizontal') {
                    data = numbericBox.split(" ")[0];
                    numberData = number_filter(data);
                }

                // shadow vertical value.
                if (id == 'box-shadow-vertical') {
                    data = numbericBox.split(" ")[1];
                    numberData = number_filter(data);
                }

                // Shadow blur radius value.
                if (id == 'box-shadow-blur-radius') {
                    data = numbericBox.split(" ")[2];
                    numberData = number_filter(data);
                }

                // Shadow spread value.
                if (id == 'box-shadow-spread') {
                    data = numbericBox.split(" ")[3];
                    numberData = number_filter(data);
                }

            }

            // Get line height in em format
            if(id == "line-height" && format == "px"){

                var fontSizePx = parseFloat(the_element.css("font-size"));
                data = numberData/fontSizePx + "em";
                numberData = numberData/fontSizePx;
                format = "em";

            }

            // if no info about inset, default is no.
            if (id == 'box-shadow-inset') {

                if (isUndefined(data)) {

                    data = 'no';

                } else {

                    if (data.indexOf("inset") == -1) {
                        data = 'no';
                    } else {
                        data = 'inset';
                    }

                }

            }

            // option element.
            var the_option = $("#yp-" + id);

            // option element parent of parent.
            var id_prt = the_option.parent().parent();

            // if special CSS, get css by CSS data.
            if (the_element.css(id) === undefined && iframe.find('.' + elementID + '-' + id + '-style').length > 0) {

                data = valueData;
                numberData = number_filter(data);

            }

            var a, b;

            // IF GRID BUILDER
            if (the_option.hasClass("grid-builder-input")){

                // Set value to input
                the_option.val(data);

                // Parse Grids
                var gridArray = data.split(" ");

                var isAuto = [];

                // if not template, if only a simple layout, dont repeat.
                //if(get_selected_element().css("grid-template-areas") == "none"){

                    // loop
                    for(var i = 0; i < gridArray.length; i++){

                        // If all same, use only one and use auto.
                        if((Math.ceil(parseFloat(gridArray[i]) * 10) / 10) == (Math.ceil(parseFloat(gridArray[0]) * 10) / 10) && gridArray[i].indexOf("px") != -1 && gridArray[0].indexOf("px") != -1){

                            isAuto.push("1fr");

                        }

                    }

                //}

                // Converts
                var pxtoperc = true;

                // px to fr
                if(isAuto.length == gridArray.length){

                    gridArray = isAuto;

                    // get auto values
                    var autoRow = get_selected_element().css("grid-auto-rows");
                    var autoColumn = get_selected_element().css("grid-auto-columns");

                    // if has auto rows and if this all same
                    if(autoRow != "none" && autoRow != "auto" && id == "grid-template-rows"){
                            
                        // set auto value for all
                        for(var i = 0; i < gridArray.length; i++){
                            gridArray[i] = autoRow;
                        }

                        // converts disable
                        pxtoperc = false;

                    }

                    // if has auto rows and if this all same
                    if(autoColumn != "none" && autoColumn != "auto" && id == "grid-template-columns"){

                        // set auto value for all
                        for(var i = 0; i < gridArray.length; i++){
                            gridArray[i] = autoColumn;
                        }

                        // converts disable
                        pxtoperc = false;

                    }

                }else{
                
                    // make it auto
                    if(gridArray[0] == "none"){
                        gridArray = ["auto"];
                    }

                }

                // Builder Area
                var builderArea = id_prt.find(".grid-builder-area");

                // make it empty.
                builderArea.empty();

                // Display
                var display = the_element.css("display");
                var containerWidth = 0;

                // Container width
                if(display != "grid"){
                    containerWidth = parseInt(the_element.parent().width());
                }else{
                    containerWidth = parseInt(the_element.width());
                }

                // Label
                var label = "Row";
                if(id == "grid-template-columns"){
                    label = "Column";
                }

                // loop grids
                var thisGrid, options, len = gridArray.length;

                // loop grid array
                for(var i = 0; i < len; i++){

                    // empty default
                    thisGrid = "";

                    // If px, covert to %
                    if(gridArray[i].indexOf("px") != -1 && gridArray[i] != "0px" && gridArray[i] != "0"){

                        // Convert px to fr
                        if(pxtoperc == true){

                            // convert to %
                            thisGrid = (100/containerWidth) * parseFloat(gridArray[i]);
                            thisGrid = Math.floor(thisGrid * 100) / 100;

                            // selecting the format
                            options = "<option value='fr' selected>fr</option><option value='%'>%</option><option value='px'>px</option><option value='auto'>auto</option>";

                        }else{

                            // parsefloat
                            thisGrid = parseFloat(gridArray[i]);

                            // selecting the format
                            options = "<option value='fr'>fr</option><option value='%'>%</option><option value='px' selected>px</option><option value='auto'>auto</option>";

                        }

                    // If auto, choose auto format
                    }else if(gridArray[i].indexOf("auto") != -1 || gridArray[i] == "0px" || gridArray[i] == "0"){

                        // empty
                        thisGrid = "";

                        // format
                        options = "<option value='fr'>fr</option><option value='%'>%</option><option value='px'>px</option><option value='auto' selected>auto</option>";

                    }else if(gridArray[i].indexOf("fr") != -1){

                        // parsefloat
                        thisGrid = parseFloat(gridArray[i]);

                        // format 
                        options = "<option value='fr' selected>fr</option><option value='%'>%</option><option value='px'>px</option><option value='auto'>auto</option>";

                    }else if(gridArray[i].indexOf("%") != -1){

                        // parsefloat
                        thisGrid = parseFloat(gridArray[i]);

                        // format
                        options = "<option value='fr'>fr</option><option value='%' selected>%</option><option value='px'>px</option><option value='auto'>auto</option>";

                    }

                    var gridClass = "this-grid";

                    // If more than 1
                    if(len < 2){
                        gridClass = "this-grid last-grid";
                    }

                    // add this one
                    builderArea.append("<div class='"+gridClass+"'><p>"+label+" "+(i+1)+"</p><input class='this-grid-input' placeholder='auto' type='number' min='1' value='"+thisGrid+"' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' /><div class='grid-format-div'><select class='grid-format'>"+options+"</select></div><span class='dashicons dashicons-no-alt delete-grid'></span></div>");

                    // If this is auto, disable this input
                    if(builderArea.find(".this-grid").last().find(".grid-format").val() == "auto"){
                        builderArea.find(".this-grid").last().find(".this-grid-input").prop('disabled', true);
                    }

                }

                // Add new button
                builderArea.append("<span class='grid-builder-add-new dashicons dashicons-plus'></span>");


                // if all active columns/rows is same value and is fr, make all 1fr
                if(builderArea.find(".this-grid").length > 0){

                    // if has any fr option
                    if(builderArea.find('.grid-format option[value="fr"][selected]').length > 0){

                        // all fr datas
                        var first = null, same = true;
                        builderArea.find('.grid-format option[value="fr"][selected]').each(function(){

                            // this value
                            var thisVal = $(this).parents(".this-grid").find(".this-grid-input").val();

                            // skip if null
                            if(first != null){

                                // if all same or no
                                if(first != thisVal){
                                    same = false;
                                    return false;
                                }

                            }

                            first = thisVal;

                        });

                        // if all same
                        if(same == true){

                            // make all 1fr
                            builderArea.find('.grid-format option[value="fr"][selected]').each(function(){
                                $(this).parents(".this-grid").find(".this-grid-input").val("1");
                            });

                        }

                    }

                }


            // IF THIS IS A SLIDER
            }else if (the_option.hasClass("wqNoUi-target")){

                // if has multi duration
                if(id == 'animation-duration' && data.indexOf(",") != -1){
                    data = '1s'; // Reading as 1second
                    format = 's';
                    numberData = '1';
                    $("#animation-duration-group").addClass("hidden-option");
                }else if(id == 'animation-duration'){
                    $("#animation-duration-group").removeClass("hidden-option");
                }


                // if has multi delay
                if(id == 'animation-delay' && data.indexOf(",") != -1){
                    data = '0s'; // Reading as 1second
                    format = 's';
                    numberData = '0';
                    $("#animation-delay-group").addClass("hidden-option");
                }else if(id == 'animation-delay'){
                    $("#animation-delay-group").removeClass("hidden-option");
                }

                // If not inline
                if (the_element.css("display") != 'inline' || the_element.css("display").indexOf("table") != -1) {

                    // if has children and id is height 
                    if (id == 'height' && the_element.children().length > 0 && the_element.children().length < 12) {

                        var elHeight = the_element.css("height");
                        var tHeight;

                        // parent is display block
                        the_element.children().each(function(){

                            tHeight = $(this).css("height");

                            if(elHeight == tHeight){

                                data = 'auto';
                                return false;

                            }

                        });

                    }

                }

                format = $.trim(format);

                // be sure format is valid.
                if (format === '' || format == 'px .px' || format == 'px px') {
                    format = 'px';
                }

                // be sure format is valid.
                if (format.indexOf("px") != -1) {
                    format = 'px';
                }

                // Default value is 1 for transform scale.
                if (numberData == '' && id == 'scale-transform') {
                    numberData = 1;
                }

                // Default value is 1 for filter
                if (numberData == '' && id == 'brightness-filter') {
                    numberData = 1;
                }

                // Default value is 1 for filter
                if (numberData == '' && id == 'contrast-filter') {
                    numberData = 1;
                }

                // Default value is 1 for filter
                if (numberData == '' && id == 'saturate-filter') {
                    numberData = 1;
                }

                // default value is 1 for opacity.
                if (numberData == '' && id == 'opacity') {
                    numberData = 1;
                }

                // If no data, set zero value.
                if (numberData == '') {
                    numberData = 0;
                }

                var range = id_prt.data("px-range").split(",");

                var $min = parseInt(range[0]); // mininum value
                var $max = parseInt(range[1]); // maximum value

                // Check values.
                if (numberData < $min) {
                    $min = numberData;
                }

                if (numberData > $max) {
                    $max = numberData;
                }

                // Speacial max and min limits for CSS size rules.
                if (id == 'width' || id == 'max-width' || id == 'min-width' || id == 'height' || id == 'min-height' || id == 'max-height') {
                    $max = parseInt($max) + (parseInt($max) * 1.5);
                    $min = parseInt($min) + (parseInt($min) * 1.5);
                }

                // if width/height is same with windows width, set 100%!
                // Note: browsers always return value in PX format.
                if (the_element.css("display") != 'inline') {

                    // Width
                    if (id == 'width' && the_element.parent().length > 0) {

                        // is px and display block
                        if(format == 'px' && the_element.parent().css("display") != 'inline' && the_element.parent().css("display") != 'inline-flex' && the_element.parent().css("display").indexOf("table") == -1){

                            var parentWidth = the_element.parent().width();

                            // if width is same with parent width, so set 100%!
                            if (parentWidth == parseInt(numberData)) {
                                numberData = '100';
                                format = '%';
                            }

                            // if width is 50% of parent width, so set 50%!
                            if (parseInt(parentWidth/2) == (parseInt(numberData))) {
                                numberData = '50';
                                format = '%';
                            }

                            // if width is 25% of parent width, so set 25%!
                            if (parseInt(parentWidth/4) == (parseInt(numberData))) {
                                numberData = '25';
                                format = '%';
                            }

                            // if width is 20% of parent width, so set 20%!
                            if (parseInt(parentWidth/5) == (parseInt(numberData))) {
                                numberData = '20';
                                format = '%';
                            }

                        }

                    }

                    // if  height is 100% of window height!
                    if (id == 'height' && parseInt($(window).height()) == parseInt(numberData) && format == 'px') {
                        numberData = '100';
                        format = 'vh';
                    }

                }

                // max and min for %.
                if (format == '%' || format == 'vh' || format == 'vw'){
                    range = $('#' + id + '-group').attr("data-pc-range").split(",");
                    $min = range[0];
                    $max = range[1];
                }else if(format == 'em'){
                    range = $('#' + id + '-group').attr("data-em-range").split(",");
                    $min = range[0];
                    $max = range[1];
                }

                // Raund
                numberData = Math.floor(numberData * 100) / 100;

                format = format.replace(/\./g,'');

                // Just int
                if(format == 'px'){
                    if(id == 'width' || id == "animation-iteration-count" || id == 'height' || id == 'min-width' || id == 'min-height' || id == 'max-width' || id == 'max-height' || id == 'font-size' || id.indexOf("margin-") != -1 || id.indexOf("padding-") != -1 || /border(.*?)?width/g.test(id) || id.indexOf("-radius") != -1 || id.indexOf("z-index") != -1 || id == 'top' || id == 'right' || id == 'bottom' || id == 'left'){
                        numberData = parseInt(numberData);
                    }
                }

                // update range
                the_option.wqNoUiSlider({
                    range: {
                        'min': parseInt($min),
                        'max': parseInt($max)
                    },
                    start: parseFloat(numberData)
                }, true);


                // Set the new value.
                the_option.val(numberData);


                // if no data, active none option.
                if(valueData == id_prt.attr("data-css-default") || data == id_prt.attr("data-css-default")){

                    // Set new value.
                    the_option.val(id_prt.attr("data-css-default"));

                    // Update the input.
                    $('#' + id + '-value').val(id_prt.attr("data-css-default")).attr("data-last-val", numberData);

                    // set format of value. px, em etc.
                    $("#" + id + "-after").val("-");

                }else{

                    // Set new value.
                    the_option.val(numberData);

                    // Update the input.
                    $('#' + id + '-value').val(numberData);

                    // set format of value. px, em etc.
                    $("#" + id + "-after").val(format);

                }

                // resize format box
                if(!$("#" + id + "-after").hasClass("autogrow")){

                    // adds class
                    $("#" + id + "-after").autoGrowInput({
                        minWidth: 15,
                        maxWidth: 32
                    }).addClass("autogrow");

                }else{

                    // resize format box
                    $("#" + id + "-after").trigger('autogrow');

                }


                // IF THIS IS A SELECT TAG
            } else if (the_option.hasClass("input-autocomplete")) {

                var fontFamily, fontDefault;

                // Checking font family settings.
                if (id == 'font-family' && typeof data != 'undefined') {

                    fontFamily = get_font_name(data);
                    fontDefault = data;
                    data = $.trim(data.replace(/"/g, "").replace(/'/g, ""));

                }

                // check the data
                if (isDefined(data)) {

                    // Append default font family to body. only for select font family.
                    if ($(".yp-font-test-" + get_basic_id(fontFamily)).length === 0 && id == 'font-family') {

                        // If safe font, stop.
                        if (is_safe_font(fontFamily) === false) {

                            // Append always to body.
                            body.append("<link rel='stylesheet' class='yp-font-test-" + get_basic_id(fontFamily.replace(/ /g, '+')) + "'  href='https://fonts.googleapis.com/css?family=" + fontFamily.replace(/ /g, '+') + ":300italic,300,400,400italic,500,500italic,600,600italic,700,700italic' type='text/css' media='all' />");

                        }

                    }

                    // set value.
                    the_option.val(data);

                    if (id == 'font-family') {
                        $("#yp-font-family,#yp-font-weight").each(function() {
                            $(this).css("fontFamily", fontDefault);
                        });
                    }

                }

                // If not have this data in select options, insert this data.
                if (the_option.val() === null && data !== undefined) {
                    the_option.val(data);
                }

                //return false;

                // IF THIS IS A RADIO TAG
            } else if (the_option.hasClass("yp-radio-content")) {

                // Fix background size rule.
                if (id == 'background-size') {
                    if (data == 'auto' || data == '' || data == ' ' || data == 'auto auto') {
                        data = 'auto auto';
                    }
                }

                // If disable, active disable button.
                if (data == 'disable') {
                    id_prt.find(".yp-disable-btn").not(".active").trigger("click");
                } else {
                    radio_value(the_option, id, data); // else Set radio value.
                }

                //return false;

                // IF THIS IS COLORPICKER
            } else if (the_option.hasClass("wqcolorpicker")) {

                // Remove active
                $(".yp-nice-c.active,.yp-flat-c.active,.yp-meterial-c.active,.yp-theme-c.active").removeClass("active");

                if (id == 'box-shadow-color' && valueData != "none") {
                    if (data === undefined || data === false || data == 'none' || data == '') {
                        data = the_element.css("color");
                    }
                }

                // Convert to rgb and set value.
                var rgbd;
                if (isDefined(data)) {
                    if (data.indexOf("#") == -1 && data.indexOf("rgb") != -1) {
                        rgbd = get_color(data);
                    }else if(data != 'transparent' && data != 'none' && data != 'inherit'){
                        rgbd = data;
                    }
                }

                // browsers return value always in rgb format.
                the_option.val(rgbd);
                the_option.iris('color', data);

                // If rgba
                var alpha = 100;
                if(data.indexOf("rgba") != -1){
                    alpha = $.trim(data.replace(/^.*,(.+)\)/,'$1'));
                    if(alpha.indexOf(".") != -1){
                        alpha = alpha.replace("000.","").replace("00.","").replace("0.","").replace(".","");
                        if(alpha.length == 1){
                            alpha = alpha.toString()+"0";
                        }
                        alpha = alpha.replace(/^0/, "");
                    }
                }

                // Update iris alpha.
                id_prt.find(".cs-alpha-slider").slider('value',alpha); 

                // Set current color on small area.
                the_option.parent().find(".wqminicolors-swatch-color").css("backgroundColor", rgbd);

                // If transparent
                if (data == 'transparent' || data == '' || valueData == "none") {
                    id_prt.find(".yp-disable-btn.active").trigger("click");
                    id_prt.find(".yp-none-btn:not(.active)").trigger("click");
                    the_option.parent().find(".wqminicolors-swatch-color").css("backgroundColor", "transparent");
                } else {
                    id_prt.find(".yp-none-btn.active").trigger("click");
                }

                if (id == 'box-shadow-color') {
                    $("#box-shadow-color-group .wqminicolors-swatch-color").css("backgroundColor", data);
                }

                //return false;

                // IF THIS IS INPUT OR TEXTAREA
            } else if (the_option.hasClass("yp-input") || the_option.hasClass("yp-textarea")) {

                // clean URL() prefix for background image. no gradients
                if (data != 'disable' && id == "background-image" && data != window.location.href && data.indexOf("linear-gradient(") == -1 && data.indexOf("yellow_pencil_frame") == -1) {

                    // If background-image is empty.
                    a = $(document).find("#iframe").attr("src");
                    b = data.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, "");

                    // Cleans if no data
                    if (a == b) {
                        data = '';
                    }

                    // Get URL Content
                    if(/url\((\"|\')?(.*?)(\"|\')?\)/i.test(data) == true){
                        data = data.match(/url\((\"|\')?(.*?)(\"|\')?\)/i)[0];
                    }

                    // Cleans
                    the_option.val(data.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, ""));

                    // remove class from active pattern
                    $(".yp_bg_assets").removeClass("active");

                    // if it is a pattern
                    if (data.indexOf("yellow-pencil") != -1) {

                        // Find the pattern and add active class
                        $(".yp_bg_assets[data-url='" + data.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, "") + "']").addClass("active");

                        $(".yp-background-image-show").remove();

                    } else { // if image

                        // Remove background image
                        $(".yp-background-image-show").remove();

                        // Get img URL
                        var imgSrc = data.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, "");

                        // check if image is valid
                        if (imgSrc.indexOf("//") != -1 || imgSrc.indexOf("data:") != -1) {

                            // Append the view image
                            $("#background-image-group .yp-part").append("<img src='" + imgSrc + "' class='yp-background-image-show' />");

                        }

                    }

                } else {

                    // remove background image
                    $(".yp-background-image-show").remove();

                }



                // clean URL() prefix for list style image.
                if (data != 'disable' && id == "list-style-image" && data != window.location.href) {

                    // If list-style-image is empty.
                    a = $(document).find("#iframe").attr("src");
                    b = data.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, "");

                    // Cleans if no data
                    if (a == b) {
                        data = '';
                    }

                    // Cleans
                    the_option.val(data.replace(/"/g, "").replace(/'/g, "").replace(/url\(/g, "").replace(/\)/g, ""));

                }


                // If is background image and has gradient
                if(id == 'background-image' && data.indexOf("linear-gradient(") != -1){

                    // cross browser gradient support
                    data = getOriginalGradient(data);

                    // Set data
                    the_option.val(data);

                    // remove old active
                    $(".yp-gradient-demo").removeClass("active");

                    // Find active gradient by gradient
                    if($(".yp-gradient-demo[data-gradient='"+data+"']").length > 0){
                        // active
                        $(".yp-gradient-demo[data-gradient='"+data+"']").addClass("active");

                    }

                    // Update gradient tool
                    read_gradient(data);

                }


                // If no data, active none button.
                if (data == 'none') {
                    id_prt.find(".yp-none-btn").not(".active").trigger("click");
                    the_option.val(''); // clean value.
                } else {
                    id_prt.find(".yp-none-btn.active").trigger("click"); // else disable.
                }

                // If no data, active disable button.
                if (data == 'disable') {
                    id_prt.find(".yp-disable-btn").not(".active").trigger("click");
                    the_option.val('');
                } else {
                    id_prt.find(".yp-disable-btn.active").trigger("click"); // else disable.
                }

                //return false;

            }

            // active default
            if(valueData == "inherit" || valueData == "auto" || valueData == "unset" || valueData == "auto" || valueData == "initial"){

                // if slider
                if (the_option.hasClass("wqNoUi-target")){
                    $("#" + id + "-group .yp-none-btn").addClass("active");
                    id_prt.find(".yp-after").hide();
                }

                // if select
                if (the_option.hasClass("input-autocomplete")){
                    $("#" + id + "-group .yp-none-btn").addClass("active");
                }


            }

            // delete wireframe helper at the end
            if(id == "color" || id == "background-color" || id == "background-image" || get_css_id(id)[0] == "box-shadow" || id == "border-color" || id == "text-shadow" || get_css_id(id)[0].indexOf("-radius") != -1 || get_css_id(id)[0] == "filter"){
                the_element.removeClass("yp-no-wireframe");
            }

        }, window.Yellow2Delay);

    }



    /* ---------------------------------------------------- */
    /* Converting selectors to Array                        */
    /* ---------------------------------------------------- */
    function get_selector_array(selector){

        var selectorArray = [];

        // Clean
        selector = $.trim(selector);

        // Clean multispaces
        selector = selector.replace(/\s\s+/g, ' ');

        // Clean spaces before ">,+,~" and after
        selector = selector.replace(/(\s)?(\>|\,|\+|\~)(\s)?/g, '$2');

        // Convert > to space 
        selector = selector.replace(/\>/g, ' ');

        selector = $.trim(selector);

        // Check if still there have another selector
        if(selector.indexOf(" ") != -1){

            var selectorSplit = selector.split(" ");

            // Split with space
            var v;
            for(var i = 0; i < selectorSplit.length; i++){

                // Clean
                v = $.trim(selectorSplit[i]);

                // Push
                selectorArray.push(v);

            }

        }else{

            // Push if single.
            selectorArray.push(selector);

        }

        var selectorArrayNew = [];

        // Add spaces again
        $.each(selectorArray,function(i,v){
            selectorArrayNew.push(v.replace(/\~/g,' ~ ').replace(/\+/g,' + '));
        });

        return selectorArrayNew;

    }


    /* ---------------------------------------------------- */
    /* Converting Classes to Array                          */
    /* ---------------------------------------------------- */
    function get_classes_array(classes){

        var classesArray = [];

        // Clean
        classes = $.trim(classes);

        // Clean multispaces
        classes = classes.replace(/\s\s+/g, ' ');

        // Check if still there have another class
        if(classes.indexOf(" ") != -1){

            var classessplit = classes.split(" ");

            // Split with space
            var v;
            for(var i = 0; i < classessplit.length; i++){

                // Clean
                v = $.trim(classessplit[i]);

                // Push
                classesArray.push(v);

            }

        }else{

            // Push if single.
            classesArray.push(classes);

        }

        return classesArray;

    }



    /* ---------------------------------------------------- */
    /* PREFERED CLASSES                                     */
    /* ---------------------------------------------------- */
    var preferedClasses = [

        // Global
        'current-menu-item',
        'active(!singleInspector)',
        'current(!singleInspector)',
        'post',
        'hentry',
        'widget',
        'wp-post-image',
        '(entry|article|post|page|item|widget)([-_])?title',
        '(entry|article|post|page|item|widget)([-_])?content',
        '(entry|article|post|page|item|widget)([-_])?meta',
        'comment-author-admin',
        '([a-zA-Z0-9_-]+)?item',
        'next',
        'prev',
        'product',
        'footer',
        'footer-top',
        'footer-bottom',
        'header',
        'navbar',
        'sidebar',
        'masthead',
        'copyright',
        'menu-item',

        // Special
        'form-control',
        'row_inner',
        'wpDataTable',
        'ls-wrapper',
        'x-column'

    ];


    /* ---------------------------------------------------- */
    /* FILTERING NEVER-USE CLASSES                          */
    /* ---------------------------------------------------- */
    /* These classes will never be used in the selector.    */
    /* Use only if tag is "div" and not have a alternative. */
    /* ---------------------------------------------------- */
    var blockedClasses = [

        // Animate.css
        '([a-zA-Z0-9_-]+)?infinite([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?bounce([a-zA-Z0-9_-]+)?',
        '(([a-zA-Z0-9_-]+)?([-_]flash|flash[-_]|[-_]flash[-_])([a-zA-Z0-9_-]+)?|flash)',
        '([a-zA-Z0-9_-]+)?pulse([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?rubberBand([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?shake([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?headShake([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?swing([a-zA-Z0-9_-]+)?',
        '(([a-zA-Z0-9_-]+)?([-_]tada|tada[-_]|[-_]tada[-_])([a-zA-Z0-9_-]+)?|tada)',
        '([a-zA-Z0-9_-]+)?wobble([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?jello([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?hinge([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?fade([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?slide([a-zA-Z0-9_-]+)?(In|in|Out|out)([a-zA-Z0-9_-]+)?(Up|up|Down|down|Left|left|Right|right)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?roll([a-zA-Z0-9_-]+)?(In|in|Out|out)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?fall([a-zA-Z0-9_-]+)?(In|in|Out|out|Up|up|Down|down|Left|left|Right|right)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?flip([a-zA-Z0-9_-]+)?(In|in|Out|out|Up|up|Down|down|Left|left|Right|right)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?lightSpeed([a-zA-Z0-9_-]+)?(In|in|Out|out)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?rotate([a-zA-Z0-9_-]+)?(In|in|Out|out)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?zoom([a-zA-Z0-9_-]+)?(In|in|Out|out)([a-zA-Z0-9_-]+)?',

        // Post Status Classes
        '([a-zA-Z0-9_-]+)?publish([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?draft([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?pending([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?private([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?trash([a-zA-Z0-9_-]+)?',

        // Basic Formats
        '(standard|aside|audio|chat|gallery|image|link|quote|status|video)',

        // Global Functional Classes
        '([a-zA-Z0-9_-]+)?focus([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?viewport([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?ltr([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?inherit([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(relative|absolute)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?transparent([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?visibility([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?spaced([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(hidden|hide)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(active-slide|current-slide|selected-slide|slide-active|slide-current|slide-selected)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?([-_]drag[-_]|drag[-_]|[-_]drag)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(draggable|sortable|dismissable|flippable|clickable)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?resize([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?cloned([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?status([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(clean|clr|clfw)([a-zA-Z0-9_-]+)?',
        '((?!n2)([a-zA-Z0-9_-]+)hover([_-])([a-zA-Z0-9]+)?|hover|hover([_-])([a-zA-Z0-9]+)?|(?!n2)([a-zA-Z0-9_-]+)hover|hovered)',
        '(?!n2)([a-zA-Z0-9_-]+)[-_]font([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?ready([a-zA-Z0-9_-]+)?',
        'currency([a-zA-Z0-9_-]+)?',
        '(lang|language|translate)([-_])([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?validate([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(false|true)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(loading|loaded)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?added([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(move|moving)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?finished([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?delay([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(enabled|disabled)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(bold|italic)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?initialised([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(even|odd)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?underlined([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?gutter([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(animation|animating|animate)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?transition([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?repeat([a-zA-Z0-9_-]+)?',
        '([_-]?)([0-9A-Fa-f]{6}|[0-9A-Fa-f]{3}|rgba|rgb)([_-]?)?', // any hex code
        '([a-zA-Z0-9_-]+)?rand',
        '([a-zA-Z0-9_-]+)?(padding|margin|padded)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(mrg|pdg|m|p|pad|mar|margin|pading|padng|mrn)([-_])(t|r|b|l|btm|top|left|right|tp|lft|rght|bottom)([-_])([a-zA-Z0-9_-]+)',
        'is([_-])([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)none',
        '([a-zA-Z0-9_-]+)?with([_-])([a-zA-Z0-9]+)',
        '([a-zA-Z0-9_-]+)?([_-])(to|from)([_-])(top|left|right|bottom)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(cursor|pointer)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(uppercase|lowecase|all-caps|capitalize)([a-zA-Z0-9_-]+)?',
        '(display[-_]?block|display[-_]?inline|display[-_]?inline[-_]?block)',
        '(bottom|top|left|right|center|align|middle|up|down)[-_](bottom|top|left|right|center|align|middle|up|down)',
        '(bottom|top|left|right|center|align|middle|up|down)[-_](bottom|top|left|right|center|align|middle|up|down)[-_](bottom|top|left|right|center|align|middle|up|down)',
        '(not|no)([_-])([a-zA-Z0-9_-]+)?',

        // Google Font Classes
        '(roboto|lato|montserrat|slabo|raleway|merriweather|poppins|lora|titillium[-_]?web|muli|arimo)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)[-_](serif|sans|display|monospace|webfont)([a-zA-Z0-9_-]+)?',

        // Wordpress Core
        'page([_-])item',
        '([a-zA-Z0-9_-]+)?object([_-])page',
        '([a-zA-Z0-9_-]+)?closed',
        'thread([_-])alt',
        '([a-zA-Z0-9_-]+)?([_-])has([_-])?([a-zA-Z0-9_-]+)|([a-zA-Z0-9_-]+)?([_-])?has([_-])([a-zA-Z0-9_-]+)',
        'screen([_-])reader([_-])text',
        'tag-link([a-zA-Z0-9_-]+)?',

        // Browser Classes
        '([a-zA-Z0-9_-]+)?internet([-_])?explorer([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?opera([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?firefox([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?safari([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?chrome([a-zA-Z0-9_-]+)?',

        // WooCommerce
        '([a-zA-Z0-9_-]+)?(product_tag|product_cat)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(onsale|taxable)([a-zA-Z0-9_-]+)?',
        'calculated_shipping',
        'woocommerce-MyAccount-navigation-link--([a-zA-Z0-9_-]+)?',

        // Special
        'img-responsive',
        'ls-active',
        'disappear',
        'appear',
        'noSwipe',
        'wow',
        'bootstrap-touchspin-down',
        'section--no',
        'cat-item',
        'kc-elm',
        'kc_column',
        'selected',
        'alternate_color',
        'open-mega-a',
        'sf-menu',
        'sf-arrows',
        'ajax',
        'neg-marg',
        'lazy',
        'lazy-img',
        'text-shadow-small',
        'full',
        'sort',
        'elementor-column-gap-no',
        'n2-ow',
        'et_pb_css_mix_blend_mode_passthrough',
        'filterall',
        'notranslate',
        'vce',
        'bordb',
        'master-slider-parent',
        'ms-sl-selected',
        'non-hundred-percent-height-scrolling',
        'hundred-percent-fullwidth',
        'post-no-media',
        'ie',

        // Special Advanced
        '([a-zA-Z0-9_-]+)?(syle|style)-default([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?nojquery([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?js-comp-ver([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?wpb-js-composer([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?-shd',
        '([a-zA-Z0-9_-]+)?video-aspect-ratio-([a-zA-Z0-9_-]+)',
        '([a-zA-Z0-9_-]+)?disable-resposive-headings([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?ut-vc-([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?([-_])spacing([-_])(no|yes)',
        '([a-zA-Z0-9_-]+)?default([-_])template([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?ga-track([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?raw([-_])code([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?raw([-_])html([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?withbg([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?bg([-_])layout([a-zA-Z0-9_-]+)?',
        'n2-(ow|ss)-(all|desktop|mobile|tablet)',
        '([a-zA-Z0-9_-]+)?show-dropdown'

    ];


    /* ---------------------------------------------------- */
    /* FILTERING UNPREFERED CLASSES                         */
    /* ---------------------------------------------------- */
    /* UnPrefered Classes, these classes is not a priority  */
    /* ---------------------------------------------------- */
    var unPreferedClasses = [

        // Logical
        '([a-zA-Z0-9_-]+)([_-])', // End with -_ 
        '([_-])([a-zA-Z0-9_-]+)', // start with -_
        '([a-zA-Z0-9_-]+)?([_-])([_-])([a-zA-Z0-9_-]+)?', // multiple -_ ex: bad--class--name

        // WordPress Dynamic Classes
        '([a-zA-Z0-9_-]+)?(tag|category|cat)([_-])([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?format([a-zA-Z0-9_-]+)?',
        'menu([_-])item([_-])type([_-])post([_-])type',
        'menu([_-])item([_-])object([_-])page',
        'menu([_-])item([_-])(object|type)([_-])custom',
        'widget_([a-zA-Z0-9_-]+)',
        'bg([-_])([a-zA-Z0-9_-]+)',

        // Modern Columns.
        '([a-zA-Z0-9_-]+)?([_-])(l|m|s|xs)([_-])[0-9]+',
        '([a-zA-Z0-9_-]+)?pure([_-])([a-zA-Z0-9_-]+)?([_-])u([_-])[0-9]+([_-])[0-9]+',
        '([a-zA-Z0-9_-]+)?col([_-])([a-zA-Z0-9_-]+)?([_-])[0-9]+',
        '([a-zA-Z0-9_-]+)?col([_-])([a-zA-Z0-9_-]+)?([_-])offset([_-])[0-9]+',
        '([a-zA-Z0-9_-]+)?(medium|large|small)([_-])[0-9]+',
        '([a-zA-Z0-9_-]+)?(medium|large|small)([_-])([a-zA-Z0-9_-]+)?([_-])[0-9]+',

        // Bootstrap Classes
        '([a-zA-Z0-9_-]+)?(small|medium|large)([_-])(push|pull)([_-])[0-9]+',
        '([a-zA-Z0-9_-]+)?span([_-])?[0-9]+',
        '([a-zA-Z0-9_-]+)?col([_-])[0-9]+([_-])[0-9]+',
        '([a-zA-Z0-9_-]+)?col([_-])[0-9]+',

        // Classic Grid Columns
        '(column|columns|col)',
        '([a-zA-Z0-9_-]+)(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)([a-zA-Z0-9_-]+)',

        // Structural
        '([a-zA-Z0-9_-]+)?sticky([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?fixed([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?logged([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?print([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?visible([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?trigger([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?required([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?pull([a-zA-Z0-9_-]+)(left|right)',
        '(left|right)',
        '([a-zA-Z0-9_-]+)?([_-])(yes|no)([_-])([a-zA-Z0-9_-]+)?', // _yes_
        '([a-zA-Z0-9_-]+)?(yes|no)([_-])([a-zA-Z0-9_-]+)?', // yes_
        '([a-zA-Z0-9_-]+)?([_-])(yes|no)[_-]([a-zA-Z0-9_-]+)?', // _yes,
        '([a-zA-Z0-9_-]+)?is([_-])active([a-zA-Z0-9_-]+)?', // is_active,
        '([a-zA-Z0-9_-]+)?clearfix([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?clear([a-zA-Z0-9_-]+)?',
        '(xsmall|x?[-_]small|small|large|medium|huge|normal)',

        // Dynamic CSS classes.
        '([a-zA-Z0-9_-]+)?background([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?width([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?height([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?position([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?parent([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?color([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?layout([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?invert([a-zA-Z0-9_-]+)?',
        '(?!n2-)([a-zA-Z0-9_-]+)style([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?scroll([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?equal([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?square([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?([_-])skin([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?skin([_-])([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?toggled([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?style([0-9_-]+)',
        '([a-zA-Z0-9_-]+)?rounded([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?radius([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?type([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?dynamic([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?first',
        '([a-zA-Z0-9_-]+)?last',
        '([a-zA-Z0-9_-]+)?text([_-])justify',
        '([a-zA-Z0-9_-]+)?row([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?border([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?align([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?effect([0-9_-]+)',
        '([a-zA-Z0-9_-]+)?dimension([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?inline-inside([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?corner-pointed([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?float([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?last-child([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?first-child([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(round|scale|shadow|rotate|default|minimal|anim|pos[-_]align|angled)([a-zA-Z0-9_-]+)?',

        // General Theme Option Classes
        '([a-zA-Z0-9_-]+)([_-])(on|off)',
        '([a-zA-Z0-9_-]+)size([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)mobile([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)desktop([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)populated([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?hide([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?show([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?parallax([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?responsive([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?intense([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?completed([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?with_ajax([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?no-sibling([a-zA-Z0-9_-]+)?',
        
        // Colors
        '([a-zA-Z0-9_-]+)?(blue|black|red|white|light|green|yellow|purple|pink|orange|brown|gray)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?(black|dark|white|light)([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)([_-])only',
        '([a-zA-Z0-9_-]+)?(text-left|text-center|text-right)([a-zA-Z0-9_-]+)?',

        // Special
        'unyson-page',
        'end',
        'larger',
        'smaller',
        'height-full',
        'created_group',
        'mini',
        'activity_update',
        'forge-block',
        'forge-',
        'elementor-section-items-middle',
        'themify_builder',
        'module',
        'dslc-post-no-thumb',
        'downloadable',
        'purchasable',
        'instock',
        'above',
        'open',
        'template-page',
        'alpha',
        'units',
        'flex_column_div',
        'woocommerce',
        'affix-top',
        'st-menu',
        'circle',
        'vc_figure',
        'vc_general',
        'waves-effect',
        'collapsed',
        'collapse'

    ];


    /* ---------------------------------------------------- */
    /* FILTERING UNPREFED CLASSES                           */
    /* ---------------------------------------------------- */
    /* This filter excluding the structural classes in the  */
    /* selector. ex: col-md-8, exclude it if no need.       */
    /* ---------------------------------------------------- */
    var unPreferedSelectors = [

        // Advanced
        '([a-zA-Z0-9_-]+)?inner([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?overlay([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?container([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?google-fonts([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?fl-col-content([a-zA-Z0-9_-]+)?',
        'elementor([a-zA-Z0-9_-]+)?(column|gap|wide|wrap)([a-zA-Z0-9_-]+)?',
        'ms-([a-zA-Z0-9_-]+)-view',

        // Etc
        'kc-wrap-columns',
        'dslc-modules-section-wrapper',
        'av-content-full',
        'ninja-forms-form-wrap',
        'nf-fields-wrap',
        'nf-field-element',
        'tp-tab-mask',
        'n2-ss-section-outer',
        'sp-mask',
        'sp-grab',
        'ms-slide-layers',
        'ls-layers',
        'snp-fb'

    ];
    
    unPreferedSelectors = unPreferedSelectors.concat(blockedClasses);
    unPreferedSelectors = unPreferedSelectors.concat(unPreferedClasses);


    /* ---------------------------------------------------- */
    /* SKIP SOME NUMMERIC CLASSES AS NORMAL                 */
    /* ---------------------------------------------------- */
    /* process these  nummeric classes as non nummeric      */
    /* ---------------------------------------------------- */
    var filterNumSkipBest = [
        '([a-zA-Z0-9_-]+)?wpcf7([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?mc4wp([a-zA-Z0-9_-]+)?'
    ];


    /* ---------------------------------------------------- */
    /* EXCLUDE BAD NUMMERIC CLASSES                         */
    /* ---------------------------------------------------- */
    /* Never uses the following nummeric classes            */
    /* ---------------------------------------------------- */
    var blockedDigitalClasses = [
        '([a-zA-Z0-9_-]+)?page([_-])item([_-])([0-9]+)',
        '(vc_|vc-)(.*?)(_|-)[a-zA-Z-0-9]{22,22}',
        'themify_builder_content-([0-9]+)',
        'themify_builder_([0-9]+)_row',
        'tb_([0-9]+)_column',
        'et_pb_image_([0-9]+)',
        '([a-zA-Z0-9_-]+)?(post|page|portfolio|product|work|port|form|video)([_-])([0-9]+)',
        '([a-zA-Z0-9_-]+)?(post|page|portfolio|product|work|port|form|video)([_-])(entry|item|id)([_-])([0-9]+)',
        '([0-9])+(px|em|rem)',
        '([a-zA-Z0-9_-]+)?wishlist-([0-9])+',
        'wpbs-bookable-([0-9])+',
        'wpbs-day-([0-9])+',
        '([a-zA-Z0-9_-]+)?rand-([0-9])+',
        '([a-zA-Z0-9_-]+)?(([-_])ie|ie8|ie9|ie10|ie11)',
        'testimonials-items-([a-zA-Z0-9_-]+)',
        'instance-([0-9]+)'
    ];

    
    /* ---------------------------------------------------- */
    /* GOOD ALLOWED NUMMERIC CLASSES                        */
    /* ---------------------------------------------------- */
    /* Prefer one digital class in 2 or more.               */
    /* ---------------------------------------------------- */
    var preferedDigitalClasses = [

        // Global
        'wp-image-[0-9]+',
        '([a-zA-Z0-9_-]+)?section([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?slide([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?button([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?image([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?row([a-zA-Z0-9_-]+)?',

        // Special
        'vc_custom_([a-zA-Z0-9_-]+)?',
        'fl-node([a-zA-Z0-9_-]+)?',
        'fl-row([a-zA-Z0-9_-]+)?',
        'module_row_([0-9]+)',
        'module_column_([0-9]+)',
        'et_pb_(section|row)_[0-9]+',
        'kc-css-([0-9]+)',
        'forge-col[0-9]+',
        '(avia|av)-builder-el-([0-9]+)',
        'footer-([0-9]+)',
        '(n2-font-|n2-style-)([a-zA-Z0-9_-]+)?',
        'n2-ss-([0-9]+)item([0-9]+)',
        'n-uc-([a-zA-Z0-9_-]+)',
        'ms-parent-id-([0-9_-]+)',
        'msp-cn-([a-zA-Z0-9_-]+)',
        'e2-([0-9]+)',
        'td_module_([0-9]+)',
        'cp_id_([a-zA-Z0-9_-]+)',
        'snp-pop-([0-9]+)'

    ];


    /* ---------------------------------------------------- */
    /* GOOD ALLOWED NUMMERIC IDS                            */
    /* ---------------------------------------------------- */
    /* YP Editor allow just the following nummeric ids      */
    /* Ex: #section-15 is a allowed nummeric id             */
    /* ---------------------------------------------------- */
    var allowedDigitalIds = [

        // Global
        '([a-zA-Z0-9_-]+)?module([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?slide([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?section([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?row([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?layout([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?form([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?wrapper([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?container([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?parallax([a-zA-Z0-9_-]+)?',
        '([a-zA-Z0-9_-]+)?block([a-zA-Z0-9_-]+)?',

        // Special
        'layers-widget-([a-zA-Z0-9_-]+)?',
        'builder-module-([a-zA-Z0-9_-]+)?',
        'pg-([a-zA-Z0-9_-]+)?',
        'ptpb_s([a-zA-Z0-9_-]+)?',
        'billing_address_([0-9])([a-zA-Z0-9_-]+)?', // woocommerce
        'el-([a-zA-Z0-9_-]+)',
        'dslc-module-([a-zA-Z0-9_-]+)',
        'module-([0-9]){13,13}-([0-9]){4,4}', // upfront
        'wrapper-([0-9]){13,13}-([0-9]){4,4}', // upfront
        'eluid([a-zA-Z0-9_-]+)',
        'nf-form-([0-9]+)-cont',
        'nf-field-([0-9]+)-wrap',
        'ulp-inline-([a-zA-Z0-9_-]+)?',
        'ulp-layer-([a-zA-Z0-9_-]+)?',
        'ulp-([a-zA-Z0-9_-]+)?',
        'esg-grid-([0-9]+)-([0-9]+)',
        'snp-bld-step-([0-9]+)',
        'snp-bld-step-([0-9]+)-el-([0-9]+)',
        'snppopup-content-([0-9]+)'

    ];


    /* ---------------------------------------------------- */
    /* Blocked IDS                                          */
    /* ---------------------------------------------------- */
    var blockedIds = [

        'widget',
        "recentcomments",
        'fws_([a-zA-Z0-9_-]+)', // 3 party plugin dynamic ID
        'rps_([a-zA-Z0-9_-]+)', // 3 party plugin dynamic ID
        'wrapper-[a-zA-Z-0-9]{16,16}', // headway dynamic ID
        "search-form-[a-zA-Z0-9]{13,13}", // default theme dynamic ID
        "fullwidth-block-[a-zA-Z0-9]{13,13}", // themeGem dynamic ID
        'nf-field-([0-9]+)-container',
        'phantom'

    ];


    /* ---------------------------------------------------- */
    /* Prefered tags as selector                            */
    /* ---------------------------------------------------- */
    var simpleLikedTags = [
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "p",
        "span",
        "img",
        "strong",
        "a",
        "li",
        "i",
        "ul",
        "header",
        "footer",
        "article",
        "b",
        "em",
        "code",
        "form",
        "label",
        "ol",
        "small",
        "blockquote",
        "nav"
    ];


    /* ---------------------------------------------------- */
    /* Filtering classes func                               */
    /* ---------------------------------------------------- */
    function process_class(filter,classes){

        // fixes multiple repeat replacing problem
        classes = classes.replace(/ /g, "  ");

        var a;

        for(var i = 0; i < filter.length; i++){

            // Regex
            a = new RegExp("(\\s|^)" + filter[i] + "(\\s|$)","gi");

            // Replace
            classes = classes.replace(a, ' ');

        }

        return classes.trim();

    }


    /* ---------------------------------------------------- */
    /* Filtering test                                       */
    /* ---------------------------------------------------- */
    function filter_test(filter,classN){

        // Is Single Inspector
        if(window.singleInspector){

            // if filter has 'not single inspector' regEx
            if(/\(\!singleInspector\)/g.test(filter)){
                return false; // because is active
            }else{
                filter = filter.replace(/\(\!singleInspector\)/g,'');
            }

        }else{

            // if filter has 'just single inspector' regEx
            if(/\(singleInspector\)/g.test(filter)){
                return false; // because is not active
            }else{
                filter = filter.replace(/\(singleInspector\)/g,'');
            }

        }
                    
        // Regex
        var r = new RegExp("(\\s|^)" + filter + "(\\s|$)","gi");

        // has
        if(r.test(classN)){
            return true;
        }else{ // not have
            return false;
        }

    }


    /* ---------------------------------------------------- */
    /* Deleting non-acceptable classes & ids                */
    /* ---------------------------------------------------- */
    function delete_bad_terms(classes){

        // list
        var classesArray = [];

        // Clean
        classes = $.trim(classes);

        // Clean multispaces
        classes = classes.replace(/\s\s+/g, ' ');

        // Check if still there have another class
        if(classes.indexOf(" ") != -1){

            var classessplit = classes.split(" ");

            // Split with space
            var v;
            for(var i = 0; i < classessplit.length; i++){

                // Clean
                v = $.trim(classessplit[i]);

                // Push
                if(/([\u2018\u2019\u201A\u201B\u2032\u2035\u201C\u201D]|\{|\}|\:|\<|\>|\(|\)|\[|\]|\~|\"|\'|\?|\\)/g.test(v) == false){
                    classesArray.push(v);
                }

            }

        }else{

            // Push if single.
            if(/([\u2018\u2019\u201A\u201B\u2032\u2035\u201C\u201D]|\{|\}|\:|\<|\>|\(|\)|\[|\]|\~|\"|\'|\?|\\)/g.test(classes) == false){
                classesArray.push(classes);
            }

        }

        return classesArray.join(" ");

    }


    /* ---------------------------------------------------- */
    /* Espacing some new ID and Class chars                 */
    /* ---------------------------------------------------- */
    function html5_espace_attr(value){

        if(value === null || value === undefined || value == false || value == true){
            return value;
        }

        return delete_bad_terms(value).replace(/(@|\.|\/|!|\*|#|\+)/g,"\\$1");

    }


    /* ---------------------------------------------------- */
    /* Get Best Class Name                                  */
    /* ---------------------------------------------------- */
    /*
         the most important function in YellowPencil scripts
          this functions try to find most important class name
          in classes.

          If no class, using ID else using tag name.
     */
    window.reGetBestClass = false;
    function get_best_class($element){

        // Default Variables
        var filteredClasses = '',
        DigitalClasses = '',
        numberRex = /\d+/,
        id,tag,element,passedFilter,return_selector,goodClassFounded,digitalClassFounded,classes;

        // Cache
        element = $($element);

        // Element Classes
        classes = element.attr("class");

        // Clean The Element Classes
        if (classes !== undefined && classes !== null) {
            classes = $.trim(class_cleaner(html5_espace_attr(classes)));
        }

        // Cache id and tagname.
        id = element.attr("id");
        tag = element.prop("tagName").toLowerCase();

        if (tag == 'body' || tag == 'html') {
            return tag;
        }

        // If Element has ID, Return ID.
        if (isDefined(id)){

            // trim
            id = $.trim(html5_espace_attr(id));

            // Check if ID has number.
            if(numberRex.test(id)){

                // allow just some digital ids
                var isIdAllowed = false;

                // This id in allowed list?
                for(var d = 0; d < allowedDigitalIds.length; d++){

                    // ************** SPECIAL FILTER TERM ************** */
                    // visual composer #el-xxxx allowed only for row
                    if(/el-([a-zA-Z0-9_-]+)/g.test(id)){
                        if (classes !== undefined && classes !== null) {
                            if(classes.indexOf("vce-row") == -1){
                                continue;
                            }
                        }else{
                            continue;
                        }
                    }

                    // yes
                    if(filter_test(allowedDigitalIds[d],id)){
                        isIdAllowed = true;
                        break;
                    }

                }

                // else not allow
                if(isIdAllowed == false){
                    id = '';
                }

            }

            // ************** SPECIAL FILTER TERM ************** */
            // This id still have after the page refleshed?
            if(/^(nf-form-|nf-field-([0-9]+)-wrap)$/g.test(id) == false){ // js diynamic good ids
                if(window.idList.length > 0 && id.length > 5){
                    if(window.idList.indexOf(id) != -1){
                        id = "";
                    }
                }
            }

            // Blocked id checks
            if (id != '') {

                // Check if a blocked ID
                for(var f = 0; f < blockedIds.length; f++){

                    if(filter_test(blockedIds[f],id)){
                        id = '';
                        break;
                    }

                }

            }


            // return the available id
            if (id != '') {
                return '#' + id;
            }

        }

        var ArrayClasses;

        // If has classes.
        if (classes !== undefined && classes !== null) {

            // Classes to array.
            ArrayClasses = get_classes_array(classes);

            // Must have min 1 and up classList
            if(window.ClassList.length > 0){

                // Each array classes
                for(var j = 0; j < ArrayClasses.length; j++){

                    // check if still have after page reflesh
                    if(window.ClassList.indexOf(ArrayClasses[j]) != -1 && ArrayClasses[j].length > 5){
                        delete ArrayClasses[j];
                    }
                
                }

            }

            // Updating class variable after changes
            classes = ArrayClasses.join(" ").trim();

        }

        // we want never use some class names. so disabling this classes.
        if(isDefined(ArrayClasses)){

            // Trim
            filteredClasses = classes;

            // If length?
            if(filteredClasses.length > 1){

                filteredClasses = process_class(blockedClasses,filteredClasses);

            }

            // Update filtered Classes
            filteredClasses = $.trim(filteredClasses);

        }


        var hasFilteredClasses = false;
        var hasFilteredClasses2 = false;
        var filteredClasses2;

        // If Has Filtered classes
        if (filteredClasses != ''){

            // yes, have.
            hasFilteredClasses = true;

            // Replace significant classes and keep best classes.
            filteredClasses2 = filteredClasses;
            
            // Replace all non useful classes
            if(isDefined(filteredClasses2)){

                // If has
                if(filteredClasses2.length > 1){

                    filteredClasses2 = process_class(unPreferedClasses,filteredClasses2);

                }

                // trim
                filteredClasses2 = $.trim(filteredClasses2);

            }

        }


        // If Has Filtered classes2
        if ($.trim(filteredClasses2) != ''){

            // Yes, have.
            hasFilteredClasses2 = true;

        }


        // Make as array.
        var filteredClassesArray = get_classes_array(filteredClasses);
        var filteredClasses2Array = get_classes_array(filteredClasses2);

        var i, m;

        // Foreach classes and exclude nummeric classes
        if(hasFilteredClasses2){

            var v;
            var isNum = false;
            for(i = 0; i < filteredClasses2Array.length; i++){

                // Value
                v = filteredClasses2Array[i];

                // default
                isNum = false;

                if(numberRex.test(v)){
                    isNum = true;
                }

                // Don't see as nummeric class
                for(var s = 0; s < filterNumSkipBest.length; s++){

                    // skip
                    if(isNum == true && filter_test(filterNumSkipBest[s],v) == true){
                        isNum = false;
                        break;
                    }

                }

                // Has number
                if(isNum){

                    passedFilter = true;

                    for(m = 0; m < blockedDigitalClasses.length; m++){

                        // Not has page-item class | not use vc_'s dynamic class
                        if(filter_test(blockedDigitalClasses[m],v) == true){

                            passedFilter = false;
                            break;

                        }

                    }

                    // Added as nummeric classes
                    if(passedFilter){
                        DigitalClasses += ' ' + v;
                    }

                }

            }

        }

        var filteredDigitalArray = get_classes_array(DigitalClasses);

        var filteredClassesArrayMayNub, filteredClassesMayNub;


        // Clean Up FilteredClasses by digits.
        if(hasFilteredClasses){

            var cleanedFilter = [], cleanedFilter2 = [];
            for(i = 0; i < filteredClassesArray.length; i++){
                if(!numberRex.test(filteredClassesArray[i])){
                    cleanedFilter.push(filteredClassesArray[i]);
                }
            }

            // maybe has numeric but its okay cos we will also filtering
            // it at the end of this function
            filteredClassesArrayMayNub = filteredClassesArray;
            filteredClassesMayNub = filteredClasses;

            filteredClassesArray = cleanedFilter;
            filteredClasses = filteredClassesArray.join(" ");

            if(hasFilteredClasses2){

                for(i = 0; i < filteredClasses2Array.length; i++){
                    if(!numberRex.test(filteredClasses2Array[i])){
                        cleanedFilter2.push(filteredClasses2Array[i]);
                    }
                }

                filteredClasses2Array = cleanedFilter2;

            }

        }

        var u, e;

        // search in good class filter
        if(hasFilteredClasses2){

            goodClassFounded = false;

            // filtered classes
            for (i = 0; i < filteredClasses2Array.length; i++){

                // good filters
                for(u = 0; u < preferedClasses.length; u++){

                    if(filter_test(preferedClasses[u],filteredClasses2Array[i])){

                        // if this is "post" and has hentry, prefer hentry
                        if(filteredClasses2Array[i] == 'post' && filteredClasses2Array.indexOf("hentry") != -1){
                            break;                                    
                        }

                        goodClassFounded = true;
                        return_selector = "." + filteredClasses2Array[i];
                        break;

                    }

                }

                // stop if founded
                if(goodClassFounded){
                    break;
                }

            }

        }


        // Try filtered Classes V1 if not founded in v2
        if(goodClassFounded == false && hasFilteredClasses == true){

            // filtered classes
            for (i = 0; i < filteredClassesArray.length; i++){

                // good filters
                for(u = 0; u < preferedClasses.length; u++){

                    if(filter_test(preferedClasses[u],filteredClassesArray[i])){
                        goodClassFounded = true;
                        return_selector = "." + filteredClassesArray[i];
                        break;
                    }

                }

                // stop if founded
                if(goodClassFounded){
                    break;
                }

            }

        }


        // Some nummeric classes is important.
        if(DigitalClasses != ''){

            digitalClassFounded = false;

            for(var p = 0; p < filteredDigitalArray.length; p++){

                for(e = 0; e < preferedDigitalClasses.length; e++){

                    if (classes !== undefined && classes !== null) {

                        // ************** SPECIAL FILTER TERM ************** */
                        // .kc-css selectable only for row because almost all elements has this class and this makes a dirty selector.
                        if(preferedDigitalClasses[e].indexOf("kc-css") != -1 && /(kc_row)/g.test(classes) == false){
                            continue;
                        }

                        // ************** SPECIAL FILTER TERM ************** */
                        // .fl-node selectable only for row because almost all elements has this class and this makes a dirty selector.
                        if(preferedDigitalClasses[e].indexOf("fl-node") != -1 && /(fl-row|fl-col)/g.test(classes) == false){
                            continue;
                        }

                        // ************** SPECIAL FILTER TERM ************** */
                        // .e2-76 selectable only for section because almost all elements has this class and this makes a dirty selector.
                        if(preferedDigitalClasses[e].indexOf("e2-([0-9]+)") != -1 && /(x-section)/g.test(classes) == false){
                            continue;
                        }

                    }

                    // is one good nummeric? great
                    if(filter_test(preferedDigitalClasses[e],filteredDigitalArray[p]) == true){

                        digitalClassFounded = true;
                        return_selector = "." + filteredDigitalArray[p];
                        break;

                    }

                }

                if(digitalClassFounded){
                    break;
                }

            }

        }

        
        // SPECIAL RULES BY AUTHOR FOR SELECTING BEST ELEMENTS
        if(DigitalClasses != ''){

            // Search digital array if has an elementor-section
            for(e = 0; e < filteredDigitalArray.length; e++){

                // unique selectors best for sections : .elementor-element-82c9d71
                if(filter_test("elementor-element-(.*?)",filteredDigitalArray[e]) == true && /elementor-section/i.test(classes) == true){
                    return_selector = "." + filteredDigitalArray[e];
                    break;
                }

            }

        }


        // use input type for selector
        if(tag == "input" && window.reGetBestClass == false){

            var type = element.attr("type");

            // Single Inspector
            if(mainBody.hasClass("yp-sharp-selector-mode-active")){

                window.reGetBestClass = true;

                var className = get_best_class($element);

                if(isDefined(type)){
                    return_selector = 'input[type=' + type + ']'+className;
                }

                window.reGetBestClass = false;

            // Default Inspector
            }else{

                if(isDefined(type)){
                    return_selector = 'input[type=' + type + ']';
                }

            }


        }
        

        // Prefered Tag
        var preferedTag = false;

        // Try find prefered tags
        for(var n = 0; n < simpleLikedTags.length; n++){

            if(simpleLikedTags[n] == tag){
                preferedTag = tag;
                break;
            }

        }


        var lastLuckNummeric = false;

        // if not have any good selector, try nummeric class which pass neverUseNum filter
        if(DigitalClasses != ''){
            lastLuckNummeric = ai_class(filteredDigitalArray);
        }


        // Matchless Classes for single Inspector
        var matchlessClass = false;

        if(mainBody.hasClass("yp-sharp-selector-mode-active")){

            // Filtered 2 classes: AI
            matchlessClass = matchless2(ai_class(filteredClasses2Array,true,false));

            // Filtered 2 classes: NO AI
            if(matchlessClass == false){
                matchlessClass = matchless2(filteredClasses2Array);
            }


            // filtered 1 classes: AI
            if(matchlessClass == false){
                matchlessClass = matchless2(ai_class(filteredClassesArray,true,false));
            }

            // filtered 1 classes: NO AI
            if(matchlessClass == false){
                matchlessClass = matchless2(filteredClassesArray);
            }

        }


        // prefered Classes
        var classPrefered = false;
        var aiClass, passedBlockedDigital;

        // Filtered 2 classes: AI
        classPrefered = ai_class(filteredClasses2Array,false,false);

        // filtered 1 classes: AI
        if(classPrefered == false){
            classPrefered = ai_class(filteredClassesArray,false,false);
        }

        // kc don't prefer kc-css, prefer kc_column fixes.
        if (classes !== undefined && classes !== null) {
            if(classes.indexOf("kc_column") != -1){
                return_selector = ".kc_column";
            }
        }

        // Recommended selector
        if(isDefined(return_selector)){ // Good Classes

            return return_selector;

        // Cool matchless class for single Inspector
        }else if(matchlessClass != false){

            return matchlessClass;

        // Try to use prefered class
        }else if(classPrefered != false){

            return classPrefered;

        // use prefered tags
        }else if(preferedTag != false){

            return preferedTag;

        // use a nummeric class
        }else if(lastLuckNummeric != false){

            return lastLuckNummeric;

        // Use any tag if not id
        }else if(tag != 'div'){

            return tag;

        // Use any class without Nummeric if not have alternative.
        }else if(filteredClasses != '' && filteredClasses != undefined){

            // Get AI class.
            aiClass = ai_class(filteredClassesArray);

            // this func will use any class if not have an alternative
            // but blocked digital classes are is dangerous, because these classes
            // is dynamic, changes on page re-load. Use div tag but
            // never use blocked digital class.
            passedBlockedDigital = true;

            // Loops
            for(m = 0; m < blockedDigitalClasses.length; m++){

                // Not has page-item class | not use vc_'s dynamic class
                if(filter_test(blockedDigitalClasses[m],aiClass.replace(/^(\.|#)/g, '')) == true){

                    passedBlockedDigital = false;
                    break;

                }

            }

            // return AI class if pass blocked digital classes
            if(passedBlockedDigital){
                return aiClass;
            }else{
                return tag; // Return tag even "div".
            }

        // Use any class if not have alternative. NO NUMMERIC FILTER
        }else if(filteredClassesMayNub != '' && filteredClassesMayNub != undefined){

            // Get AI class.
            aiClass = ai_class(filteredClassesArrayMayNub);

            // this func will use any class if not have an alternative
            // but blocked digital classes are is dangerous, because these classes
            // is dynamic, changes on page re-load. Use div tag but
            // never use blocked digital class.
            passedBlockedDigital = true;

            // Loops
            for(m = 0; m < blockedDigitalClasses.length; m++){

                // Not has page-item class | not use vc_'s dynamic class
                if(filter_test(blockedDigitalClasses[m],aiClass.replace(/^(\.|#)/g, '')) == true){

                    passedBlockedDigital = false;
                    break;

                }

            }

            // return AI class if pass blocked digital classes
            if(passedBlockedDigital){
                return aiClass;
            }else{
                return tag; // Return tag even "div".
            }

        }else{

            return tag;  // Return tag even "div".

        }

    }



    /* ---------------------------------------------------- */
    /* Finds matchless2 Classes                             */
    /* ---------------------------------------------------- */
    function matchless2(classes){

        // ai_class returns false
        if(classes === false || classes == ''){
            return false;
        }

        // Find
        var matchlessClasses = classes.sort(function(b, a) {
            return iframeBody.find("."+b).length - iframeBody.find("."+a).length;
        });

        // be sure it is just 1
        if(iframeBody.find("."+matchlessClasses[0]).length == 1){

            return "." + matchlessClasses[0];

        }

        return false;

    }


    /* ---------------------------------------------------- */
    /* Finds AI Classes                                     */
    /* ---------------------------------------------------- */
    function ai_class(classes,array,alternative){

        // 0 classes
        if(classes.length == 0){
            return false;
        }

        // 1 classes: has alternative
        if(classes.length == 1 && alternative == true){
            return false;
        }

        // 1 classes: no alternative
        if(array == false){

            if(classes.length == 1 && alternative == false){

                if(classes[0].length > 1){

                    return "." + classes[0];

                }else{

                    return false;

                }

            }

        }else if(classes.length == 1 && alternative == false){

            if(classes[0].length > 1){

                return classes;

            }else{

                return false;

            }

        }


        // Variables
        var newClasses = [],new2Classes = [],depthArray = [],tagArray = [],i,new4Classes = [];

        // Data
        var a1 = []; // just classes which has "-"
        var a2 = []; // just classes which has "_"

        // Filter: Difference parent depth and difference HTML tags
        for(i = 0; i < classes.length; i++){

            // Arrays
            depthArray  = [];
            tagArray = [];

            if(/(\,|\[|\]|\#)/g.test(classes[i])){
                continue;
            }

            // Each current class
            iframe.find("." + classes[i]).each(function(){

                var element = $(this);

                // Push depth len
                depthArray.push(element.parents().length);

                // Push tags used
                tagArray.push(element.prop("tagName"));

            });

            var depthArrayEquals = depthArray.every(function(v, i, a){
                return v === a[0];
            });

            var tagArrayEquals = tagArray.every(function(v, i, a){
                return v === a[0];
            });

            // Passed depth and tag methods
            if(depthArrayEquals && tagArrayEquals){
                newClasses.push(classes[i]);
            }

        }

        // Use default if newClasses is not avaiable
        if(newClasses.length == 0){
            newClasses = classes;
        }


        // Filter a1
        for(i = 0; i < newClasses.length; i++){

            // just classes which has "-"
            if (/\_/g.test(newClasses[i]) == false && /\-/g.test(newClasses[i]) == true){
                a1.push(newClasses[i]);
            }

        }


        // Try a2 if a1 is empty.
        if(a1.length == 0){
        
            // Filter a2
            for(i = 0; i < newClasses.length; i++){

                // just classes which has "-"
                if (/\-/g.test(newClasses[i]) == false && /\_/g.test(newClasses[i]) == true){
                    a2.push(newClasses[i]);
                }

            }

            // a1 and a2 is empty
            if(a2.length == 0){

                new2Classes = newClasses;

            }else{

                // Use a2 if it is available
                new2Classes = a2;

            }

        }else{ // Use a1 if available

            new2Classes = a1;

        }



        // Filter: 3 time repeated char classes
        for(i = 0; i < new2Classes.length; i++){

            // If char not repeat 3 time as tessst.
            if (/(.)\1\1/.test(new2Classes[i]) == false){
                new4Classes.push(new2Classes[i]);
            }

        }

        // Use non filtered classes if any class cant pass
        if(new4Classes.length == 0){
            new4Classes = newClasses;
        }


        // Sort
        new4Classes.sort(function(a, b){
            return b.length - a.length;
        });


        // Return format
        if(array){
            return new4Classes;
        }else{
            return "." + minimize_class(new4Classes);
        }

    }


    // 7.0.6
    // bottom-header-top-nav -> header-top-nav
    // header-top-nav-center -> header-top-nav
    function minimize_class(classAr){

        // Default
        var resultClass = classAr[0];

        // Default 2
        var prev_class = classAr[0].split(/[-_]/)[0] + classAr[0].charAt(classAr[0].split(/[-_]/)[0].length) + classAr[0].split(/[-_]/)[1];

        // Variables
        var last = null, first = null,check = false, i, x, last_class, container = iframe;


        // Check until the end
        for(i = 2; i < classAr[0].split(/[-_]/).length-1; i++){

            // no last slash
            prev_class = prev_class + classAr[0].charAt(prev_class.length) + classAr[0].split(/[-_]/)[i];

            // stop if last part includes an number or active term
            last = classAr[0].split(/[-_]/)[classAr[0].split(/[-_]/).length - i];
            if(last.length < 3 || /(\d|current|active)/g.test(last) == true){
                break;
            }

            // Search in classes
            for(x = 0; x < classAr.length; x++){

                if(classAr[x] === prev_class){
                    resultClass = prev_class;
                    check = true;
                    break;
                }

            }

            // break
            if(check){
                break;
            }

        }


        // If class didnt cutted from the last then try cut from first.
        if(check == false && classAr[0].split(/[-_]/)[classAr[0].split(/[-_]/).length-2] != undefined){

            // Default 1
            last_class = classAr[0].split(/[-_]/)[classAr[0].split(/[-_]/).length-2] + classAr[0].charAt(classAr[0].length-classAr[0].split(/[-_]/)[classAr[0].split(/[-_]/).length-1].length-1) + classAr[0].split(/[-_]/)[classAr[0].split(/[-_]/).length-1];

            // Check until the end
            for(i = classAr[0].split(/[-_]/).length-1; i > 2; i--){

                // no first slash
                last_class = classAr[0].split(/[-_]/)[i-2] + classAr[0].charAt(classAr[0].length-last_class.length-1) + last_class;

                // stop if last part includes an number or active term
                first = classAr[0].split(/[-_]/)[classAr[0].split(/[-_]/).length - i - 1];
                if(first.length < 3 || /(\d|current|active)/g.test(first) == true){
                    break;
                }

                // Search in classes
                for(x = 0; x < classAr.length; x++){

                    if(classAr[x] === last_class){
                        resultClass = last_class;
                        break;
                    }

                }

                // break
                if(check){
                    break;
                }

            }

        }


        // Use parent element as container.
        if(get_selected_element().parent().length > 0){
            container = get_selected_element().parent();
        }


        // Cutting extra words from the class : if element count is same
        if(container.find("." + classAr[0]).length == container.find("." + resultClass).length){
            return resultClass;
        }else{
            return classAr[0];
        }

    }


    /* ---------------------------------------------------- */
    /* Getting current selector                             */
    /* ---------------------------------------------------- */
    function get_current_selector(selection){

        // Get current
        var parentsv = mainBody.attr("data-clickable-select");

        var newSelector = false;

        // Adds state
        if(selection == true){
            if(mainBody.hasAttr("data-yp-selector")){
                selection = mainBody.attr("data-yp-selector");
            }else{
                selection = "";
            }
        }else{
            selection = "";
        }

        // If has
        if (isDefined(parentsv)) {

            // If unvalid
            if(check_selector(parentsv,true,false, false) == false){

                newSelector = get_parents(null, "default") + selection;

            }else{ // if valid return

                return parentsv + selection;

            }

        // If not has selector
        } else {

            // return
            newSelector = get_parents(null, "default") + selection;

        }

        // Replace old with new
        if(is_content_selected()){

            if(newSelector != false){

                if(iframe.find(".yp-selected-others").length == 0 && iframe.find(newSelector).length > 1){
                    body.addClass("yp-sharp-selector-mode-active");
                    newSelector = get_parents(null, "default") + selection;
                    body.removeClass("yp-sharp-selector-mode-active");
                }

                set_selector(newSelector, get_selected_element(), true);
                return newSelector;

            }
        }

    }


    /* ---------------------------------------------------- */
    /* Finds bad queries                                    */
    /* ---------------------------------------------------- */
    function filter_bad_queries(data){
        return  data.replace(/[\u2018\u2019\u201A\u201B\u2032\u2035\u201C\u201D]/g,'');
    }


    /* ---------------------------------------------------- */
    /* Checks if selector valid                             */
    /* ---------------------------------------------------- */
    function check_selector(selector,mustHas,searchInBody,error){

        // Undefined
        if(isUndefined(selector)){
            if(error){
                return lang.selector_no_match;
            }else{
                return false;
            }
        }

        // Foundable selector
        selector = get_foundable_query(selector, true, true, true);

        var content;
        if(searchInBody){
            content = iframeBody;
        }else{
            content = iframe;
        }

        try {

            // Get element
            var element = content.find(selector);

            // Return false if document not have this element
            if(mustHas == true && element.length == 0){
                if(error){
                    return lang.selector_no_match;
                }else{
                    return false;
                }
            }else{
                if(error){
                    return true;
                }else{
                    return element; // return true if valid
                }
            }

            
        } catch (e) {
            if(error){
                return e.message;
            }else{
                return false;
            }
        }

    }


    /* ---------------------------------------------------- */
    /* Getting minimized CSS. Cleaning spaces.              */
    /* ---------------------------------------------------- */
    function get_minimized_css(data,media){

        // Clean.
        data = data.replace(/(\r\n|\n|\r)/g, "").replace(/\t/g, '');

        // Don't care rules in comment.
        data = data.replace(/(\/\*)(.*?)\*\//g, "");

        // clean.
        data = data.replace(/\}\s+\}/g, '}}').replace(/\s+\{/g, '{');

        // clean.
        data = data.replace(/\s+\}/g, '}').replace(/\{\s+/g, '{');

        // replace queries
        data = filter_bad_queries(data);

        // Don't care rules in media query
        if(media === true){
            data = data.replace(/@media(.*?)\}\}/g, '').replace(/@?([a-zA-Z0-9_-]+)?keyframes(.*?)\}\}/g, '').replace(/@font-face(.*?)\}\}/g, '').replace(/@import(.*?)\;/g,'').replace(/@charset(.*?)\;/g,'');
        }

        // data
        return data;

    }


    /* ---------------------------------------------------- */
    /* This function cropping selector until 5 class        */
    /* ---------------------------------------------------- */
    function crop_selector(selector){

        var limit = 5, shortSelectorReady = false, foundedElements, shortSelector, shortSelectorString, foundedElShort, len, selectorArray, lastBetterSelector = null;

        // generate long selector as we want with: "window.minCroppedSelector"
        if(window.minCroppedSelector != false){
            limit = window.minCroppedSelector;
        }

        // Array of selector
        selectorArray = get_selector_array(selector);

        // Keep selectors smart and short!
        if(selectorArray.length > limit){

            // Find a founded elements
            foundedElements = iframe.find(selector).length;

            // Get array from selector.
            if(selector.indexOf(">") == -1){
                shortSelector = selectorArray;
            }else{
                shortSelector = selector.replace(/\s+>\s+/g, ">");
            }

            // Each array items
            $.each(selectorArray,function(){

                if(shortSelectorReady === false){

                    // Use array if not have >
                    if(selector.indexOf(">") == -1){

                        // Shift
                        shortSelector.shift();

                        // make it short
                        shortSelectorString = shortSelector.join(" ");

                        // Selector len
                        len = shortSelector.length;

                    }else{

                        // Shift
                        if(/^[^\s>]+\s/.test(shortSelector) == false){
                            shortSelector = shortSelector.replace(/\s[^\s>]+\s/, " ");
                        }else{
                            shortSelector = shortSelector.replace(/^[^\s>]+\s/, "");
                        }

                        // make it short
                        shortSelectorString = shortSelector;

                        // Selector len
                        len = get_selector_array(shortSelector);

                    }

                    // Search
                    foundedElShort = iframe.find(shortSelectorString).length;

                    // One better
                    if(foundedElements == foundedElShort){
                        lastBetterSelector = shortSelectorString;
                    }

                    // Shift until make it maximum 5 item
                    if(len <= limit && foundedElements == foundedElShort){
                        shortSelectorReady = true;
                        selector = shortSelectorString;
                    }

                }

            });

        }

        // Apply.
        if(shortSelectorReady){
            selector = $.trim(selector.replace(/>/g, " > "));
        }else if(lastBetterSelector != null){
            selector = $.trim(lastBetterSelector.replace(/>/g, " > "));
        }

        return selector;

    }


    /* ---------------------------------------------------- */
    /* This function trying all settings for the selector   */
    /* if there 10 classes in the selector                  */
    /* it will try 100 combine                              */
    /* ---------------------------------------------------- */
    function multiple_variation(selector){

        // Get current selector length
        var selectorLen = iframejs.querySelectorAll(selector).length;

        // Orginal selector
        var selectorOrginal = crop_selector(selector);
        
        // will keep the results in this array
        var resultArray = [];

        var last,first,cssSelector = '';

        // Need to first and last
        if(selector.indexOf(">") == -1){

            // The Array
            selector = get_selector_array(selector);

            // Last element
            last = selector[selector.length - 1];
            selector.pop();
          
            // First element
            first = selector[0];
            selector.shift();

        // return cropped_selector if selector has ">" symbols.
        }else{

            // return cropped
            return selectorOrginal;

        }


        // Try to delete structural selectors
        var newSelector = [],passed,r;
        for(var i = 0; i < selector.length; i++){

            passed = true;

            for(var ix = 0; ix < unPreferedSelectors.length; ix++){

                // Regex
                r = new RegExp("(\\s|^)\." + unPreferedSelectors[ix] + "(\\s|$)","gi");

                // has
                if(r.test(selector[i])){
                    passed = false;
                    break;
                }

            }

            if(passed){
                newSelector.push(selector[i]);
            }

        }


        if(isUndefined(first) || isUndefined(first)){
            return selectorOrginal;
        }


        // just try combine first and last
        if(first.indexOf(" ") == -1 && last.indexOf(" ") == -1){
            cssSelector = space_cleaner(first + window.separator + last);
        }


        // is valid? // first & last
        if(check_selector(cssSelector,false,false,false) && window.minCroppedSelector == false){

            // Combine just first and last if there were a lot selector but all were structural selectors.
            if(selector.length >= 1 && newSelector.length == 0 && iframe.find(cssSelector).length == selectorLen){
                return cssSelector;
            }

        }


        // Update only if high than 0
        if(newSelector.length > 0){
            selector = newSelector;
        }


        // Must be minimum 1 class excluding
        // first and last classes in the selector.
        if(selector.length < 1){
            return selectorOrginal;
        }


        // Prefer only classes which used in same parent depth and same tag names.
        // The class that which used in difference depth is structural class
        // The class that which used in difference tags is structural class.
        var depthArray,tagArray,ek;
        var newSelector2 = [];
        for(i = 0; i < selector.length; i++){

            if(/.|#/g.test(selector[i])){

                // Arrays
                depthArray  = [];
                tagArray = [];

                // Skip if cannot find
                if(check_selector(selector[i],false,false,false) == false){
                    return true;
                }

                // Each current class
                iframe.find(selector[i]).each(function(){

                    ek = $(this);

                    // Push depth len
                    depthArray.push(ek.parents().length);

                    // Push tags used
                    tagArray.push(ek.prop("tagName"));

                });

                var depthArrayEquals = depthArray.every(function(v, i, a){
                    return v === a[0];
                });

                var tagArrayEquals = tagArray.every(function(v, i, a){
                    return v === a[0];
                });

                // Passed depth and tag methods
                if(depthArrayEquals && tagArrayEquals){
                    newSelector2.push(selector[i]);
                }

            }

        }


        // Default
        var combine = selector_combine(selector, resultArray, first, last, selectorLen);

        // Update only if high than 1
        if(newSelector2.length > 1){

            // Better combine with prefered classes
            var newCombine = selector_combine(newSelector2, resultArray, first, last, selectorLen);

            // Apply
            if(newCombine.length > 0){
                combine = newCombine;
            }

        }
      
      
        // There not have any variation
        if(resultArray.length == 0){
            return selectorOrginal;
        }
      
      
        // Find the short
        resultArray.sort(function(a,b){
            return a.length - b.length;
        });


        // Find the selector long as we want with "window.minCroppedSelector"
        if(window.minCroppedSelector != false){

            // loop the results
            for(var k = 0; k < resultArray.length; k++){

                // find the longer selector
                if(get_selector_array(resultArray[k]).length >= window.minCroppedSelector){
                    return space_cleaner(resultArray[k]);
                }

            }

            return selectorOrginal;

        }
        

        // Return the result
        return space_cleaner(resultArray[0]);
      
    }


    /* ---------------------------------------------------- */
    /* Tring combine selectors values                       */
    /* ---------------------------------------------------- */
    function selector_combine(selector, resultArray, first, last, selectorLen){

        // Variables
        var nexts = selector.slice(0);
        var current,i,n,currentNext,testSelector;

        // Combine All
        for(i = 0; i < selector.length; i++){
        
            current = selector[i];

            // all selector for test
            testSelector = first + window.separator + current + window.separator + last;
        
            // Add if pass
            if(iframejs.querySelectorAll(testSelector).length == selectorLen){
                resultArray.push(testSelector);
            }
        
            // Shift on  each
            nexts.shift();

            // Use current with all other selector parts
            for(n = 0; n < nexts.length; n++){
              
                currentNext = nexts[n];

                // all selector for test
                testSelector = first + window.separator + current + window.separator + currentNext + window.separator + last;
              
                // Add if pass
                if(iframejs.querySelectorAll(testSelector).length == selectorLen){
                    resultArray.push(testSelector);
                }
              
            }
        
        }

        return resultArray;

    }



    /* ---------------------------------------------------- */
    /* Super Fast Simple Selectors                          */
    /* ---------------------------------------------------- */
    function get_simple_selector(element){

        // Default selector array
        var selector = [];

        // getting selected element as default if null
        if(element === null){
            element = get_selected_element();
        }

        // Be sure this item is valid.
        if (element[0] === undefined || element[0] === false || element[0] === null) {
            return false;
        }

        // Tag info
        var tag = element[0].tagName;

        // HTML tag not supported.
        if(isUndefined(tag) || tag == 'HTML'){
            return false;
        }

        // Add Tag
        selector.push(tag.toLowerCase());

        // Getting classes
        if (element.hasAttr("class")) {

            // Getting classes
            var elClasses = get_classes_array(element.attr("class"));

            // add classes one by one
            for(var i = 0; i < elClasses.length; i++){

                // Skip YP classes
                if(class_cleaner(elClasses[i]) == ""){
                    continue;
                }

                // Maximum 8 selector or 45 char
                if(selector.length > 8 || selector.join("").length > 45){
                    break;
                }

                // Add
                selector.push("." + elClasses[i]);

            }

        }

        // Get ID too
        if (element.hasAttr("id")) {

            // Getting ID
            var id = element.attr("id");

            // ADD If ID valid
            if(class_cleaner(id) == ""){
                selector.push("#" + id);
            }

        }

        // Return super simple fast selector
        return selector.join("");

    }



    /* ---------------------------------------------------- */
    /* Get Parents                                          */
    /* ---------------------------------------------------- */
    function get_parents(element, status){

        // If parent already has.
        var parentsv = body.attr("data-clickable-select");

        // If status default, return current data.
        if (status == 'default' && window.minCroppedSelector == false) {

            // If defined
            if (isDefined(parentsv)) {

                // if valid return
                if(check_selector(parentsv,true,false,false) != false){
                    return parentsv;
                }

            }

        }

        if(status == 'defaultNoCache'){
            status = 'default';
        }


        if(element === null){
            element = get_selected_element();
        }

        // Be sure this item is valid.
        if (element[0] === undefined || element[0] === false || element[0] === null) {
            return false;
        }

        // Tag info
        var tag = element[0].tagName;


        // Is Single Inspector
        if(mainBody.hasClass("yp-sharp-selector-mode-active")){
            status = 'sharp';
        }


        // HTML tag not supported.
        if(isUndefined(tag) || tag == 'HTML'){
            return false;
        }

        // If body, return.
        if (tag == 'BODY') {
            return 'body';
        }


        // Getting item parents.
        var parents = element.parentsUntil("body"), selector = '', reseted, inSelected, currentSelector,previousSelector = '';


        // Get last selector
        var lastSelector = get_best_class(element);


        // Return if element selector is ID.
        if(/#/g.test(lastSelector) == true){
            return lastSelector;
        }

        // Resets
        var resetSelectors = [], dontReset = false, dontResetLive = false;


        // Check if there is waited selector
        if(window.minCroppedSelector != false){

            // waited selector by long.
            if(window.minCroppedSelector >= parents.length){
                dontReset = true;
            }

        }


        // Foreach all loops.
        for (var i = parents.length - 1; i >= 0; i--) {

            // Default false
            reseted = false;

            // Get Selector of the current parent element.
            currentSelector = get_best_class(parents[i]);

            // Don't reset if waited selector is long
            dontResetLive = false;
            if(window.minCroppedSelector != false){
                if((i-1) <= window.minCroppedSelector){
                    dontResetLive = true;
                }
            }

            // Check if this has a class or ID.
            if(/\.|#/g.test(currentSelector) == true && dontReset == false && dontResetLive == false){

                // Check if need or no need for generated previous selectors
                if(iframe.find(currentSelector).length == 1 && currentSelector != ".active"){

                    // dont reset by last selector
                    var min1T = true;

                    // if class and last selector, cant reset
                    if(currentSelector.indexOf("#") == -1 && i <= 0){
                        min1T = false;
                    }

                    // Don't reset if selector is class and last.
                    if(min1T){

                        // No Need to previous Selectors
                        if (status != 'sharp') {

                            // Reset old selectors
                            selector = currentSelector + window.separator;

                            resetSelectors.push(currentSelector);
                            reseted = true;

                        }else{

                            // In Single Selector reset only if no need nth-child selector.
                            if (single_selector(selector, true).indexOf("nth-child") == -1) {

                                // Reset old selectors
                                selector = currentSelector + window.separator;

                                resetSelectors.push(currentSelector);
                                reseted = true;

                            }

                        }

                    }

                }

            }


            // Can't reset.
            // Continue to add current class name/id/tag to current selector
            if(reseted == false){

                // Check if same selector has in the selector
                inSelected = iframe.find(selector+window.separator+currentSelector+window.separator+currentSelector+","+selector+window.separator+previousSelector+window.separator+currentSelector).length;

                if (status == 'default' && inSelected > 0 && space_cleaner(selector).trim() != ''){
                    selector = space_cleaner(selector).trim() + " > " + currentSelector + window.separator; // Add With '>' separator
                }else{ 
                    selector += currentSelector + window.separator; // Add with space separator
                }

            }

            previousSelector = currentSelector;


        } // Each end.


        // Fix google map contents
        if(selector.indexOf(".gm-style") != -1){
            selector = '.gm-style';
        }


        // Check if same selector has in the selector
        inSelected = iframe.find(selector+window.separator+lastSelector+window.separator+lastSelector+","+selector+window.separator+currentSelector+window.separator+lastSelector).length;

        if (inSelected > 0 && selector.length > 0){
            selector = space_cleaner(selector + " > " + lastSelector); // Add With '>' separator
        }else{ 
            selector = space_cleaner(selector + window.separator + lastSelector); // Add with space separator
        }


        // If there is multiple reset indexs and the selected reset is not a ID
        // so lets find the best reset selector.
        if(resetSelectors.length > 1 && selector.charAt(0) != '#'){


            // Try to delete structural selectors
            var newReset1 = [],passed,r;
            for(i = 0; i < resetSelectors.length; i++){

                passed = true;

                for(var ix = 0; ix < unPreferedSelectors.length; ix++){

                    // Regex
                    r = new RegExp("(\\s|^)\." + unPreferedSelectors[ix] + "(\\s|$)","gi");

                    // has
                    if(r.test(resetSelectors[i])){
                        passed = false;
                        break;
                    }

                }

                if(passed){
                    newReset1.push(resetSelectors[i]);
                }

            }

            var newReset2;

            // Try newReset2 if newReset1 has more items than 1.
            if(newReset1.length > 1){

                // Prefer only classes which used in same parent depth and same tag names.
                // The class that which used in difference depth is structural class
                // The class that which used in difference tags is structural class.
                var depthArray,tagArray,ek;
                newReset2 = [];
                for(i = 0; i < newReset1.length; i++){

                    // Arrays
                    depthArray  = [];
                    tagArray = [];

                    // Each current class
                    iframe.find(newReset1[i]).each(function(){

                        ek = $(this);

                        // Push depth len
                        depthArray.push(ek.parents().length);

                        // Push tags used
                        tagArray.push(ek.prop("tagName"));

                    });

                    var depthArrayEquals = depthArray.every(function(v, i, a){
                        return v === a[0];
                    });

                    var tagArrayEquals = tagArray.every(function(v, i, a){
                        return v === a[0];
                    });

                    // Passed depth and tag methods
                    if(depthArrayEquals && tagArrayEquals){
                        newReset2.push(newReset1[i]);
                    }

                }

            }


            // empty if is undefined
            if(isUndefined(newReset2)){
                newReset2 = [];
            }


            // null as default
            var newFirstSelector = null;


            // Get first selector
            if(newReset2.length > 0){
                newFirstSelector = newReset2[newReset2.length -1];
            }else if(newReset1.length > 0){
                newFirstSelector = newReset1[newReset1.length -1];
            }


            // if is valid
            if(newFirstSelector != null){

                // Get all selector exlcude first class
                var newSelector = selector.match(/(\s)(.*?)$/g).join('').toString();
                
                // Get ready the new selector
                newSelector = newFirstSelector + newSelector;

                // be sure it is valid
                if(check_selector(newSelector, true,false,false)){

                    // be sure this selectors make same work
                    if(comparison_selector(selector, newSelector)){
                        // update
                        selector = newSelector;

                    }

                }

            } // not valid

        }


        // Last Parent Query Status
        if(window.setSelector == false){
            window.lastParentQueryStatus = status;
        }

        // Return if is single selector
        if (status == 'sharp') {
            return single_selector(selector, false);
        }


        // Check all others elements has same nodename or not.
        if(simpleLikedTags.indexOf(tag.toLowerCase()) != -1){

            var foundedTags = [], n;
            iframe.find(selector).each(function(){

                n = $(this).prop("tagName");

                if(foundedTags.indexOf(n) == -1){
                    foundedTags.push(n);
                }

            });

            // h1.test | div.test = Use "h1"
            if(foundedTags.length > 1 && /(\.|#)/g.test(lastSelector) == true){

                selector = $.trim(selector.match(new RegExp("^(.*?)(?=" + selector_regex(lastSelector) + "$)","g")).join('').toString()) + window.separator + tag.toLowerCase() + lastSelector;

            // if this is a single element, use the tag.
            }else if(is_matchless2(selector,lastSelector,tag)){

                selector = $.trim(selector.match(new RegExp("^(.*?)(?=" + selector_regex(lastSelector) + "$)","g")).join('').toString()) + window.separator + tag.toLowerCase();

            }

        }


        // remove multiple spaces
        selector = space_cleaner(selector);


        // Cleans ">" symbols from selector if not need.
        if(selector.indexOf(">") != -1){

            var length = selector.split(">").length;
            var elementLength = iframe.find(selector).length;

            for(i = 1; i < length; i++){

                if(iframe.find(selector.replace(/ > /i,' ')).length == elementLength){
                    selector = selector.replace(/ > /i,' ');
                }

            }

        }


        // Ready
        selector = multiple_variation(space_cleaner(selector));

        // Use as single inspector if selector is div and more than 20
        if(/( |>)div$/g.test(selector) && iframe.find(selector).length >= 20){
            return single_selector(selector);
        }


        // Return result.
        return selector;

    }


    /* ---------------------------------------------------- */
    /* Return true if the element in same parent or         */
    /* selector match a single element                      */
    /* ---------------------------------------------------- */
    function is_matchless2(selector, lastSelector, tag){

        var element = iframe.find(selector);
        var element2 = iframe.find($.trim(selector.match(new RegExp("^(.*?)(?=" + selector_regex(lastSelector) + "$)","g")).join('').toString()) + window.separator + tag.toLowerCase());
        
        // If tag and class selector length is same
        if(element.length == 1 && element2.length == 1){
            return true;

        // continue if the element length is same
        }else if(element.length == element2.length && /.|#/g.test(lastSelector)){

            // Arrays
            var depthArray  = [];
            var tagArray = [];

            // Each current class
            iframe.find(lastSelector).each(function(){

                var element = $(this);

                // Push depth len
                depthArray.push(element.parents().length);

                // Push tags used
                tagArray.push(element.prop("tagName"));

            });

            var depthArrayEquals = depthArray.every(function(v, i, a){
                return v === a[0];
            });

            var tagArrayEquals = tagArray.every(function(v, i, a){
                return v === a[0];
            });

            // Passed depth and tag methods
            if(depthArrayEquals && tagArrayEquals){
                return true;
            }

        }

        return false;

    }

    

    /* ---------------------------------------------------- */
    /* Draw borders.                                        */
    /* ---------------------------------------------------- */
    function draw_box(element, classes) {

        var element_p;

        if (typeof element === 'object') {
            element_p = $(element);
        } else { // selector string
            element_p = iframe.find(element);
        }

        // Check element selector boolen
        var elementSelected = is_content_selected();

        // Default
        var showMarPad = false;

        // Possible to show margin & padding
        if(ypOption.show_margin_padding_on_hover || elementSelected){
            showMarPad = true;
        }

        // Be sure this element have.
        if (element_p.length > 0) {

            // Size variables
            var marginTop, marginBottom, marginLeft, marginRight, paddingTop, paddingBottom, paddingLeft, paddingRight, marginLeftOr, marginRightOr, paddingTopOr, paddingRightOr, paddingBottomOr, paddingLeftOr;

            // Text Vars
            var marginTopText = '', marginRightText = '', marginBottomText = '', marginLeftText = '';
            var paddingTopText = '', paddingRightText = '', paddingBottomText = '', paddingLeftText = '';

            // show margin, padding if this option true
            if(showMarPad){

                // Margin
                marginTop = element_p.css("marginTop");
                marginBottom = element_p.css("marginBottom");
                marginLeft = element_p.css("marginLeft");
                marginRight = element_p.css("marginRight");

                // Padding
                paddingTop = element_p.css("paddingTop");
                paddingBottom = element_p.css("paddingBottom");
                paddingLeft = element_p.css("paddingLeft");
                paddingRight = element_p.css("paddingRight");

                if(parseFloat(marginTop) <= 0){
                    marginTop = "0px";
                }
                if(parseFloat(marginBottom) <= 0){
                    marginBottom = "0px";
                }
                if(parseFloat(marginRight) <= 0){
                    marginRight = "0px";
                }
                if(parseFloat(marginRight) <= 0){
                    marginRight = "0px";
                }

                // Other
                marginLeftOr = marginLeft;
                marginRightOr = marginRight;

                // Orginal Padding
                paddingTopOr = parseInt(paddingTop);
                paddingRightOr = parseInt(paddingRight);
                paddingBottomOr = parseInt(paddingBottom);
                paddingLeftOr = parseInt(paddingLeft);

                if(parseInt(paddingTop) == 0){paddingTop = "7px";}
                if(parseInt(paddingRight) == 0){paddingRight = "5px";}
                if(parseInt(paddingBottom) == 0){paddingBottom = "7px";}
                if(parseInt(paddingLeft) == 0){paddingLeft = "7px";}

                iframe.find(".yp-zero-margin-h").removeClass("yp-zero-margin-h");

                if(parseInt(marginTop) == 0 && elementSelected){
                    marginTop = "5px";
                    paintCanvas.active.find(".yp-selected-boxed-margin-top").addClass("yp-zero-margin-h");
                }

            }

            // Get Element
            var elementGet = element_p.get(0);

            // Stop if this not valid
            if(isUndefined(elementGet)){
                return false;
            }

            // generate box size
            var boxSize = elementGet.getBoundingClientRect();

            // get scroll top
            var scrollTop = parseFloat(iframe.scrollTop());

            // get sizes
            var widthBoxes = boxSize.width;
            var heightBoxes = boxSize.height;
            var topBoxes = boxSize.top + scrollTop;
            var leftBoxes = boxSize.left;
            var bottomBoxes = boxSize.bottom + scrollTop;


            // Frame Height
            var iframeHeight = iframe.height();


            // Show 5px Margin Bottom if element not in bottom.
            if(elementSelected == true && parseInt(marginBottom) == 0 && Math.round(bottomBoxes) != iframeHeight && Math.round(bottomBoxes+2) != iframeHeight){
                marginBottom = "5px";
                paintCanvas.active.find(".yp-selected-boxed-margin-bottom").addClass("yp-zero-margin-h");
            }


            // bottom element or not
            if (elementSelected == true && Math.round(bottomBoxes) == iframeHeight || Math.round(bottomBoxes+2) == iframeHeight) {
                body.addClass("yp-selected-bottom");
            }else{
                body.removeClass("yp-selected-bottom");
            }


            // Window Width
            var iframeWidth = $("#iframe").width();
            var scroll_width = iframeWidth - iframe.find("html").width();
            var windowWidth = $(window).width() - window.leftbarWidth - scroll_width;


            // Extra
            var rightExtra = 1;
            if (elementSelected) {
                rightExtra = 2;
            }


            // Fix scroll problems
            if ((leftBoxes + widthBoxes) > windowWidth) {

                widthBoxes = windowWidth - leftBoxes - rightExtra;

            }else if(is_responsive_mod()){

                if ((leftBoxes + widthBoxes) > iframeWidth) {
                    widthBoxes = iframeWidth - leftBoxes - scroll_width;
                }

                if(iframeWidth == widthBoxes && iframe.find("html").height() > $("#iframe").height()){
                    widthBoxes = widthBoxes - scroll_width;
                }

            }

            // Left in pixel to right border
            var rightBoxes = leftBoxes + widthBoxes - rightExtra;


            // if element full width
            if ((leftBoxes + widthBoxes + 2) >= (iframeWidth - scroll_width)) {
                body.addClass("yp-full-width-selected");
            }else{
                body.removeClass("yp-full-width-selected");
            }


            // show margin, padding if this option true
            if(showMarPad){

                // firefox dont get marginRight if is auto, so this fix problem.
                var isMarginAuto = false;
                if(iframeWidth == (parseFloat(marginLeft * 2)) + widthBoxes && parseFloat(marginLeft) > 0){
                    isMarginAuto = true;
                }else if(element_p.parent().length > 0){
                    if(parseFloat(element_p.parent().width()) == ((parseFloat(marginLeft) * 2) + widthBoxes) && parseFloat(marginLeft) > 0){
                        isMarginAuto = true;
                    }
                }

                // Show empty margin left/right just if there have free space (if not full width)
                if((iframeWidth - scroll_width) > (leftBoxes + widthBoxes + 30)){

                    iframe.find(".yp-zero-margin-w").removeClass("yp-zero-margin-w");

                    if(parseInt(marginRight) == 0 && elementSelected){
                        marginRight = "5px";
                        paintCanvas.active.find(".yp-selected-boxed-margin-right").addClass("yp-zero-margin-w");
                    }

                    if(parseInt(marginLeft) == 0 && elementSelected){
                        marginLeft = "5px";
                        paintCanvas.active.find(".yp-selected-boxed-margin-left").addClass("yp-zero-margin-w");
                    }

                }


                // Margin default values
                if(parseInt(marginTop) > 30){marginTopText = parseInt(marginTop)+"px";}
                if(parseInt(marginRight) > 30){marginRightText = parseInt(marginRight)+"px";}
                if(parseInt(marginBottom) > 30){marginBottomText = parseInt(marginBottom)+"px";}
                if(parseInt(marginLeft) > 30){marginLeftText = parseInt(marginLeft)+"px";}


                // Padding default values
                if(parseInt(paddingTop) > 30){paddingTopText = parseInt(paddingTop)+"px";}
                if(parseInt(paddingRight) > 30){paddingRightText = parseInt(paddingRight)+"px";}
                if(parseInt(paddingBottom) > 30){paddingBottomText = parseInt(paddingBottom)+"px";}
                if(parseInt(paddingLeft) > 30){paddingLeftText = parseInt(paddingLeft)+"px";}


                // Shows Auto text
                if(isMarginAuto){
                    marginLeftText = "Auto";
                    marginRightText = "Auto";
                }

            }

            // Append border elements
            if (heightBoxes > 1 && widthBoxes > 1) {

                if (iframe.find("." + classes + "-top").length === 0) {

                    // Border
                    var appendBox = "<div class='" + classes + "-top'></div><div class='" + classes + "-bottom'></div><div class='" + classes + "-left'></div><div class='" + classes + "-right'></div>";

                    // margin
                    appendBox += "<div class='" + classes + "-margin-left'>"+marginLeftText+"</div><div class='" + classes + "-margin-top'>"+marginTopText+"</div><div class='" + classes + "-margin-bottom'>"+marginBottomText+"</div><div class='" + classes + "-margin-right'>"+marginRightText+"</div>";

                    // padding
                    appendBox += "<div class='" + classes + "-padding-left'>"+paddingLeftText+"</div><div class='" + classes + "-padding-top'>"+paddingTopText+"</div><div class='" + classes + "-padding-bottom'>"+paddingBottomText+"</div><div class='" + classes + "-padding-right'>"+paddingRightText+"</div>";

                    // Append
                    paintCanvas.active.append(appendBox);

                // update margin, padding if this option true
                }else if(showMarPad){

                    // Update margin box value
                    paintCanvas.active.find("." + classes + "-margin-top").text(marginTopText);
                    paintCanvas.active.find("." + classes + "-margin-right").text(marginRightText);
                    paintCanvas.active.find("." + classes + "-margin-bottom").text(marginBottomText);
                    paintCanvas.active.find("." + classes + "-margin-left").text(marginLeftText);

                    // Update padding box value
                    paintCanvas.active.find("." + classes + "-padding-top").text(paddingTopText);
                    paintCanvas.active.find("." + classes + "-padding-right").text(paddingRightText);
                    paintCanvas.active.find("." + classes + "-padding-bottom").text(paddingBottomText);
                    paintCanvas.active.find("." + classes + "-padding-left").text(paddingLeftText);

                }


                // Box Border
                var style = "." + classes + "-top{top:"+topBoxes+"px !important;left:"+leftBoxes+"px !important;width:"+widthBoxes+"px !important;}";
                style += "." + classes + "-bottom{top:"+bottomBoxes+"px !important;left:"+leftBoxes+"px !important;width:"+widthBoxes+"px !important;}";
                style += "." + classes + "-left{top:"+topBoxes+"px !important;left:"+leftBoxes+"px !important;height:"+heightBoxes+"px !important;}";
                style += "." + classes + "-right{top:"+topBoxes+"px !important;left:"+rightBoxes+"px !important;height:"+heightBoxes+"px !important;}";


                // Update margin and padding if detail inspector
                if(showMarPad){

                    // Variables for inline CSS (detailed inspector only, showing margin, padding before selected)
                    var topTop = parseFloat(topBoxes) - parseFloat(marginTop);
                    var leftLeft = parseFloat(leftBoxes) - parseFloat(marginLeft);
                    var bottomBottom = bottomBoxes - parseFloat(paddingBottom);
                    var rightRight = rightBoxes - parseFloat(paddingRight);

                    // Max margin right position
                    var marginRightX = parseFloat(marginRight);
                    if(((rightBoxes+2) + parseFloat(marginRight)) > (iframeWidth - scroll_width)){
                        marginRightX = (iframeWidth - scroll_width) - (rightBoxes + 2);
                    }

                    var xMarginWidth = (parseFloat(widthBoxes) + parseFloat(marginLeftOr) + parseFloat(marginRightOr));
                    var xMarginLeft = (parseFloat(leftBoxes) - parseFloat(marginLeftOr));

                    // Fix scroll problems for margin
                    if ((xMarginLeft + xMarginWidth) > windowWidth) {
                        xMarginWidth = widthBoxes + parseFloat(marginLeftOr);
                    }

                    // Margin
                    style += "." + classes + "-margin-top{top:"+topTop+"px !important;left:"+xMarginLeft+"px !important;width:"+xMarginWidth+"px !important;height:"+parseFloat(marginTop)+"px !important;}";
                    style += "." + classes + "-margin-bottom{top:"+bottomBoxes+"px !important;left:"+xMarginLeft+"px !important;width:"+xMarginWidth+"px !important;height:"+parseFloat(marginBottom)+"px !important;}";
                    style += "." + classes + "-margin-left{top:"+topBoxes+"px !important;left:"+leftLeft+"px !important;width:"+parseFloat(marginLeft)+"px !important;height:"+heightBoxes+"px !important;}";
                    style += "." + classes + "-margin-right{top:"+topBoxes+"px !important;left:"+(parseFloat(rightBoxes)+2)+"px !important;width:"+parseFloat(marginRightX)+"px !important;height:"+heightBoxes+"px !important;}";


                    // Padding
                    style += "." + classes + "-padding-top{top:"+parseFloat(topBoxes)+"px !important;left:"+parseFloat(leftBoxes)+"px !important;width:"+widthBoxes+"px !important;height:"+parseFloat(paddingTop)+"px !important;}";
                    style += "." + classes + "-padding-bottom{top:"+bottomBottom+"px !important;left:"+parseFloat(leftBoxes)+"px !important;width:"+widthBoxes+"px !important;height:"+parseFloat(paddingBottom)+"px !important;}";
                    style += "." + classes + "-padding-left{top:"+parseFloat(topBoxes)+"px !important;left:"+parseFloat(leftBoxes)+"px !important;width:"+parseFloat(paddingLeft)+"px !important;height:"+parseFloat(heightBoxes)+"px !important;}";
                    style += "." + classes + "-padding-right{top:"+parseFloat(topBoxes)+"px !important;left:"+rightRight+"px !important;width:"+parseFloat(paddingRight)+"px !important;height:"+parseFloat(heightBoxes)+"px !important;}";


                    // Don't show dotted border on padding if no padding.
                    if(parseInt(paddingTopOr) == 0){
                        style += "." + classes + "-padding-top:before{display:none !important;}";
                    }

                    if(parseInt(paddingRightOr) == 0){
                        style += "." + classes + "-padding-right:before{display:none !important;}";
                    }

                    if(parseInt(paddingBottomOr) == 0){
                        style += "." + classes + "-padding-bottom:before{display:none !important;}";

                    }

                    if(parseInt(paddingLeftOr) == 0){
                        style += "." + classes + "-padding-left:before{display:none !important;}";
                    }


                }

                // Style#yp-draw-box
                var drawBoxStyle = iframeBody.find("#yp-draw-box");

                // Append
                if(drawBoxStyle.length > 0){
                    drawBoxStyle.html(style);
                }else{
                    iframeBody.append("<style id='yp-draw-box'>"+style+"</style>");
                }

            }

        }

    }


    /* ---------------------------------------------------- */
    /* Process media queries                                */
    /* ---------------------------------------------------- */
    function process_media_query(condition){

        var die = false;

        // Not processable
        var conRex = /\bhandheld\b|\baural\b|\bbraille\b|\bembossed\b|\bprojection\b|\btty\b|\btv\b|\bprint\b|\b3d-glasses\b/;

        if(conRex.test(condition)){
            return null;
        }

        // not and , not acceptable
        var conRex2 = /,|\bnot\b/;
        if(conRex2.test(condition)){
            return false;
        }

        // For replace em & and rem
        var fontSizeRotio = parseFloat(iframe.find("html").css("fontSize"));

        // replacing rem & em to PX
        condition = condition.replace(/[0-9. ]+(rem|em)/g, function(match, contents, offset, s){
                return parseFloat(match)*fontSizeRotio+"px";
            }
        );

        // Get all queries
        var queries = condition.match(/\((.*?)\)/g);

        var goValue = [];
        var minmaxRex = /max-width|min-width/;

        // loop queries
        $.each(queries, function(index,query){

            // Just max and min width
            if(minmaxRex.test(query) == false){
                die = true;
                return false;
            }
            
            // Cleaning
            query = query.replace(/\(|\)|:|px|\s+/g,'');

            // max min widths
            query = query.replace(/min-width/g,'>');
            query = query.replace(/max-width/g,'<');

            goValue.push(query);

        });

        // Return
        if(die == false){
            return goValue;
        }

    }



    /* ---------------------------------------------------- */
    /* Cleans selector for regex                            */
    /* ---------------------------------------------------- */
    function selector_regex(selector){
        return selector
        .replace(   /\\/g, "\\\\") // \
        .replace(/\./g, "\\.")  // [
        .replace(/\[/g, "\\[")  // [
        .replace(/\]/g, "\\]")  // ]
        .replace(/\(/g, "\\(")  // (
        .replace(/\)/g, "\\)")  // )
        .replace(/\^/g, "\\^")  // ^
        .replace(/\$/g, "\\$")  // $
        .replace(/\*/g, "\\*")  // *
        .replace(/\:/g, "\\:")  // :
        .replace(/\+/g, "\\+"); // +
    }




    /* ---------------------------------------------------- */
    /* Generate Automatic Reverse Media Condition           */
    /* ---------------------------------------------------- */
    function creating_auto_media_query(rule){

        // Array
        var queries, mediaQueries = [], query, queryCondition, activeQuery;

        // Getting all media queries
        if(rule == false){
            queries = get_media_queries(true, false);
        }else{
            queries = get_media_queries(false, rule);
        }

        // Min 1
        if(queries.length == 0){
            return false;
        }

        // Each all Queries
        $.each(queries, function(index, value) {

            // Simple query.
            query = process_media_query(value);

            // isset?
            if(isDefined(query)){

                query = query.toString();

                // Push mediaQueries
                mediaQueries.push( query );

                // Basic for check with matchMedia
                queryCondition = space_cleaner(queries[index].replace("@media",""));

                // Active this
                if(iframeContentWindow.matchMedia(queryCondition).matches){
                    activeQuery = queryCondition;
                }

            }

        });

        // Return activeQuery
        if(isDefined(activeQuery)){
            return activeQuery;
        }

        // Param is only "mediaQueries"
        var condition = false, closestLow, upArr = [], downArr = [];

        // Current Width
        var currentWidth = $(window).width();

        // Array Media
        $.each(mediaQueries, function(index, value){
            
            if(value != null){
                value = value.toString();
                if(value.indexOf("<") != -1){
                    downArr.push(value.replace(/\</g,''));
                }else if(value.indexOf(">") != -1){
                    upArr.push(value.replace(/\>/g,''));
                }
            }

        });

        // High to low
        upArr = upArr.sort(function(a, b){return b-a;});
        downArr = downArr.sort(function(a, b){return b-a;});

        // Down closest
        $.each(downArr, function(){
          if (this <= currentWidth && (closestLow == null || (currentWidth - this) < (currentWidth - closestLow))) {
            closestLow = this;
          }
        });

        // if min-width high and max-width low than current width
        if(downArr.length > 0 && upArr.length > 0){
            if(upArr[0] > currentWidth && downArr[0] < currentWidth){
                condition = '(min-width:'+downArr[0]+'px) and (max-width:'+upArr[0]+'px)';
            }
        }

        // if min-width and max-width high than current width
        if(downArr.length > 0 && upArr.length > 0){
            if(upArr[0] > currentWidth && downArr[0] > currentWidth){

                if(closestLow < currentWidth){
                    condition = '(max-width:'+upArr[0]+'px) and (min-width:'+closestLow+'px)';
                }else{
                    condition = '(max-width:'+upArr[0]+'px)';
                }

            }
        }

        // if min-width and max-width high than current width
        if(downArr.length == 0 && upArr.length > 0){
            if(upArr[0] > currentWidth){
                condition = '(max-width:'+upArr[0]+'px)';
            }
        }

        // if min-width and max-width low than current width
        if(downArr.length > 0 && upArr.length > 0){
            if(upArr[0] < currentWidth && downArr[0] < currentWidth){
                condition = '(min-width:'+downArr[0]+'px)';
            }
        }

        // if min-width and max-width low than current width
        if(downArr.length > 0 && upArr.length == 0){
            if(downArr[0] < currentWidth){
                condition = '(min-width:'+downArr[0]+'px)';
            }
        }

        // if min-width and max-width low than current width
        if(downArr.length > 1 && upArr.length == 0){
            if(downArr[0] > currentWidth && closestLow < currentWidth){
                condition = '(max-width:'+downArr[0]+'px) and (min-width:'+closestLow+'px)';
            }
        }

        return condition;

    }


    /* ---------------------------------------------------- */
    /* Getting media queries                                */
    /* ---------------------------------------------------- */
    function get_media_queries(selectorCondition, ruleCondition){

        var styleSheet = iframejs.styleSheets;
        var href = null, CSSRules, rule, thisRules, thisRule, selector, conditions = [], condition, jsonMediaSelected = [], rules = [], styleObject, thisOrder, hasMedia = false, q;

        // Each stylesheets
        for(var p = 0; p < styleSheet.length; p++){

            // Stylesheet Object
            styleObject = styleSheet[p];

            // Update href
            href = styleObject.href;

            // Valid if no href and inline css
            if(href == null){
                href = location.protocol+"//"+window.location.hostname;
            }

            // Filtering sheets
            if(href.indexOf("waspthemes-yellow-pencil") != -1 ||
                href.indexOf("animate") != -1  ||
                href.indexOf("webkit") != -1 ||
                href.indexOf("animation") != -1 ||
                href.indexOf("keyframe") != -1 ||
                href.indexOf("font") != -1 ||
                href.indexOf("icon") != -1 ||
                href.indexOf("googleapis.com") != -1 ||
                href.indexOf("print") != -1 ||
                href.indexOf("reset") != -1 ||

                href.indexOf("player") != -1 ||
                href.indexOf("video") != -1 ||
                href.indexOf("audio") != -1 ||

                href == 'ie' ||
                href.indexOf("ie6") != -1 ||
                href.indexOf("ie7") != -1 ||
                href.indexOf("ie8") != -1 ||
                href.indexOf("ie9") != -1 ||
                href.indexOf("ie10") != -1 ||
                href.indexOf("ie11") != -1 ||
                href.indexOf("jquery") != -1 ||
                
                href.indexOf("color") != -1 ||
                href.indexOf("skin") != -1 ||
                href.indexOf("scheme") != -1 ||

                href.indexOf("setting") != -1 ||
                href.indexOf("admin") != -1){

                // Skip
                continue;

            }

            // be sure stylesheet URL is valid
            if(href.indexOf(location.protocol+"//"+window.location.hostname) != -1){

                // Get all CSS rules
                CSSRules = styleObject.cssRules;

                // check CSS rules
                for(var i = 0; i < CSSRules.length; i++){

                    // get rule by index
                    rule = CSSRules[i];

                    // If has media
                    if(rule.media){

                        try{

                            // Get condition
                            condition = rule.media[0].replace(/(\s+)?\:(\s+)?/g, ":");

                        } catch (e) {

                            // Skip
                            continue;

                        }

                        // Rules of this section
                        thisRules = rule.cssRules;
                            
                        // check rules one by one
                        for(var t = 0; t < thisRules.length; t++){

                            // get this rule
                            thisRule = thisRules[t];
                            selector = thisRule.selectorText;

                            // Continue if undefined
                            if(isUndefined(selector)){
                                continue;
                            }

                            // Check if there any selector matches the target element
                            if(/(\*|\:|\@)/i.test(selector) == false && check_selector(selector) != false){

                                // Selector
                                selector = selector.trim();

                                // Filter1 : direct push condition that match any element on current page
                                if(selectorCondition){

                                    // Push
                                    if(conditions.indexOf(condition) == -1){
                                        conditions.push(condition);
                                    }

                                // Filter2 : Must has special rule 
                                }else if(ruleCondition != false){

                                    // If match with selected element
                                    if(iframe.find(get_foundable_query(selector)).hasClass("yp-selected")){

                                        if(ruleCondition in thisRule.style && thisRule.style[ruleCondition] !== ""){

                                            // is same with rule we want
                                            if(conditions.indexOf(condition) == -1){
                                                conditions.push(condition);
                                            }

                                        }

                                    }

                                // Filter3 : Give a json data for media and rules 
                                }else{


                                    // If match with selected element
                                    if(iframe.find(get_foundable_query(selector)).hasClass("yp-selected")){

                                        // Getting rules
                                        rules = [];
                                        for(var n = 0; n < thisRule.style.length; n++){
                                            rules.push(thisRule.style[n]);
                                        }
                                        
                                        // If the current media has any selector
                                        for(var k = 0; k < rules.length; k++){

                                            // Skip
                                            if(/(-webkit-|-moz-|-o-|-ms-)/g.test(rules[k])){
                                                continue;
                                            }

                                            // not valid
                                            if(/(\:|\{|\}|\(|\))/g.test(rules[k])){
                                                continue;
                                            }

                                            // convert shorthand css properties to real properties
                                            if(rules[k] == "padding"){
                                                rules.push("padding-top", "padding-right", "padding-bottom", "padding-left");
                                                continue;
                                            }else if(rules[k] == "margin"){
                                                rules.push("margin-top", "margin-right", "margin-bottom", "margin-left");
                                                continue;
                                            }else if(rules[k] == "border-width"){
                                                rules.push("border-top-width", "border-right-width", "border-bottom-width", "border-left-width");
                                                continue;
                                            }else if(rules[k] == "border-style"){
                                                rules.push("border-top-style", "border-right-style", "border-bottom-style", "border-left-style");
                                                continue;
                                            }else if(rules[k] == "border-color"){
                                                rules.push("border-top-color", "border-right-color", "border-bottom-color", "border-left-color");
                                                continue;
                                            }else if(rules[k] == "border-top"){
                                                rules.push("border-top-width", "border-top-style", "border-top-color");
                                                continue;
                                            }else if(rules[k] == "border-right"){
                                                rules.push("border-right-width", "border-right-style", "border-right-color");
                                                continue;
                                            }else if(rules[k] == "border-bottom"){
                                                rules.push("border-bottom-width", "border-bottom-style", "border-bottom-color");
                                                continue;
                                            }else if(rules[k] == "border-left"){
                                                rules.push("border-left-width", "border-left-style", "border-left-color");
                                                continue;
                                            }else if(rules[k] == "background"){

                                                // hex, rgb, rgba
                                                if(/(\s+|^)(#[a-zA-Z-0-9]{6}|#[a-zA-Z-0-9]{3}|rgb\(|rgba\()(\s+|$)/g.test(value[k])){
                                                    rules.push("background-color");
                                                }

                                                // image
                                                if(/(\s+|^)url\((\s+|$)/g.test(value[k])){
                                                    rules.push("background-image");
                                                }

                                                // position ??
                                                if(/(\s+|^)(left|top|right|bottom|center)(\s+|$)/g.test(value[k])){
                                                    rules.push("background-position");
                                                }

                                                // size ?? 
                                                if(/(\s+|^)(auto|cover|contain)(\s+|$)/g.test(value[k])){
                                                    rules.push("background-size");
                                                }

                                                // repeat
                                                if(/(\s+|^)(repeat)(\s+|$)/g.test(value[k])){
                                                    rules.push("background-repeat");
                                                }

                                                // origin & clip
                                                if(/(\s+|^)(padding-box|border-box|content-box)(\s+|$)/g.test(value[k])){
                                                    rules.push("background-origin");
                                                    rules.push("background-clip");
                                                }

                                                // attachment
                                                if(/(\s+|^)(fixed|scroll|local)(\s+|$)/g.test(value[k])){
                                                    rules.push("background-attachment");
                                                }

                                                continue;
                                            }else if(rules[k] == "border-radius"){
                                                rules.push("border-top-left-radius", "border-top-right-radius", "border-bottom-right-radius", "border-bottom-left-radius");
                                                continue;
                                            }else if(rules[k] == "flex"){

                                                // Append as default
                                                rules.push("flex-grow");

                                                // Shrink
                                                if(rules[k].split(/\+s/g).length > 1){
                                                    rules.push("flex-grow");
                                                }

                                                // Basis
                                                if(rules[k].split(/\+s/g).length > 2){
                                                    rules.push("flex-basis");
                                                }

                                                continue;
                                            }else if(rules[k] == "flex-flow"){

                                                // append as default
                                                rules.push("flex-direction");

                                                // flex wrap
                                                if(rules[k].indexOf(" ") != -1){
                                                    rules.push("flex-wrap");
                                                }

                                                continue;
                                            }else if(rules[k] == "list-style"){

                                                // image
                                                if(/(\s+|^)url\((\s+|$)/g.test(value[k])){
                                                    rules.push("list-style-image");
                                                }

                                                // type
                                                if(/(\s+|^)(disc|armenian|circle|cjk-ideographic|decimal|decimal-leading-zero|georgian|hebrew|hiragana|hiragana-iroha|katakana|katakana-iroha|lower-alpha|lower-greek|lower-latin|lower-roman|none|square|upper-alpha|upper-greek|upper-latin|upper-roman)(\s+|$)/g.test(value[k])){
                                                    rules.push("list-style-image");
                                                }

                                                // position
                                                if(/(\s+|^)(inside|outside)(\s+|$)/g.test(value[k])){
                                                    rules.push("list-style-position");
                                                }

                                                continue;
                                            }else if(rules[k] == "overflow"){
                                                rules.push("overflow-y", "overflow-x");
                                                continue;
                                            }else if(rules[k] == "animation"){

                                                // append as default
                                                rules.push("animation-name", "animation-duration", "animation-delay", "animation-iteration-count");

                                                // play state
                                                if(/(\s+|^)(paused|running)(\s+|$)/g.test(value[k])){
                                                    rules.push("animation-play-state");
                                                }

                                                // fill mode
                                                if(/(\s+|^)(forwards|backwards|both)(\s+|$)/g.test(value[k])){
                                                    rules.push("animation-fill-mode");
                                                }

                                                // direction
                                                if(/(\s+|^)(normal|reverse|alternate|alternate-reverse)(\s+|$)/g.test(value[k])){
                                                    rules.push("animation-direction");
                                                }

                                                // timing function
                                                if(/(\s+|^)(linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps\(|cubic-bezier\()(\s+|$)/g.test(value[k])){
                                                    rules.push("animation-timing-function");
                                                }

                                                continue;
                                            }else if(rules[k] == "border"){
                                                rules.push("border-width", "border-style", "border-color");
                                                continue;
                                            }else if(rules[k] == "font"){

                                                // append as default
                                                rules.push("font-size", "line-height", "font-family");

                                                // style
                                                if(/(\s+|^)(normal|italic|oblique)(\s+|$)/g.test(value[k])){
                                                    rules.push("font-style");
                                                }

                                                // variant
                                                if(/(\s+|^)(normal|small-caps)(\s+|$)/g.test(value[k])){
                                                    rules.push("font-variant");
                                                }

                                                // weight
                                                if(/(\s+|^)(100|200|300|400|500|600|700|800|900|normal|bold|bolder|lighter)(\s+|$)/g.test(value[k])){
                                                    rules.push("font-weight");
                                                }

                                                continue;
                                            }

                                            var ppMedia = process_media_query(condition);

                                            // skip nulls
                                            if(ppMedia == null || ppMedia == false){
                                                continue;
                                            }

                                            // Getting this values
                                            thisRule = rules[k].trim();
                                            thisOrder = get_frame_width_by_media(condition);

                                            // Don't push same array item
                                            hasMedia = false;
                                            for(q = 0; q < jsonMediaSelected.length; q++){

                                                if(thisRule == jsonMediaSelected[q].rule && condition == jsonMediaSelected[q].query && thisOrder == jsonMediaSelected[q].order){
                                                    hasMedia = true;
                                                    break;
                                                }
                                                
                                            }

                                            // Push if not have
                                            if(hasMedia == false && thisRule.indexOf("outline-") == -1){
                                                jsonMediaSelected.push({rule:thisRule,query:condition, order: thisOrder});
                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

            }

        }

        // Quick return
        if(selectorCondition || ruleCondition){
            return conditions;
        }

        // Return object array value
        return jsonMediaSelected;

    }



    /* ----------------------------------------------------------------- */
    /* Getting media queries by stylesheet files & update property sizes */
    /* ----------------------------------------------------------------- */
    function update_property_sizes(defaultSize){

        // IS any option active
        if($(".yp-editor-list > li.active .yp-option-group").length ==  0){
            return false;
        }

        // Getting result list
        var resultList = get_media_queries(false, false).reverse();

        // clean previous values
        $(".property-has-queries").removeClass("property-has-queries");

        // sort by order
        resultList.sort(function(a, b){
            return a.order - b.order;
        });

        // Adding size options to properties
        var tabs;
        for(var b = 0; b < resultList.length; b++){

            var rule = resultList[b].rule;
            var media = resultList[b].query;

            // must be sure rule valid
            try {if(mainBody.find("#"+rule+"-group").length == 0){
                continue;
            }} catch (e) {
                continue;
            }

            // find group
            var group = $("#"+rule+"-group");

            // add class
            group.addClass("property-has-queries");

            // Skip non-visible rules
            if(!group.is(":visible")){
                continue;
            }

            // append tabs div
            if($("#"+rule+"-group .property-size-tabs").length == 0){
                group.prepend("<ul class='property-size-tabs'></ul>");
            }

            // tabs
            tabs = group.find(".property-size-tabs");

            // already visible and have active tab
            if(b == 0){

                if(tabs.find(".active").length > 0){
                    if(defaultSize == null || defaultSize == "" && defaultSize != false){
                        defaultSize = tabs.find(".active").attr("data-property-size");
                    }
                }

                $(".property-size").tooltip("destroy");
                $(".property-size-tabs").empty();

            }

            // one time for every rule
            if(tabs.find("[data-property-size='all']").length == 0){

                tabs.append("<li class='property-size' title='"+lang.all_msg+"' data-insert-media='desktop' data-property-size='all'>All</li>");

            }

            // Processed media
            var processedMedia = process_media_query(media);

            // check the media if valid
            if(processedMedia == null || processedMedia == false){
                continue;
            }

            // string
            processedMedia = processedMedia.toString();

            // Already has.
            if(tabs.find("[data-property-size='"+processedMedia+"']").length > 0){
                continue;
            }

            // for view
            var processedMediaView = processedMedia.replace(/\</g,'max ').replace(/\>/g,'min. ').replace(/\,/g,' & ').replace(/\.\d+/g, "").replace(/(\d+)(\s|$)/g, "$1px$2");

            // more understandable title
            var title = null;
            if(processedMedia.indexOf(",") == -1){
                title = processedMedia.replace(/([^\d+])(\d+)/g, "$2$1").replace(/\</g,' and below').replace(/\>/g,' and above').replace(/\.\d+/g, "").replace(/(\d+)(\s|$)/g, "$1px$2") + " screen sizes";
            }else{
                title = "screen sizes " + processedMedia.replace(/\</g,'smaller than ').replace(/\>/g,'larger than ').replace(/\,/g,' and ').replace(/\.\d+/g, "").replace(/(\d+)(\s|$)/g, "$1px$2");
            }

            // Media number based for frame width.
            var numberOnly = get_frame_width_by_media(media);

            // append defined queries
            tabs.append("<li class='property-size' title='"+title+"' data-insert-media='"+media+"' data-property-number="+numberOnly+" data-property-size='"+processedMedia+"'>"+processedMediaView+"</li>");

            // there were has active tab, then active it again
            if(defaultSize != null){

                tabs.find(".active").removeClass("active");
                tabs.find("[data-property-size='"+defaultSize+"']").addClass("active");

            }else{

                // has active breakpoint
                if($(".breakpoint-bar .active").length > 0){

                    // get processed media
                    var activeBreakpoint = process_media_query($(".breakpoint-bar .active").attr("data-media-content"));

                    // if valid
                    if(isDefined(activeBreakpoint)){

                        // convert to string
                        activeBreakpoint = activeBreakpoint.toString();

                        // if has same media here
                        if($(".property-size[data-property-size='"+activeBreakpoint+"']").length > 0){
                            tabs.find(".active").removeClass("active");
                            tabs.find("[data-property-size='"+activeBreakpoint+"']").addClass("active");
                        }

                    }

                // Default "all" active
                }else{

                    tabs.find(".active").removeClass("active");
                    $(".property-size[data-property-size='all']").addClass("active");

                }

            }

        }

        // empty, stop
        if($(".property-size-tabs-visible .property-size").length == 0 || resultList.length == 0){
            $(".property-size-tabs-visible").removeClass("property-size-tabs-visible");
            body.removeClass("property-query-active");
        }

        // set tooltip
        $(".property-size").tooltip({
            animation: false,
            template: '<div class="tooltip small-tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
            container: '.yp-select-bar',
            delay: { show: 50, hide: 0 },
            placement: 'top',
        });

    }


    /* ---------------------------------------------------- */
    /* Getting best iframe width by media                   */
    /* ---------------------------------------------------- */
    function get_frame_width_by_media(media){

        var processedMedia = process_media_query(media);

        if(isDefined(processedMedia)){

            processedMedia = processedMedia.toString();

            // Media number based for frame width.
            var numberOnly = processedMedia.replace(/(\<|\>)/g, "");
            if(numberOnly.indexOf(",") != -1){

                // Get only max-width
                if(processedMedia.split(",")[1].indexOf("<") != -1){
                    numberOnly = numberOnly.split(",")[1];
                }else{
                    numberOnly = numberOnly.split(",")[0];
                }

            }

            return numberOnly;

        // Unknown process
        }else{

            return false;

        }

    }


    /* ---------------------------------------------------- */
    /* Toggle frame to target width by media info           */
    /* in visual manager                                    */
    /* ---------------------------------------------------- */
    $(document).on("click", ".view-media-line", function(){

        // getting
        var size = $(this).parents(".selector-group").attr("data-view-size");
        var goSize = get_frame_width_by_media(size);
        var insertMedia = create_media_query_before(size);

        // stop if multiple
        if(size.indexOf("and") != -1){
            $(this).css("cursor", "default");
            return false;
        }

        // use same api
        window.resizedByPropertySize = true;

        if(size != "desktop"){

            // open responsive tool
            if($(".yp-responsive-btn.active").length > 0){
                $(".yp-responsive-btn").trigger("click");
            }

            // resize iframe to target size
            $("#iframe").css("width", goSize);

            // reflesh breakpoints
            update_responsive_breakpoints();

            // active same size breakpoint if only is max or min.
            var maxMin = process_media_query(insertMedia);

            // if valid
            if(isDefined(maxMin)){

                // maxMin
                maxMin = maxMin.toString();

                // no active breakpoint on advanced media query
                if(maxMin.indexOf(",") > -1){

                    $(".breakpoint-bar .active").removeClass("active");

                }else{

                    // this is max width but max width is not activate
                    if(maxMin.indexOf("<") != -1 && $(".breakpoint-bar .max-width").length == 0){
                        $(".media-control").trigger("click");
                        $(".media-control").tooltip("hide");
                    }

                    // this is min width but min width is not activate
                    if(maxMin.indexOf(">") != -1 && $(".breakpoint-bar .min-width").length == 0){
                        $(".media-control").trigger("click");
                        $(".media-control").tooltip("hide");
                    }

                }

            }

        }else{

            // close responsive tool
            if($(".yp-responsive-btn.active").length == 0){
                $(".yp-responsive-btn").trigger("click");
            }

        }

        draw_iframe();

        // Updates
        draw();

        scroll_to_element(null, false);

        draw_responsive_handle();

        // wait
        setTimeout(function(){

            update_responsive_size_notice();

            window.resizedByPropertySize = false;
            
            draw();

            scroll_to_element(null, false);

            show_frame_ui(200);

        }, window.YellowDelay);

    });


    /* ---------------------------------------------------- */
    /* Toggle Property based breakpoints tab                */
    /* ---------------------------------------------------- */
    $(document).on("click", ".phone-icon", function(e){

        if(e.originalEvent){
            $(this).parents(".yp-this-content").find(".lock-btn.active").trigger("click");
        }

        var current = $(this).parents(".property-has-queries").toggleClass("property-size-tabs-visible");
        $(".property-size-tabs-visible").not(current[0]).removeClass("property-size-tabs-visible");

        body.toggleClass("property-query-active");

        // active first always
        if($(current).hasClass("property-size-tabs-visible")){
            current.find(".property-size-tabs .active").removeClass("active");
            current.find(".property-size-tabs li").first().addClass("active");
        }

        // clean up
        $(".property-size.active").removeClass("active");

        if(is_responsive_mod()){

            // has active breakpoint
            if($(".breakpoint-bar .active").length > 0){

                // process media
                var activeBreakpoint = process_media_query($(".breakpoint-bar .active").attr("data-media-content"));

                // if valid
                if(isDefined(activeBreakpoint)){

                    // convert to string
                    activeBreakpoint = activeBreakpoint.toString();

                    // if has same media here
                    if($(current).find(".property-size[data-property-size='"+activeBreakpoint+"']").length > 0){
                        $(current).find(".property-size[data-property-size='"+activeBreakpoint+"']").addClass("active");
                    }

                }

            }

        }

        // Update Responsive Size
        update_responsive_size_notice();

        // Update breakpoints
        update_responsive_breakpoints();

        // Update property sizes
        update_property_sizes(null);

        // Delete reset icon on responsive property open if not real.
        if(get_applied_style_data(get_current_selector(), current.attr("data-css-id"), [false, true, false, true])){
            $("#" + current.attr("data-css-id") + "-group").addClass("reset-enable");
        }else{
            $("#" + current.attr("data-css-id") + "-group").removeClass("reset-enable");
        }

    });


    /* ---------------------------------------------------- */
    /* Property size tab click                              */
    /* ---------------------------------------------------- */
    $(document).on("click", ".property-size", function(){

        var el = $(this);

        if(el.hasClass("active")){
            return false;
        }

        window.resizedByPropertySize = true;

        el.parent().find(".active").removeClass("active");
        el.addClass("active");

        var css = el.parents(".yp-option-group").attr("data-css");

        if(el.attr("data-property-size") != "all"){

            // open responsive tool
            if($(".yp-responsive-btn.active").length > 0){
                $(".yp-responsive-btn").trigger("click");
            }

            $("#iframe").css("width", el.attr("data-property-number"));

            draw_iframe();

            update_responsive_breakpoints();

            // active same size breakpoint if only is max or min.
            var maxMin = process_media_query(el.attr("data-insert-media"));

            // if valid
            if(isDefined(maxMin)){

                // convert to String()
                maxMin = maxMin.toString();

                // no active breakpoint on advanced media query
                if(maxMin.indexOf(",") > -1){

                    $(".breakpoint-bar .active").removeClass("active");

                }else{

                    // this is max width but max width is not activate
                    if(maxMin.indexOf("<") != -1 && $(".breakpoint-bar .max-width").length == 0){
                        $(".media-control").trigger("click");
                        $(".media-control").tooltip("hide");
                    }

                    // this is min width but min width is not activate
                    if(maxMin.indexOf(">") != -1 && $(".breakpoint-bar .min-width").length == 0){
                        $(".media-control").trigger("click");
                        $(".media-control").tooltip("hide");
                    }

                }

            }

        }else{

            // close responsive tool
            if($(".yp-responsive-btn.active").length == 0){
                $(".yp-responsive-btn").trigger("click");
            }

            el.addClass("active");

        }

        // Updates
        draw();

        scroll_to_element(null, false);

        draw_responsive_handle();

        // Update editor
        if(is_content_selected()){
            editor_update(true);
        }

        // wait
        setTimeout(function(){

            set_default_value(css);

            update_responsive_size_notice();

            window.resizedByPropertySize = false;
            
            draw();

            scroll_to_element(null, false);

            show_frame_ui(200);

        }, window.YellowDelay);

        // hide tooltip after click
        setTimeout(function(){
            $(".property-size-tabs-visible .property-size.active").tooltip("hide");
        }, window.Yellow2Delay);

    });



    /* ---------------------------------------------------- */
    /* Getting the scrollbar Width                          */
    /* ---------------------------------------------------- */
    function get_scroll_bar_width() {

        // no need on responsive mode.
        if (is_responsive_mod()) {
            return 0;
        }

        var inner = document.createElement('p');
        inner.style.width = "100%";
        inner.style.height = "200px";

        var outer = document.createElement('div');
        outer.style.position = "absolute";
        outer.style.top = "0px";
        outer.style.left = "0px";
        outer.style.visibility = "hidden";
        outer.style.width = "200px";
        outer.style.height = "150px";
        outer.style.overflow = "hidden";
        outer.appendChild(inner);

        document.body.appendChild(outer);
        var w1 = inner.offsetWidth;
        outer.style.overflow = 'scroll';
        var w2 = inner.offsetWidth;
        if (w1 == w2) w2 = outer.clientWidth;

        document.body.removeChild(outer);

        return (w1 - w2);

    }


    /* ---------------------------------------------------- */
    /* Unselect multiple selected items                     */
    /* ---------------------------------------------------- */
    iframe.on("click", '.yp-selected-others', function() {

        var el = $(this);

        var currentSelector = get_current_selector();

        if(mainBody.hasClass("yp-control-key-down") && currentSelector.split(",").length > 0){

            // Remove YP Classes
            el.removeClass("yp-selected-others yp-recent-hover-element");

            // Get Selector
            var selector = get_parents(el,'sharp');

            currentSelector = currentSelector.replace(new RegExp(","+selector_regex(selector),"g"),"");

            var firstEl = get_selected_element();

            set_selector(currentSelector, firstEl, true);

            // to draw quick again if didnt deleted
            el.removeClass("yp-multiple-selected");
            draw();

            // return false to block other click function
            return false;

        }

    });



    /* ---------------------------------------------------- */
    /* Draw other borders with loop                         */
    /* ---------------------------------------------------- */
    function draw_other_boxes(selector, type){

        // Variables
        var appendSelectData = '', element_p, elementClasses, scrollTop, iframeWidth, boxSize, topBoxes, leftBoxes, widthBoxes, heightBoxes, tag;

        // get scroll top
        scrollTop = parseFloat(iframe.scrollTop());

        // Get iframe width
        iframeWidth = $(iframeContentWindow).width();

        // Default selected others
        if(selector == null || selector == undefined){
            selector = get_current_selector();
        }

        // Default type
        if(type == null || type == undefined){
            type = "default";
        }

        // selector or element
        var searcher;
        if(type == "multiple"){
            searcher = selector;
        }else{
            searcher = iframe.find(selector + ":in-viewport").not(".yp-selected,.yp-multiple-selected");
        }

        // Delete olds
        if(type != "multiple"){
            paintCanvas.other.empty();
        }

        // Select Others.. (using .not because will be problem when selector has "," multip selectors)
        searcher.each(function(i){

            // El
            element_p = $(this);

            // Get classes
            elementClasses = element_p.attr("class");

            // multiple draw support
            if(type == "multiple"){
                i = "multiple";
            }

            // get tag
            tag = element_p.prop("tagName");

            // Checks
            if (element_p === null) {
                return true;
            }

            if (tag == "HTML" || tag == "BODY") {
                return true;
            }

            if (element_p.length === 0) {
                return true;
            }

            // Be sure this is visible on screen
            if (check_with_parents(element_p, "opacity", "0", "==") === true || check_with_parents(element_p, "visibility", "hidden", "==") === true) {
                return true;
            }

            // Not show if p tag and is empty.
            if (element_p.html() == '&nbsp;' && tag == 'P') {
                return true;
            }

            // Stop.
            if(mainBody.hasClass("yp-has-transform")){
                return true;
            }

            // generate box size
            boxSize = this.getBoundingClientRect();

            // This element is hidden
            if(boxSize.length == 0){
                return false;
            }

            //Dynamic boxes variables
            topBoxes = boxSize.top + scrollTop;
            leftBoxes = boxSize.left;
            widthBoxes = boxSize.width;
            heightBoxes = boxSize.height;

            // Don't show if not visible on screen
            if(leftBoxes > iframeWidth){
                return true;
            }

            // Limit width until the iframe width
            if((widthBoxes + leftBoxes) > iframeWidth){
                widthBoxes = iframeWidth - (leftBoxes);
            }

            // Visible
            if (heightBoxes > 1 && widthBoxes > 1) {

                // Append Dynamic Box
                if (paintCanvas.other.find(".yp-selected-others-" + i + "-box").length === 0) {

                    appendSelectData += "<div class='yp-selected-others-box yp-selected-others-" + i + "-box' style='top:"+parseFloat(topBoxes)+"px !important;left:"+parseFloat(leftBoxes)+"px !important;width:"+parseFloat(widthBoxes)+"px !important;height:"+parseFloat(heightBoxes)+"px !important;'></div>";

                }else{

                    // Update boxes
                    paintCanvas.other.find(".yp-selected-others-" + i + "-box").attr("style", "top:"+parseFloat(topBoxes)+"px !important;left:"+parseFloat(leftBoxes)+"px !important;width:"+parseFloat(widthBoxes)+"px !important;height:"+parseFloat(heightBoxes)+"px !important;");

                }

            }

        });
    
        // Return
        if(appendSelectData != ''){
            paintCanvas.other.append(appendSelectData);
        }

    }



    /* ---------------------------------------------------- */
    /* Visible Height in scroll.                            */
    /* ---------------------------------------------------- */
    function get_visible_height(t) {

        // Get Element
        var elementGet = t.get(0);

        // Stop if this not valid
        if(isUndefined(elementGet)){
            return 0;
        }

        // generate box size
        var boxSize = elementGet.getBoundingClientRect();

        // get scroll top
        var scrollTop = parseFloat(iframe.scrollTop());

        // get sizes
        var top = boxSize.top + scrollTop;
        var height = boxSize.height;

        if (top < scrollTop) {
            return height - (scrollTop - top);
        } else {
            return height;
        }

    }


    /* ---------------------------------------------------- */
    /* Draw Tooltip.                                        */
    /* ---------------------------------------------------- */
    function draw_tooltip(){

        var tooltip = paintCanvas.general.find(".yp-selected-tooltip");
        var tooltipMenu = paintCanvas.general.find(".yp-edit-tooltip");

        if (tooltip.length <= 0) {
            return false;
        }

        // remove small tooltip class
        tooltip.removeClass("yp-small-tooltip");

        // Hide until set position to tooltip if element still not selected.
        if (!is_content_selected()) {
            tooltip.css("visibility", "hidden");
            tooltipMenu.css("visibility", "hidden");
        }

        // get element
        var element = get_selected_element();

        // update tooltip
        tooltip.removeClass("yp-tooltip-bottom-outside");

        // Get Element
        var elementGet = element.get(0);

        // Stop if this not valid
        if(isUndefined(elementGet)){
            return false;
        }

        // get rect
        var boxSize = elementGet.getBoundingClientRect();

        // scrollTop
        var scrollTop = parseFloat(iframe.scrollTop());

        // get sizes
        var topElement = parseFloat(boxSize.top + scrollTop) - 24;
        var leftElement = parseFloat(boxSize.left);

        // min 0 left
        if(leftElement < 0){
            leftElement = 0;
        }

        tooltip.css("top", topElement).css("left", leftElement);
        tooltipMenu.css("top", topElement).css("left", leftElement);

        // If outside of bottom, show.
        if (topElement >= ($(window).height() + iframe.scrollTop() - 24)) {

            tooltip.addClass("yp-fixed-tooltip");
            tooltip.addClass("yp-fixed-tooltip-bottom");

        } else {

            tooltip.removeClass("yp-fixed-tooltip");
            tooltip.removeClass("yp-fixed-tooltip-bottom");

        }

        // If out of top, show.
        var tooltipRatio;
        if (topElement < 2 || topElement < (iframe.scrollTop() + 2)) {

            var bottomBorder = paintCanvas.active.find(".yp-selected-boxed-bottom");

            topElement = parseFloat(bottomBorder.css("top")) - parseFloat(get_visible_height(element));

            tooltip.css("top", topElement);
            tooltipMenu.css("top", topElement);

            tooltip.addClass("yp-fixed-tooltip");

            tooltipRatio = (tooltip.outerHeight() * 100 / get_visible_height(element));

            // lazy firefox api cant read the right height in first.
            if(navigator.userAgent.toLowerCase().indexOf('firefox') != -1){
                tooltipRatio = (tooltip.outerHeight() * 100 / get_visible_height(element));
            }

            if (tooltipRatio > 10) {
                tooltip.addClass("yp-tooltip-bottom-outside");
                topElement = parseFloat(bottomBorder.css("top")) - parseFloat(tooltip.outerHeight()) + tooltip.outerHeight();

                tooltip.css("top", topElement);
                tooltipMenu.css("top", topElement);

            } else {
                tooltip.removeClass("yp-tooltip-bottom-outside");
            }

        } else {
            tooltip.removeClass("yp-fixed-tooltip");
        }

        if (tooltipRatio < 11) {
            tooltip.removeClass("yp-tooltip-bottom-outside");
        }

        // Tooltip Menu
        if (tooltip.hasClass("yp-fixed-tooltip") && tooltip.hasClass("yp-tooltip-bottom-outside") === false) {
            tooltipMenu.addClass("yp-fixed-edit-menu");
        } else {
            tooltipMenu.removeClass("yp-fixed-edit-menu");
        }

        if (tooltip.hasClass("yp-tooltip-bottom-outside")) {
            tooltipMenu.addClass("yp-bottom-outside-edit-menu");
        } else {
            tooltipMenu.removeClass("yp-bottom-outside-edit-menu");
        }

        if (tooltip.hasClass("yp-fixed-tooltip-bottom")) {
            tooltipMenu.addClass("yp-fixed-bottom-edit-menu");
        } else {
            tooltipMenu.removeClass("yp-fixed-bottom-edit-menu");
        }


        tooltip.css({"visibility":"visible","pointer-events":"none"});
        tooltipMenu.css({"visibility":"visible","pointer-events":"none"});

            // If high
            if ($("#iframe").width() - (tooltip.width() + tooltip.offset().left + 80) <= 0) {

                // simple tooltip.
                tooltip.addClass("yp-small-tooltip");

            } else { // If not high

                // if already simple tooltip
                if (tooltip.hasClass("yp-small-tooltip")) {

                    // return to default.
                    tooltip.removeClass("yp-small-tooltip");

                    // check again if need to be simple
                    if ($("#iframe").width() - (tooltip.width() + tooltip.offset().left + 80) <= 0) {

                        // make it simple.
                        tooltip.addClass("yp-small-tooltip");

                    }

                }

            }

        tooltip.css({"pointer-events":"auto"});
        tooltipMenu.css({"pointer-events":"auto"});

    }


    /* ---------------------------------------------------- */
    /* Trigger mouseup event if mouseup on iframe.          */
    /* ---------------------------------------------------- */
    iframe.on("mouseup", iframe, function() {

        $(document).trigger("mouseup");

        // remove sign
        iframe.find(".yp-will-selected").removeClass("yp-will-selected");

        // delete placeholder
        paintCanvas.extra.find(".yp-iframe-placeholder,.yp-element-placeholder").remove();

        setTimeout(function(){
            mainBody.removeClass("yp-tooltip-input-blur-only");
        }, 10);

    });


    // wait for outside click
    iframe.on("mousedown", iframe, function() {

        if(iframe.find("input.yp-tooltip-small").length > 0){
            mainBody.addClass("yp-tooltip-input-blur-only");
        }

    });


    /* ---------------------------------------------------- */
    /* Installing draggable event to the element            */
    /* ---------------------------------------------------- */
    function set_draggable(element) {

        // Add drag support
        if (iframeBody.find(".yp-selected").length > 0) {

            window.defaultStyleAttr = element.attr("style");

            element.draggable({

                containment: "document",
                delay: 100,
                start: function(e, ui) {

                    window.elDragWidth = element.outerWidth();
                    window.elDragHeight = element.outerHeight();

                    // must be selected
                    if (!is_content_selected()) {
                        return false;
                    }

                    // Close contextmenu
                    if (iframe.find(".context-menu-active").length > 0) {
                        element.contextMenu("hide");
                    }

                    window.styleAttrBeforeDrag = element.attr("style");

                    paintCanvas.extra.find(".yp-element-placeholder").remove();

                    element.removeClass("yp_onscreen yp_hover yp_click yp_focus");

                    // Add some classes
                    body.addClass("yp-clean-look yp-dragging yp-hide-borders-now");

                    // show position tooltip
                    paintCanvas.extra.append("<div class='yp-helper-tooltip'></div>");

                    create_smart_guides();

                    // Delete important tag from old for let to drag elements. Top left right bottom..
                    var corners = ['top','left','right','bottom'], ex;
                    var styles = getStyles();
                    for(var i = 0; i < 4; i++){

                        ex = findStyle(styles, "[selector=" + get_id(get_current_selector()) + "][rule=" + corners[i] + "]").toString();

                        if(ex.indexOf("!important") != -1){
                            setStyles(updateStyle(styles, "[selector=" + get_id(get_current_selector()) + "][rule=" + corners[i] + "]", ex.replace(/\!important/g, "", null)));
                        }

                    }

                },
                drag: function(event, ui) {

                    if (window.elDragHeight != $(this).outerHeight()) {
                        element.css("width", window.elDragWidth + 1);
                        element.css("height", window.elDragHeight);
                    }

                    // Smart Guides. :-)

                    // tolerance.
                    var t = 6;

                    // Defaults
                    var c,f;

                    // Variables
                    var wLeft,wWidth,wTop,wHeight,otherTop,otherLeft,otherWidth,otherHeight,otherBottom,otherRight;

                    // this
                    var self = $(this);

                    // This offets
                    draw_box(".yp-selected", 'yp-selected-boxed');

                    var selfRW = self.outerWidth();
                    var selfTop = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-top").css("top")));
                    var selfLeft = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-left").css("left")));
                    var selfRight = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-right").css("left")));
                    var selfBottom = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-bottom").css("top")));

                    // sizes
                    var selfWidth = selfRight - selfLeft;
                    var selfHeight = selfBottom - selfTop;
                    var selfPLeft = parseFloat(self.css("left"));
                    var selfPTop = parseFloat(self.css("top"));

                    // Margin
                    var selfTopMargin = parseFloat(self.css("marginTop"));
                    var selfLeftMargin = parseFloat(self.css("marginLeft"));

                    // Bottom
                    var yBorder = iframeBody.find(".yp-y-distance-border");
                    var xBorder = iframeBody.find(".yp-x-distance-border");

                    xBorder.css("display", "none");
                    yBorder.css("display", "none");


                    // Search for:
                    // top in top 
                    // bottom in bottom
                    // top in bottom
                    // bottom in top
                    var axsisxEl = iframeBody.find(".yp-smart-guide-elements[data-yp-bottom-round='" + yp_round(selfBottom) + "']");
                    axsisxEl = axsisxEl.add(iframeBody.find(".yp-smart-guide-elements[data-yp-top-round='" + yp_round(selfTop) + "']"));
                    axsisxEl = axsisxEl.add(iframeBody.find(".yp-smart-guide-elements[data-yp-top-round='" + yp_round(selfBottom) + "']"));
                    axsisxEl = axsisxEl.add(iframeBody.find(".yp-smart-guide-elements[data-yp-bottom-round='" + yp_round(selfTop) + "']"));

                    if (axsisxEl.length > 0) {

                        // Getting sizes
                        otherTop = parseFloat(axsisxEl.attr("data-yp-top"));
                        otherLeft = parseFloat(axsisxEl.attr("data-yp-left"));
                        otherWidth = parseFloat(axsisxEl.attr("data-yp-width"));
                        otherHeight = parseFloat(axsisxEl.attr("data-yp-height"));
                        otherBottom = parseFloat(otherTop + otherHeight);
                        otherRight = parseFloat(otherLeft + otherWidth);

                        // Calculate smart guides positions.
                        if (selfLeft > otherLeft) {
                            wLeft = otherLeft;
                            wWidth = selfRight - otherLeft;
                        } else {
                            wLeft = selfLeft;
                            wWidth = otherRight - selfLeft;
                        }

                        // TOP = TOP
                        if (axsisxEl.attr("data-yp-top-round") == yp_round(selfTop)) {
                            wTop = otherTop;
                        }

                        // BOTTOM = BOTTOM
                        if (axsisxEl.attr("data-yp-bottom-round") == yp_round(selfBottom)) {
                            wTop = otherBottom;
                        }

                        // BOTTOM = TOP
                        if (axsisxEl.attr("data-yp-bottom-round") == yp_round(selfTop)) {
                            wTop = otherBottom;
                        }

                        // TOP = BOTTOM
                        if (axsisxEl.attr("data-yp-top-round") == yp_round(selfBottom)) {
                            wTop = otherTop;
                        }

                        // controllers
                        c = (ui.offset.top + selfTopMargin) - otherTop;

                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherTop - selfTop) + selfPTop);
                            ui.position.top = f;
                            xBorder.css({'top': wTop,'left': wLeft,'width': wWidth,'display': 'block'});
                        }

                        c = (ui.offset.top + selfTopMargin) - otherBottom + selfHeight;

                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherBottom - selfBottom) + selfPTop);
                            ui.position.top = f;
                            xBorder.css({'top': wTop,'left': wLeft,'width': wWidth,'display': 'block'});
                        }

                        c = (ui.offset.top + selfTopMargin) - otherTop + selfHeight;

                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherTop - selfBottom) + selfPTop);
                            ui.position.top = f;
                            xBorder.css({'top': wTop,'left': wLeft,'width': wWidth,'display': 'block'});
                        }

                        c = (ui.offset.top + selfTopMargin) - otherBottom;

                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherBottom - selfTop) + selfPTop);
                            ui.position.top = f;
                            xBorder.css({'top': wTop,'left': wLeft,'width': wWidth,'display': 'block'});
                        }

                    }


                    // Search for:
                    // left in left
                    // right in right
                    // left in right
                    // right in left
                    var axsisyEl = iframeBody.find(".yp-smart-guide-elements[data-yp-right-round='" + yp_round(selfRight) + "']");

                    axsisyEl = axsisyEl.add(iframeBody.find(".yp-smart-guide-elements[data-yp-left-round='" + yp_round(selfLeft) + "']"));

                    axsisyEl = axsisyEl.add(iframeBody.find(".yp-smart-guide-elements[data-yp-left-round='" + yp_round(selfRight) + "']"));

                    axsisyEl = axsisyEl.add(iframeBody.find(".yp-smart-guide-elements[data-yp-right-round='" + yp_round(selfLeft) + "']"));

                    if (axsisyEl.length > 0) {

                        // Getting sizes
                        otherTop = parseFloat(axsisyEl.attr("data-yp-top"));
                        otherLeft = parseFloat(axsisyEl.attr("data-yp-left"));
                        otherWidth = parseFloat(axsisyEl.attr("data-yp-width"));
                        otherHeight = parseFloat(axsisyEl.attr("data-yp-height"));
                        otherBottom = parseFloat(otherTop + otherHeight);
                        otherRight = parseFloat(otherLeft + otherWidth);

                        // Calculate smart guides positions.
                        if (selfTop > otherTop) {
                            wTop = otherTop;
                            wHeight = selfBottom - otherTop;
                        } else {
                            wTop = selfTop;
                            wHeight = otherBottom - selfTop;
                        }

                        // LEFT = LEFT
                        if (axsisyEl.attr("data-yp-left-round") == yp_round(selfLeft)) {
                            wLeft = otherLeft;
                        }

                        // RIGHT = RIGHT
                        if (axsisyEl.attr("data-yp-right-round") == yp_round(selfRight)) {
                            wLeft = otherRight;
                        }

                        // RIGHT = LEFT
                        if (axsisyEl.attr("data-yp-right-round") == yp_round(selfLeft)) {
                            wLeft = otherRight;
                        }

                        // LEFT = RIGHT
                        if (axsisyEl.attr("data-yp-left-round") == yp_round(selfRight)) {
                            wLeft = otherLeft;
                        }

                        // controller
                        c = (ui.offset.left + selfLeftMargin) - otherLeft;

                        // Sharpening
                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherLeft - selfLeft) + selfPLeft);
                            ui.position.left = f;
                            yBorder.css({'top': wTop,'left': wLeft,'height': wHeight,'display': 'block'});
                        }

                        // controller
                        c = (ui.offset.left + selfLeftMargin) - otherRight;

                        // Sharpening
                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherRight - selfLeft) + selfPLeft);
                            ui.position.left = f;
                            yBorder.css({'top': wTop,'left': wLeft,'height': wHeight,'display': 'block'});
                        }

                        // controller
                        c = (ui.offset.left + selfLeftMargin) - otherRight + selfWidth;

                        // Sharpening
                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherRight - selfRight) + selfPLeft);
                            ui.position.left = f;
                            yBorder.css({'top': wTop,'left': wLeft,'height': wHeight,'display': 'block'});
                        }

                        // controller
                        c = Math.round((ui.offset.left + selfLeftMargin) - otherLeft + selfRW);

                        // Sharpening
                        if (c < t && c > -Math.abs(t)) {
                            f = Math.round((otherLeft - selfRight) + selfPLeft - (selfRW - selfWidth));
                            ui.position.left = f;
                            yBorder.css({'top': wTop,'left': wLeft,'height': wHeight,'display': 'block'});
                        }

                    }


                    if (ui.position.top == 1 || ui.position.top == -1 || ui.position.top == 2 || ui.position.top == -2) {
                        ui.position.top = 0;
                    }

                    if (ui.position.left == 1 || ui.position.left == -1 || ui.position.left == 2 || ui.position.left == -2) {
                        ui.position.left = 0;
                    }

                    // Update helper tooltip
                    if (selfTop >= 60) {
                        paintCanvas.extra.find(".yp-helper-tooltip").css({
                            'top': selfTop,
                            'left': selfLeft
                        }).html("X : " + parseInt(ui.position.left) + " px<br>Y : " + parseInt(ui.position.top) + " px");
                    } else {
                        paintCanvas.extra.find(".yp-helper-tooltip").css({
                            'top': selfTop + selfHeight + 40 + 10,
                            'left': selfLeft
                        }).html("X : " + parseInt(ui.position.left) + " px<br>Y : " + parseInt(ui.position.top) + " px");
                    }

                },
                stop: function() {

                    clean_smart_guides();

                    // Draw tooltip qiuckly
                    draw_tooltip();

                    // get positions
                    var t = element.css("top");
                    var l = element.css("left");
                    var b = element.css("bottom");
                    var r = element.css("right");

                    // Return style attr to default
                    if(window.styleAttrBeforeDrag != false && window.styleAttrBeforeDrag != undefined){
                        element.attr("style", window.styleAttrBeforeDrag);
                    }else{
                        element.removeAttr("style");
                    }

                    // Insert new data.
                    insert_rule(null, "top", t, '');
                    insert_rule(null, "left", l, '');

                    if (parseFloat(t) + parseFloat(b) !== 0) {
                        insert_rule(null, "bottom", "auto", '');
                    }

                    if (parseFloat(l) + parseFloat(r) !== 0) {
                        insert_rule(null, "right", "auto", '');
                    }

                    // Updating current option list
                    insert_default_options();

                    // Remove
                    iframe.find(".yp-selected,.yp-selected-others").removeClass("ui-draggable-handle ui-draggable-handle");

                    // Update css.
                    option_change();

                    body.removeClass("yp-clean-look yp-dragging yp-hide-borders-now");

                    draw();

                    gui_update();

                }

            });

        }

    }



    window.mouseisDown = false;
    window.styleAttrBeforeChange = null;
    window.visualResizingType = null;
    window.ResizeSelectedBorder = null;
    window.elementOffsetLeft = null;
    window.elementOffsetRight = null;

    /* ---------------------------------------------------- */
    /* Getting the domain                                   */
    /* ---------------------------------------------------- */
    function get_domain(url) {
        var domain;
        if (url.indexOf("://") > -1) {
            domain = url.split('/')[2];
        } else {
            domain = url.split('/')[0];
        }
        domain = domain.split(':')[0];
        return $.trim(domain);
    }


    /* ---------------------------------------------------- */
    /* Getting absolute Path                                */
    /* ---------------------------------------------------- */
    var get_absolute_path = function(href){
        var link = document.createElement("a");
        link.href = href;
        return (link.protocol+"//"+link.host+link.pathname+link.search+link.hash);
    };


    // Surfing on iframe
    iframe.find('a[href]').on("click", iframe, function(evt) {

        $(this).attr("target", "_self");

        if(mainBody.hasClass("yp-metric-disable") === false){
            return false;
        }

        // if aim mode disable.
        if ($(".inspector-sublist-default.active,.inspector-sublist-single.active").length === 0) {

            var href = $(this).attr("href");

            if (href == '' || href.substring(0, 1) == '#' || href.indexOf("javascript:") != -1 || href.indexOf("yellow_pencil=true") != -1) {
                return false;
            }

            // Get full URL
            href = get_absolute_path(href);

            if (href.indexOf("#noAiming") > -1) {
                ypMessage({title: lang.sorry,text: lang.not_wp_link,animation: false,customClass: "editor-style-ok"});
                return false;
            }

            if (href != '' && href.substring(0, 1) != '#' && href.indexOf("javascript:") == -1 && href.indexOf("yellow_pencil=true") == -1) {

                var link_host = get_domain(href);
                var main_host = window.location.hostname;

                if (link_host != main_host) {
                    ypMessage({title: lang.sorry,text: lang.external_link,animation: false,customClass: "editor-style-ok"});
                    return false;
                }

                if (href.indexOf(siteurl.split("://")[1]) == -1 || href.indexOf("wp-login.php?action=logout") != -1) {
                    ypMessage({title: lang.sorry,text: lang.link_not_valid,animation: false,customClass: "editor-style-ok"});
                    return false;
                }

                // https to http
                if (location.protocol == 'http:' && href.indexOf('https:') != -1 && href.indexOf('http:') == -1) {
                    href = href.replace("https:", "http:");
                    $(this).attr("href", href);
                }

                // Http to https
                if (location.protocol == 'https:' && href.indexOf('http:') != -1 && href.indexOf('https:') == -1) {
                    href = href.replace("http:", "https:");
                    $(this).attr("href", href);
                }

                // if selector mode not active and need to save.
                if ($(".yp-save-btn").hasClass("waiting-for-save")){
                    if (confirm(lang.sure) == true) {
                        $(".waiting-for-save").removeClass("waiting-for-save");
                    } else {
                        return false;
                    }
                }

            } else {
                return false;
            }

            // Loading editor 5%
            $("#iframe").remove();
            body.removeClass("yp-yellow-pencil-loaded");
            $(".yp-iframe-loader").show();
            $(".loading-files").html(lang.page_loading);
            $("#loader i").css("width", "5%");

            // Get parent url
            var parentURL = window.location;

            //delete after href.
            parentURL = parentURL.toString().split("href=")[0] + "href=";

            // get iframe url
            var newURL = href;
            if (newURL.substring(0, 6) == 'about:') {
                $(this).show();
                return false;
            }

            // Add slash to end
            newURL = newURL.replace(/\/?(\?|#|$)/, '/$1');

            // Dedect the target page and load
            $.post(newURL, {

                yp_get_details: "true",

            }).done(function(data){

                // Find page details
                data = $('<div />').append(data).find('#yp_page_details').html();

                // login page
                if(newURL.indexOf("/wp-login.php") != -1){
                    data  = "login|login|single";
                }

                // lostpassword page
                if(newURL.indexOf("/wp-login.php") != -1 && newURL.indexOf("action=lostpassword") != -1){
                    data  = "lostpassword|lostpassword|single";
                }

                // register page
                if(newURL.indexOf("/wp-login.php") != -1 && newURL.indexOf("action=register") != -1){
                    data  = "register|register|single";
                }

                // No Data same as fail.
                if(data == undefined || data == null){

                    // no information
                    no_page_information();

                    return false;

                }

                // find all
                var pageID = data.split("|")[0];
                var pageTYPE = data.split("|")[1];
                var pageMODE = data.split("|")[2];

                // Update result URL
                newURL = newURL.replace(/.*?:\/\//g, ""); // delete protocol
                newURL = newURL.replace("&yellow_pencil_frame", "").replace("?yellow_pencil_frame", "");
                newURL = encodeURIComponent(newURL); // encode url
                parentURL = parentURL + newURL + "&yp_page_id="+pageID+"&yp_page_type="+pageTYPE+"&yp_mode=" + pageMODE; // update parent URL

                // GO
                window.location = parentURL;

            }).fail(function(){

                // no information
                no_page_information();

            });

        }

    });
    
    
    /* ---------------------------------------------------- */
    /* No page information message                          */
    /* ---------------------------------------------------- */
    function no_page_information(){

        // Show a error message
        ypMessage({title: lang.page_information_cant_be_retrieved,text: lang.page_information_cant_be_retrieved_msg,animation: false,customClass: "editor-style-ok"});

        // hide loading scene
        $(".loading-files").html("");
        $(".yp-iframe-loader").css("background-image", "none");

        // delete ok button on message
        $(".sa-error-container,.sa-button-container").css("display", "none");
        $(".editor-style-ok p").css("margin-bottom", "0px");

        // block user to close message with ESC key
        $(document).on("keyup keydown", function(e){

            var code = e.keyCode || e.which;
            if(code == 27){
                return false;
            }

        });

    }


    /* ---------------------------------------------------- */
    /* Element Select, Cancel Select Funcs                  */
    /* ---------------------------------------------------- */
    iframe.on("click", iframe, function(evt) {

        // Hide customize type live feature
        if($("#customizing-type-list").css("display") == 'block' && $(".sweet-overlay").css("display") != "block"){
            $("#customizing-type-list").toggle();
            $("#customizing-mode,#customizing-type-list").removeClass("active");
            $(".starter-notice").removeClass("padded-starter-notice");
            return false;
        }

        // First blur tooltip comment input
        if(mainBody.hasClass("yp-tooltip-input-blur-only")){
            return false;
        }

        // Click options
        if ($(".inspector-sublist-default.active,.inspector-sublist-single.active").length > 0 && mainBody.hasClass("yp-metric-disable")) {

            if (evt.which == 1 || evt.which === undefined) {
                evt.stopPropagation();
                evt.preventDefault();
            }

            // Not clickable while animate playing
            if(body.hasClass("yp-animate-manager-playing")){
                return false;
            }

            // Visual Edited
            if(body.hasClass("yp-visual-edited")){
                body.removeClass("yp-visual-edited");
                return false;
            }

            // Resized
            if (body.hasClass("yp-element-resized") || body.hasClass("resize-time-delay")) {
                body.removeClass("yp-element-resized resize-time-delay");
                return false;
            }

            // Colorpicker for all elements.
            if (mainBody.hasClass("yp-element-picker-active")){

                // Delete Live
                iframe.find("#colorPickerLiveCSS").remove();

                // Get Picker Rule
                var pickerCSSRule = $(".yp-element-picker.active").parents(".yp-option-group").attr("data-css");

                // Update iris picker direct
                $("#yp-" + pickerCSSRule).iris('color', get_color(window.pickerColor.toString()));

                // Insert Rule
                insert_rule(null, pickerCSSRule, get_color(window.pickerColor.toString()));

                // Update Option
                $(".yp-option-group[data-css='"+pickerCSSRule+"']").addClass("reset-enable"); // changed

                // Clean picker
                body.removeClass("yp-element-picker-active");
                $(".yp-element-picker.active").removeClass("active");

                // Option Change
                option_change();

                return false;

            }

            if ($(".yp_flat_colors_area:visible").length !== 0) {

                $(".yp-flat-colors.active").each(function() {
                    $(this).trigger("click");
                });

                return false;

            }

            if ($(".yp_meterial_colors_area:visible").length !== 0) {

                $(".yp-meterial-colors.active").each(function() {
                    $(this).trigger("click");
                });

                return false;

            }

            if ($(".yp_nice_colors_area:visible").length !== 0) {

                $(".yp-nice-colors.active").each(function() {
                    $(this).trigger("click");
                });

                return false;

            }

            if ($(".yp_theme_colors_area:visible").length !== 0) {

                $(".yp-theme-colors.active").each(function() {
                    $(this).trigger("click");
                });

                return false;

            }

            if ($(".iris-picker:visible").length !== 0) {

                $(".iris-picker:visible").each(function() {
                    $(this).hide();
                });

                gui_update();

                return false;

            }

            if ($(".yp_background_assets:visible").length !== 0) {

                $(".yp-bg-img-btn.active").each(function() {
                    $(this).trigger("click");
                });

                return false;

            }

            if ($(".yp-gradient-section:visible").length !== 0) {

                $(".yp-gradient-btn.active").each(function() {
                    $(this).trigger("click");
                });

                return false;

            }

            if (mainBody.hasClass("autocomplete-active")) {

                $(".input-autocomplete").each(function() {
                    $(this).autocomplete("close");
                });

                return false;

            }

            if (is_content_selected() === true) {

                if (iframe.find(".context-menu-active").length > 0) {
                    get_selected_element().contextMenu("hide");
                    return false;
                }

            }

            var element = $(evt.target);
            var boxSize;

            if (evt.which === undefined || evt.which == 1) {

                if (is_content_selected() === true) {

                    if (element.hasClass("yp-edit-menu") && element.hasClass("yp-content-selected") === false) {

                        // Get Element
                        var elementGet = element.get(0);

                        // Stop if this not valid
                        if(isUndefined(elementGet)){
                            return false;
                        }

                        boxSize = elementGet.getBoundingClientRect();

                        var x = boxSize.left;

                        if (x === 0) {
                            x = 1;
                        }

                        var y = boxSize.top + 26 + iframe.scrollTop();

                        get_selected_element().contextMenu({
                            x: x,
                            y: y
                        });

                        return false;

                    }

                    if (element.hasClass("yp-selected-tooltip")) {
                        open_selector_editor();
                        return false;
                    } else if (element.parent().length > 0) {
                        if (element.parent().hasClass("yp-selected-tooltip")) {
                            open_selector_editor();
                            return false;
                        }
                    }

                    // click notting on visual margin/padding helper
                    if(element.is("[class*=yp-selected-boxed-margin-],[class*=yp-selected-boxed-padding-]")){
                        clearTimeout(window.visualEditDelay);
                        return false;
                    }

                }

            }

            if (body.hasClass("yp-selector-disabled")) {
                return false;
            }

            var selector = get_parents(element, "default");

            if (mainBody.hasClass("autocomplete-active") && selector == 'body') {
                return false;
            }

            // High Performance
            if(ypOption.high_performance){

                // Get tag
                var t = element.prop("tagName").toLowerCase();

                // placeholder not available for these tags
                if(t == "html" || t == "body" || t == "svg" || t == "img"){

                    // Update
                    body.attr("data-clickable-select", selector);

                    // tooltip update
                    paintCanvas.general.find(".yp-selected-tooltip").html("<small class='yp-tooltip-small'>" + get_tag_information(selector, true, null) + "</small> " + $.trim(selector));

                } 

            }

            if (evt.which == 1 || evt.which === undefined) {

                if (element.hasClass("yp-selected") === false && element.hasClass("yp-recent-hover-element") === true) {

                    if (is_content_selected() === true && element.parents(".yp-selected").length != 1) {

                        if (is_animate_creator() && is_dragging() === false) {

                            ypMessage({
                                title: lang.closeAnim,
                                showCancelButton: true,
                                animation: false,
                                customClass: "editor-style",
                                confirmButtonText: "Close",
                            },function(isConfirm){

                                if(isConfirm){

                                    swal.close();
                                    close_animation_generator(true);

                                }

                            });

                            return false;
                            
                        }

                        // multiple Selector
                        if(is_content_selected() && mainBody.hasClass("yp-control-key-down")){

                            if(element.hasClass("yp-selected-others-box") === false){

                                var selectorCurrent = get_current_selector();
                                var selectorNew = get_parents(element, "sharp");
                                paintCanvas.other.find(".yp-selected-others-multiple-box").remove();
                                iframe.find(".yp-multiple-selected").addClass("yp-selected-others").removeClass("yp-multiple-selected");
                                set_selector(selectorCurrent+","+selectorNew, get_selected_element(), true);

                                // Disable focus style after clicked.
                                element.blur();

                            }


                            return false;

                        }

                        // remove ex
                        clean();

                        // Quick update
                        window.mouseoverTrigger = true;
                        $(evt.target).trigger("mouseover");
                        window.mouseoverTrigger = false;

                    }

                } else {

                    if (is_content_selected() === false){

                        // Set selector as  body attr.
                        body.attr("data-clickable-select", selector);

                        set_draggable(element);

                        // RESIZE ELEMENTS
                        window.visualResizingType = 'width';
                        window.ResizeSelectedBorder = "right";
                        window.styleAttrBeforeChange = element.attr("style");

                        // Get Element
                        var elementGet = element.get(0);

                        // Stop if this not valid
                        if(isUndefined(elementGet)){
                            return false;
                        }

                        boxSize = elementGet.getBoundingClientRect();
                        window.elementOffsetLeft = boxSize.left;
                        window.elementOffsetRight = boxSize.right;

                        element.width(parseFloat(element.width() + 10));

                        if (window.elementOffsetLeft == boxSize.left && window.elementOffsetRight != boxSize.right) {
                            window.ResizeSelectedBorder = "right";
                        } else if (window.elementOffsetLeft != boxSize.left && window.elementOffsetRight == boxSize.right && element.css("text-align") != 'center') {
                            window.ResizeSelectedBorder = "left";
                        } else {
                            window.ResizeSelectedBorder = "right";
                        }

                        if (isDefined(window.styleAttrBeforeChange)) {
                            element.attr("style", window.styleAttrBeforeChange);
                        } else {
                            element.removeAttr("style");
                            window.styleAttrBeforeChange = null;
                        }

                        // element selected
                        body.addClass("yp-content-selected");

                        // can draw again when cursor already out from element after select
                        if(!mainBody.hasClass("yp-control-key-down")){
                            window.firstSelectLimit = true;
                        }

                        // Update States
                        states_changes_on_rule_group();

                        // Update CSS Editor
                        if(mainBody.hasClass("yp-css-editor-active")){
                            editor_update(true);
                        }

                        // update visual manager if is open
                        active_view_group();

                        // Update parent tree
                        if(window.targetIsParentTree == false && ypOption.show_parent_tree == true){
                            parent_tree_bar();
                        }

                        window.orginalHeight = parseFloat(element.css("height").replace(/px/g,''));
                        window.orginalWidth = parseFloat(element.css("width").replace(/px/g,''));

                        if(element.css("float") == 'right'){
                            body.addClass("yp-element-float");
                        }else{
                            body.removeClass("yp-element-float");
                        }

                        // list option
                        var ttag = element.prop("tagName").toLowerCase();
                        if(ttag == 'ul' || ttag == 'ol' || ttag == 'li'){
                            body.addClass("yp-element-list");
                        }else{
                            body.removeClass("yp-element-list");
                        }

                        // flex container
                        var display = element.css("display");
                        if(display == "flex" || display == "inline-flex"){
                            body.addClass("yp-flex-container");
                            $("li.flex-option").insertBefore($("li.grid-option")); // take before to run same property.
                        }

                        // flex element
                        if(element.parent().length > 0){
                            display = element.parent().css("display");
                            if(display == "flex" || display == "inline-flex"){
                                body.addClass("yp-flex-element");
                                $("li.flex-option").insertBefore($("li.grid-option")); // take before to run same property.
                            }
                        }

                        // grid option
                        display = element.css("display");
                        if(display == "grid" || display == "inline-grid"){
                            body.addClass("yp-grid-element");
                            $("li.grid-option").insertBefore($("li.flex-option")); // take before to run same property.
                        }

                        // Disable focus style after clicked.
                        element.blur();

                        if(is_animation_manager()){
                            animation_manager();
                        }

                        // Update the element informations.
                        if($(".advanced-info-box").css("display") == 'block'){
                            update_design_information("element");
                        }

                    }

                }

            } else {

                var hrefAttr = $(evt.target).attr("href");

                // If has href
                if (isDefined(hrefAttr)) {

                    evt.stopPropagation();
                    evt.preventDefault();

                    return false;

                }

            }

            draw();
            gui_update();

        }

    });

    
    /* ---------------------------------------------------- */
    /* Creating smart guides while resize & dragging        */
    /* ---------------------------------------------------- */
    function create_smart_guides(){

        if(body.hasClass("yp-smart-guide-disabled")){
            return false;
        }

        var maxWidth = 0;
        var maxWidthEl = null;
        var k = $(window).width();

        // Smart guides: START
        var Allelements = iframeBody.find(get_all_elements(":not(li)"));

        for (var i=0; i < Allelements.length; i++){

            // Element
            var el = $(Allelements[i]);

            // Get Element
            var elementGet = el.get(0);

            // skip if this not valid
            if(isUndefined(elementGet)){
                continue;
            }

            var otherWidth = elementGet.getBoundingClientRect().width;

            // 720 768 940 960 980 1030 1040 1170 1210 1268
            if(otherWidth >= 720 && otherWidth <= 1268 && otherWidth < (k-80)){

                if(otherWidth > maxWidth){
                    maxWidthEl = el;
                }

                maxWidth = Math.max(otherWidth, maxWidth);

            }

            // Box Size
            var boxSize = elementGet.getBoundingClientRect();

            if(el.parents(".yp-selected").length <= 0 && el.parents(".yp-selected-others").length <= 0 && el.css("display") != 'none' && el.css("opacity") != "0" && el.css("visibility") != 'hidden' && boxSize.height >= 10){ 

                // Getting sizes
                var otherTop = Math.round(boxSize.top + iframe.scrollTop());
                var otherLeft = Math.round(boxSize.left);
                var otherHeight = Math.round(boxSize.height);

                    // don't add "inner" same size elements.
                    if(iframeBody.find('[data-yp-top="'+otherTop+'"][data-yp-left="'+otherLeft+'"][data-yp-width="'+otherWidth+'"][data-yp-height="'+otherHeight+'"]').length <= 0){

                        // Saving for use on drag event.
                        // faster performance.
                        el.addClass("yp-smart-guide-elements")
                        .attr("data-yp-top",otherTop)
                        .attr("data-yp-left",otherLeft)
                        .attr("data-yp-top-round",yp_round(otherTop))
                        .attr("data-yp-bottom-round",yp_round(otherTop + otherHeight))
                        .attr("data-yp-left-round",yp_round(otherLeft))
                        .attr("data-yp-right-round",yp_round(otherLeft + otherWidth))
                        .attr("data-yp-width",otherWidth)
                        .attr("data-yp-height",otherHeight);
                    }

                }

        }

        // Not adding on responsive mode.
        if(maxWidthEl !== null){

            // Get Element
            var maxWidthElGet = maxWidthEl.get(0);

            // continue only if valid
            if(!isUndefined(maxWidthElGet)){
            
                var Pleft = maxWidthElGet.getBoundingClientRect().left;

                if(Pleft > 50){

                    var Pright = Pleft + maxWidth;

                    if(parseInt(Pleft) == parseInt(iframe.width() - Pright)){
                    
                        paintCanvas.extra.append("<div class='yp-page-border-left' style='left:"+Pleft+"px;'></div><div class='yp-page-border-right' style='left:"+Pright+"px;'></div>");

                    }

                }

            }

        }

        // Adding distance borders
        paintCanvas.extra.append("<div class='yp-x-distance-border'></div><div class='yp-y-distance-border'></div>");

    }


    /* ---------------------------------------------------- */
    /* Clean up smart guides                                */
    /* ---------------------------------------------------- */
    function clean_smart_guides(){

        paintCanvas.extra.find(".yp-page-border-left,.yp-page-border-right").remove();

        // Removing distance borders
        paintCanvas.extra.find(".yp-x-distance-border,.yp-y-distance-border,.yp-helper-tooltip").remove();

        iframeBody.find(".yp-smart-guide-elements").removeClass("yp-smart-guide-elements")
            .removeAttr("data-yp-top")
            .removeAttr("data-yp-left")
            .removeAttr("data-yp-width")
            .removeAttr("data-yp-top-round")
            .removeAttr("data-yp-bottom-round")
            .removeAttr("data-yp-left-round")
            .removeAttr("data-yp-right-round")
            .removeAttr("data-yp-height");

    }


    /* ---------------------------------------------------- */
    /* Resize Start : Width                                 */
    /* ---------------------------------------------------- */
    iframe.on("mousedown", '.yp-selected-boxed-left,.yp-selected-boxed-right', function(event) {

    var element = $(this);

    // if float not right, left disable
    if(body.hasClass("yp-element-float") == false && element.hasClass("yp-selected-boxed-left")){
        return false;
    }

    body.addClass("resize-time-delay");

    var valueData = '';
    var dynamicValue = get_applied_style_data(get_current_selector(), "width", [false, false, false, false]);
    if(typeof dynamicValue === 'object'){
        dynamicValue.always(function(data){
            valueData = data;
        });
    }

    clearTimeout(window.resizeDelay);
    window.resizeDelay = setTimeout(function(){

        if (is_content_selected() === false) {
            return false;
        }

        window.visualResizingType = 'width';

        if (element.hasClass("yp-selected-boxed-left")) {
            window.ResizeSelectedBorder = "left";
        } else {
            window.ResizeSelectedBorder = "right";
        }

        window.mouseisDown = true;

        var el = iframeBody.find(".yp-selected");

        // Get Element
        var elementGet = element.get(0);

        // continue only if valid
        if(!isUndefined(elementGet)){

            // generate box size
            var boxSize = elementGet.getBoundingClientRect();

        // All zero
        }else{

            var boxSize = {};
            boxSize.width = 0;
            boxSize.height = 0;
            boxSize.left = 0;
            boxSize.right = 0;
            boxSize.top = 0;
            boxSize.bottom = 0;

        }

        window.mouseDownX = boxSize.left;
        window.exWidthX = parseFloat(boxSize.width);
        window.exWidthY = null;
        window.currentMarginLeft = parseFloat(el.css("marginLeft"));

        window.maxData = {width: parseFloat(el.css("maxWidth")), height: parseFloat(el.css("maxHeight"))};
        window.minData = {width: parseFloat(el.css("minWidth")), height: parseFloat(el.css("minHeight"))};


        // Try to use % Percent format
        var widthPercent = calcature_smart_sizes(get_selected_element(), get_selected_element().css('width'));
        window.liveResizeWPercent = false;
        if(widthPercent.format == '%'){
            window.liveResizeWPercent = true;
        }

        // Get saved data from CSS editor.
        if(widthPercent.format != '%' && get_applied_style_data(get_current_selector(), "width", [false, true, false, false])){

            if(valueData.indexOf("%") != -1){
                window.liveResizeWPercent = true;
            }

        }

        iframe.find("html").addClass("yp-element-resizing");
        body.addClass("yp-element-resizing yp-clean-look");

        // Close contextmenu
        if (iframe.find(".context-menu-active").length > 0) {
            get_selected_element().contextMenu("hide");
        }

        // show size tooltip
        paintCanvas.extra.append("<div class='yp-helper-tooltip'></div>");

        create_smart_guides();

    },150);

    });


    /* ---------------------------------------------------- */
    /* Resize Start : Height                                */
    /* ---------------------------------------------------- */
    iframe.on("mousedown", '.yp-selected-boxed-bottom', function(event) { // removed since 5.5.6 .yp-selected-boxed-top

    var element = $(this);

    body.addClass("resize-time-delay");

    clearTimeout(window.resizeDelay);
    window.resizeDelay = setTimeout(function(){

        if (is_content_selected() === false) {
            return false;
        }

        // Update variables
        window.mouseisDown = true;

        window.visualResizingType = 'height';
        
        if (element.hasClass("yp-selected-boxed-top")) {
            window.ResizeSelectedBorder = "top";
        } else {
            window.ResizeSelectedBorder = "bottom";
        }

        // Selected Element
        var el = iframe.find(".yp-selected");

        // Get Element
        var elGet = el.get(0);

        // continue only if valid
        if(!isUndefined(elGet)){

            // generate box size
            var boxSize = elGet.getBoundingClientRect();

        // All zero
        }else{

            var boxSize = {};
            boxSize.width = 0;
            boxSize.height = 0;
            boxSize.left = 0;
            boxSize.right = 0;
            boxSize.top = 0;
            boxSize.bottom = 0;

        }

        // get scroll top
        var scrollTop = parseFloat(iframe.scrollTop());

        window.mouseDownY = boxSize.top + scrollTop;
        window.exWidthY = parseFloat(boxSize.height);
        window.exWidthX = null;
        window.currentMarginTop = parseFloat(el.css("marginTop"));

        window.maxData = {width: parseFloat(el.css("maxWidth")), height: parseFloat(el.css("maxHeight"))};
        window.minData = {width: parseFloat(el.css("minWidth")), height: parseFloat(el.css("minHeight"))};

        body.addClass("yp-element-resizing yp-clean-look");

        // Close contextmenu
        if (iframe.find(".context-menu-active").length > 0) {
            get_selected_element().contextMenu("hide");
        }

        // Removing classes.
        iframe.find(get_current_selector()).removeClass("yp_selected yp_onscreen yp_hover yp_focus yp_click");

        // show size tooltip
        paintCanvas.extra.append("<div class='yp-helper-tooltip'></div>");

        create_smart_guides();

    },150);

    });


    /* ---------------------------------------------------- */
    /* Resize: Resizing                                     */
    /* ---------------------------------------------------- */
    iframe.on("mousemove", iframe, function(event) {

        if (window.mouseisDown === true) {

            var yBorder = paintCanvas.extra.find(".yp-y-distance-border");
            var xBorder = paintCanvas.extra.find(".yp-x-distance-border");

            // cache
            var element = get_selected_element();

            // Get Element
            var elementGet = element.get(0);

            // continue only if valid
            if(!isUndefined(elementGet)){

                // generate box size
                var boxSize = elementGet.getBoundingClientRect();

            // All zero
            }else{

                var boxSize = {};
                boxSize.width = 0;
                boxSize.height = 0;
                boxSize.left = 0;
                boxSize.right = 0;
                boxSize.top = 0;
                boxSize.bottom = 0;

            }

            // Convert display inline to inline-block.
            if (element.css("display") == 'inline') {
                insert_rule(null, "display", "inline-block", "");
            }

            var format = 'px';

            if(window.liveResizeWPercent == true){
                format = '%';
            }

            var width,smartData,height, transformDif;

            // If width
            if (window.visualResizingType == "width") {

                transformDif = boxSize.width - element.outerWidth(false);

                if (window.ResizeSelectedBorder == 'left'){
                    width = Math.round(boxSize.left) + Math.round(boxSize.width) - Math.round(event.pageX) - transformDif;
                } else {
                    width = Math.round(event.pageX) - Math.round(boxSize.left) - transformDif;
                }

                // Min 4px
                if ((format == 'px' && width > 4) || (format == '%' && width > 2)) {

                    if (element.css("boxSizing") == 'content-box') {
                        width = width - Math.round(parseFloat(element.css("paddingLeft"))) - Math.round(parseFloat(element.css("paddingRight")));
                    }

                    // calcature smart sizes. 100% etc
                    smartData = calcature_smart_sizes(element, width);

                    // Update
                    width = smartData.val;
                    format = smartData.format;

                    if(window.wasLockX === false){
                        element.cssImportant("width", width + format);
                    }

                    draw_box(".yp-selected", 'yp-selected-boxed');

                }

                body.addClass("yp-element-resizing-width-" + window.ResizeSelectedBorder);

            } else if (window.visualResizingType == "height") { // else height

                transformDif = boxSize.height - element.outerHeight(false);

                if (window.ResizeSelectedBorder == 'top') {
                    height = Math.round(boxSize.bottom+iframe.scrollTop()) - Math.round(event.pageY);
                } else {
                    height = Math.round(event.pageY) - Math.round(boxSize.top+iframe.scrollTop()) - transformDif;
                }

                // Min 4px
                if (format == 'px' && height > 4){

                    if (element.css("boxSizing") == 'content-box') {
                        height = height - Math.round(parseFloat(element.css("paddingTop"))) - Math.round(parseFloat(element.css("paddingBottom")));
                    }

                    if(window.wasLockY === false){
                        element.cssImportant("height", height + format);
                    }

                    draw_box(".yp-selected", 'yp-selected-boxed');

                }

                body.addClass("yp-element-resizing-height-" + window.ResizeSelectedBorder);

            }

            var tooltipContent = '';
            var roundedNum = 0;

            // Update helper tooltip
            if(window.visualResizingType == "width"){
                if(width < 5 && format == 'px'){width = 5;}else if(width < 2){width = 2;}
                if(format == '%'){roundedNum = Math.round(width * 10) / 10;}else{roundedNum = Math.round(width);}
                tooltipContent = 'W : '+roundedNum + format;
            }else{
                if(height < 5){height = 5;}
                roundedNum = Math.round(height);
                tooltipContent = 'H : '+roundedNum + format;
            }


            // Show : initial at tooltip when resize at default value
            if(window.visualResizingType == "height"){
                if(parseInt(window.orginalHeight) == parseInt(height)){
                    tooltipContent = 'H : ' + "initial - " + window.orginalHeight + "px";
                }
            }else{
                if(parseInt(window.orginalWidth) == parseInt(width)){
                    tooltipContent = 'W : ' + "initial - " + window.orginalWidth + "px";
                }
            }


            // offsets
            var selfTop = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-top").css("top")));
            var selfLeft = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-left").css("left")));
            var selfRight = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-right").css("left")));
            var selfBottom = Math.round(parseFloat(paintCanvas.active.find(".yp-selected-boxed-bottom").css("top")));

            // Variables
            var wLeft,wWidth,wTop,forceH,wHeight,forceW,otherTop,otherLeft,otherWidth,otherHeight,otherBottom,otherRight;

            // Create smart guides for height.
            if(window.visualResizingType == "height"){

                xBorder.css("display","none");
                window.wasLockY = false;

                var axsisxEl = iframeBody.find(".yp-smart-guide-elements[data-yp-top-round='"+yp_round(event.pageY)+"'],.yp-smart-guide-elements[data-yp-bottom-round='"+yp_round(event.pageY)+"']").first();

                if(axsisxEl.length > 0){

                    // Getting sizes
                    otherTop = parseFloat(axsisxEl.attr("data-yp-top"));
                    otherLeft = parseFloat(axsisxEl.attr("data-yp-left"));
                    otherWidth = parseFloat(axsisxEl.attr("data-yp-width"));
                    otherHeight = parseFloat(axsisxEl.attr("data-yp-height"));
                    otherBottom = parseFloat(otherTop+otherHeight);
                    otherRight = parseFloat(otherLeft+otherWidth);

                    // Calculate smart guides positions.
                    if(selfLeft > otherLeft){
                        wLeft = otherLeft;
                        wWidth = selfRight-wLeft;
                    }else{
                        wLeft = selfLeft;
                        wWidth = otherRight-selfLeft;
                    }

                    // Find top or bottom.
                    if(axsisxEl.attr("data-yp-top-round") == yp_round(event.pageY)){
                        wTop = otherTop;
                        forceH = otherTop-selfTop;
                    }else{
                        wTop = otherBottom;
                        forceH = otherBottom-selfTop;
                    }

                    transformDif = boxSize.height - element.outerHeight(false);

                    forceH = forceH - transformDif;

                    if(window.ResizeSelectedBorder != 'top'){
                        element.cssImportant("height", forceH + format);
                        window.wasLockY = true;
                    }else{
                        forceH = height;
                    }

                    xBorder.css({'top':wTop,'left':wLeft,'width':wWidth,'display':'block'});

                    if(forceH < 5){forceH = 5;}
                    roundedNum = Math.round(forceH);

                    tooltipContent = 'H : '+roundedNum + format;

                }

                // Show : initial at tooltip when resize at default value
                if(parseInt(window.orginalHeight) == parseInt(forceH)){
                    tooltipContent = 'H : ' + "initial - " + window.orginalHeight + "px";
                }

            }

            // Create smart guides for width.
            if(window.visualResizingType == "width"){

                window.wasLockX = false;
                yBorder.css("display","none");

                var axsisyEl = iframeBody.find(".yp-smart-guide-elements[data-yp-left-round='"+yp_round(event.pageX)+"'],.yp-smart-guide-elements[data-yp-right-round='"+yp_round(event.pageX)+"']").first();

                if(axsisyEl.length > 0){

                    // Getting sizes
                    otherTop = parseFloat(axsisyEl.attr("data-yp-top"));
                    otherLeft = parseFloat(axsisyEl.attr("data-yp-left"));
                    otherWidth = parseFloat(axsisyEl.attr("data-yp-width"));
                    otherHeight = parseFloat(axsisyEl.attr("data-yp-height"));
                    otherBottom = parseFloat(otherTop+otherHeight);
                    otherRight = parseFloat(otherLeft+otherWidth);

                    // Calculate smart guides positions.
                    if(selfTop > otherTop){
                        wTop = otherTop;
                        wHeight = selfBottom-otherTop;
                    }else{
                        wTop = selfTop;
                        wHeight = otherBottom-selfTop;
                    }

                    // Find top or bottom.
                    if(axsisyEl.attr("data-yp-left-round") == yp_round(event.pageX)){
                        wLeft = otherLeft;
                        forceW = otherLeft-selfLeft;
                    }else{
                        wLeft = otherRight;
                        forceW = otherRight-selfLeft;
                    }


                    transformDif = boxSize.width - element.outerWidth(false);

                    forceW = forceW - transformDif;

                    // calcature smart sizes. 100% etc
                    smartData = calcature_smart_sizes(element, forceW);

                    // Update
                    forceW = smartData.val;
                    format = smartData.format;


                    if(window.ResizeSelectedBorder != 'left'){
                        element.cssImportant("width", forceW + format);
                        window.wasLockX = true;
                    }else{
                        forceW = width;
                    }

                    yBorder.css({'top':wTop,'left':wLeft,'height':wHeight,'display':'block'});

                    if(format == '%'){
                        if(forceW < 2){forceW = 2;}
                        roundedNum = Math.round(forceW * 10) / 10;
                    }else{
                        if(forceW < 5){forceW = 5;}
                        roundedNum = Math.round(forceW);
                    }
                    tooltipContent = 'W : '+roundedNum + format;

                }

                // Show : initial at tooltip when resize at default value
                if(parseInt(window.orginalWidth) == parseInt(forceW)){
                    tooltipContent = 'W : ' + "initial - " + window.orginalWidth + "px";
                }

            }

            var leftX = event.pageX + 30;
            if(leftX + 120 >= $("#iframe").width()){
                leftX = event.pageX - 120;
            }

            // Update helper tooltip
            paintCanvas.extra.find(".yp-helper-tooltip").css({'top':event.pageY,'left':leftX}).html(tooltipContent);

        }

    });


    /* ---------------------------------------------------- */
    /* Calcature Smart Sizes 100%, 100vh etc                */
    /* ---------------------------------------------------- */
    function calcature_smart_sizes(element,val){

        // Variable
        var result = [];

        var founded = false;

        // Check parent details.
        if(element.parent().length > 0){

            // IF not any inline or table display
            if(element.parent().css("display").indexOf("table") == -1 && element.parent().css("display") != 'inline' && element.parent().css("display") != 'inline-flex'){

                var parentWidth = element.parent().width();

                // if start width percent, use automatic percent all time while resizing.
                if(window.liveResizeWPercent == true){

                    // Flag
                    founded = true;

                    // Update
                    result.val = Math.round((parseFloat(val)*100/parseFloat(parentWidth)) * 10 ) / 10;
                    result.format = '%';

                    
                }

                // if width is same with parent width, so set 100%!
                if (parseInt(parentWidth) == parseInt(val) && founded == false) {

                    // Flag
                    founded = true;

                    // Update
                    result.val = 100;
                    result.format = '%';

                }

                // if width is 50% with parent width, so set 50%!
                if (parseInt(parentWidth/2) == parseInt(val) && founded == false) {

                    // Flag
                    founded = true;

                    // Update
                    result.val = 50;
                    result.format = '%';

                }

                // if width is 25% with parent width, so set 25%!
                if (parseInt(parentWidth/4) == parseInt(val) && founded == false) {

                    // Flag
                    founded = true;

                    // Update
                    result.val = 25;
                    result.format = '%';

                }

                // if width is 20% with parent width, so set 20%!
                if (parseInt(parentWidth/5) == parseInt(val) && founded == false) {

                    // Flag
                    founded = true;

                    // Update
                    result.val = 20;
                    result.format = '%';

                }

            }

        }

        // Return default
        if(founded === false){
            result.val = val;
            result.format = 'px';
        }

        return result;

    }


    /* ---------------------------------------------------- */
    /* Resize: End                                          */
    /* ---------------------------------------------------- */
    iframe.on("mouseup", iframe, function() {

        clearTimeout(window.resizeDelay);

        if (is_resizing()) {

            clean_smart_guides();

            // show size tooltip
            paintCanvas.extra.find(".yp-helper-tooltip").remove();

            body.addClass("yp-element-resized");

            var bWidth;
            if(window.visualResizingType == 'width'){
                bWidth = window.exWidthX;
            }else{
                bWidth = window.exWidthY;
            }

            // cache
            var element = get_selected_element();

            // get result
            var width = parseFloat(element.css(window.visualResizingType)).toString();
            var format = 'px';
            var widthCa = width;

            // width 100% for screen
            if (window.visualResizingType == 'width') {
                    
                // calcature smart sizes. 100% etc
                var smartData = calcature_smart_sizes(element,width);

                // Update
                width = smartData.val;
                format = smartData.format;

            }

            // no ,
            width = Math.round(width);

            if(window.exWidthX !== null && window.ResizeSelectedBorder == 'left' && widthCa != bWidth){
                insert_rule(null,"margin-left",parseFloat(element.css("marginLeft")),'px');
            }

            if(window.exWidthY !== null && window.ResizeSelectedBorder == 'top' && widthCa != bWidth){
                insert_rule(null,"margin-top",parseFloat(element.css("marginTop")),'px');
            }

            //return to default
            if (isDefined(window.styleAttrBeforeChange)) {
                element.attr("style", window.styleAttrBeforeChange);
            } else {
                element.removeAttr("style");
            }

            // Still show changes with live css after remove Style attr
            insert_live_css("min-height", width + "" + format);

            // insert to data.
            if(widthCa != bWidth){

                // Set just min height if new value higher than old
                if(window.visualResizingType == 'height' && widthCa > window.orginalHeight){

                    // delete inserted height and insert min height.
                    setStyles(removeStyle(getStyles(), "[selector=" + get_id(get_current_selector()) + "][rule=height][msize=" + get_media_condition() + "]"));

                    // Wait for remove style attr
                    setTimeout(function(){
                        insert_rule(null, "min-height", width, format);
                    }, 5);

                }else{
                    insert_rule(null, window.visualResizingType, width, format);
                }

            }

            iframe.find("html").removeClass("yp-element-resizing");
            body.removeClass("yp-element-resizing yp-clean-look yp-element-resizing-height-bottom yp-element-resizing-width-right");


            // If width/height large than max width/height
            if(window.maxData[window.visualResizingType] < width){
                insert_rule(null, "max-"+window.visualResizingType, width, format);
            }

            // If width large than max width/height
            if(window.minData[window.visualResizingType] > width){
                insert_rule(null, "min-"+window.visualResizingType, width, format);
            }

            draw();

            // Update
            option_change();

            // Set default values for top and left options.
            $.each(['width','height','max-width','max-height','min-width','min-height','margin-left','margin-top'], function(i, v) {
                set_default_value(v);
            });
                
            window.mouseisDown = false;
            window.liveResizeWPercent = false;

            draw();

            setTimeout(function() {
                body.removeClass("yp-element-resized resize-time-delay");
            }, 100);

        }

    });


    /* ---------------------------------------------------- */
    /* Rounding numbers                                     */
    /* ---------------------------------------------------- */
    function yp_round(x){
        return Math.round(x / 6) * 6;
    }


    window.visualEdit = false;
    window.visualEditDelay = null;

    /* ---------------------------------------------------- */
    /* Visual Editing : Start                               */
    /* ---------------------------------------------------- */
    iframe.on("mousedown", '.yp-selected-boxed-margin-left,.yp-selected-boxed-margin-right,.yp-selected-boxed-margin-top,.yp-selected-boxed-margin-bottom,.yp-selected-boxed-padding-left,.yp-selected-boxed-padding-right,.yp-selected-boxed-padding-top,.yp-selected-boxed-padding-bottom', function(event) {

    if(event.which == 2 || event.which == 3){
        return false;
    }

    // margin/padding viewer element
    var element = $(this);

    clearTimeout(window.visualEditDelay);

    window.visualEditDelay = setTimeout(function(){

        if (is_content_selected() === false) {
            return false;
        }

        // margin/padding viewer element class
        var classes = element.attr("class").replace(/yp-recent-hover-element/g,'').trim();

        element.addClass("yp-visual-active").removeClass("yp-zero-margin-w yp-zero-margin-h");

        // Margin || Padding
        window.visualEditType = classes.match(/boxed-[a-z]+/g).toString().replace("boxed-","");

        // Top, left, right, bottom
        window.visualEditPosition = classes.match(/boxed-(margin|padding)-[a-z]+/g).toString().replace(/boxed-|margin|padding|-/g,"");

        // continue on mousemove event
        window.visualEdit = true;

        // Cache mouse position on mousedown
        window.visualEditX = Math.round(event.pageX);
        window.visualEditY = Math.round(event.pageY);

        // ex margin-top
        var rule = window.visualEditType + "-" + window.visualEditPosition;

        // CSS property
        window.visualEditValue = get_selected_element().css(rule);

        // Cache original data
        window.visualEditValueOr = window.visualEditValue;

        // Default 5
        if(isUndefined(window.visualEditValue)){
            window.visualEditValue = 5;

        // Int
        }else{
            window.visualEditValue = parseInt(window.visualEditValue);
        }

        // Add class
        body.addClass("yp-visual-editing yp-clean-look");

        // X and Y
        if(/(left|right)/g.test(window.visualEditPosition)){
            body.addClass("yp-visual-editing-x");
        }else{
            body.addClass("yp-visual-editing-y");
        }

        window.currentLiveSelector = get_live_selector();

        // Use outline for performance
        body.addClass("yp-has-transform");

    },150);

    });



    /* ---------------------------------------------------- */
    /* Visual Editing : Editing                             */
    /* ---------------------------------------------------- */
    iframe.on("mousemove", iframe, function(event) {

        if(window.visualEdit){

            var dif,rule,style,format;

            // Dif
            if(/(left|right)/g.test(window.visualEditPosition)){

                if(window.visualEditType == 'padding'){

                    // Negative
                    if(/left/g.test(window.visualEditPosition)){
                        dif = Math.round(event.pageX) - window.visualEditX;
                    }else{
                        dif = window.visualEditX - Math.round(event.pageX);
                    }

                }else{

                    dif = Math.round(event.pageX) - window.visualEditX;

                }

                format = 'width';

            }else{
                
                dif = Math.round(event.pageY) - window.visualEditY;

                format = 'height';

            }

            // All in
            dif = dif + window.visualEditValue;

            // min 0
            if(dif < 0){
                dif = 0;
            }

            // CSS Rule
            rule = window.visualEditType + "-" + window.visualEditPosition;

            style = '';


            // Selected Element
            var selectedElement = get_selected_element();

            // Get Element
            var elementGet = selectedElement.get(0);

            // continue only if valid
            if(!isUndefined(elementGet)){

                // generate box size
                var boxSize = elementGet.getBoundingClientRect();

            // All zero
            }else{

                var boxSize = {};
                boxSize.width = 0;
                boxSize.height = 0;
                boxSize.left = 0;
                boxSize.right = 0;
                boxSize.top = 0;
                boxSize.bottom = 0;

            }

            // get scroll top
            var scrollTop = parseFloat(iframe.scrollTop());

            // get sizes
            var elementWidth = boxSize.width;
            var elementHeight = boxSize.height;
            var elementTop = boxSize.top + scrollTop;
            var elementLeft = boxSize.left;

            // other sizes
            var elementRight = parseFloat(elementLeft + elementWidth);
            var elementBottom = parseFloat(elementTop + elementHeight);

            // Update Margin Right
            if(window.visualEditType + "-" + window.visualEditPosition == 'margin-right'){
                style += ".yp-selected-boxed-margin-right{ top: "+elementTop+"px !important; height:"+elementHeight+"px !important;left:"+elementRight+"px !important; }";
            }

            // Update Padding Right
            if(window.visualEditType + "-" + window.visualEditPosition == 'padding-right'){
                style += ".yp-selected-boxed-padding-right{ top: "+elementTop+"px !important; height:"+elementHeight+"px !important;left:"+(elementRight-dif)+"px !important; }";
            }

            // Update Margin Left
            if(window.visualEditType + "-" + window.visualEditPosition == 'margin-left'){
                style += ".yp-selected-boxed-margin-left{ top: "+elementTop+"px !important; height:"+elementHeight+"px !important;left:"+(elementLeft-dif)+"px !important; }";
            }

            // Update Padding Left
            if(window.visualEditType + "-" + window.visualEditPosition == 'padding-left'){
                style += ".yp-selected-boxed-padding-left{ top: "+elementTop+"px !important; height:"+elementHeight+"px !important;left:"+elementLeft+"px !important; }";
            }

            var marginLeft, marginRight, outlineWidth, marginOutLeft;

            // Need marginLeft and MarginRight value for margin top and bottom
            if(window.visualEditType + "-" + window.visualEditPosition == 'margin-top' || window.visualEditType + "-" + window.visualEditPosition == 'margin-bottom'){
                marginLeft = parseFloat(selectedElement.css("margin-left"));
                marginRight = parseFloat(selectedElement.css("margin-right"));
                outlineWidth = parseFloat(elementWidth) + marginLeft + marginRight;
                marginOutLeft = parseFloat(elementLeft) - marginLeft;
            }

            // Update Margin Top
            if(window.visualEditType + "-" + window.visualEditPosition == 'margin-top'){
                style += ".yp-selected-boxed-margin-top{ top: "+(elementTop-dif)+"px !important; width:"+outlineWidth+"px !important;left:"+marginOutLeft+"px !important; }";
            }

            // Update Padding Top
            if(window.visualEditType + "-" + window.visualEditPosition == 'padding-top'){
                style += ".yp-selected-boxed-padding-top{ top: "+elementTop+"px !important; width:"+elementWidth+"px !important;left:"+elementLeft+"px !important; }";
            }

            // Update Margin Bottom
            if(window.visualEditType + "-" + window.visualEditPosition == 'margin-bottom'){
                style += ".yp-selected-boxed-margin-bottom{ top: "+elementBottom+"px !important; width:"+outlineWidth+"px !important;left:"+marginOutLeft+"px !important; }";
            }

            // Update Padding Bottom
            if(window.visualEditType + "-" + window.visualEditPosition == 'padding-bottom'){
                style += ".yp-selected-boxed-padding-bottom{ top: "+(elementBottom-dif)+"px !important; width:"+elementWidth+"px !important;left:"+elementLeft+"px !important; }";
            }


            // Int only.
            dif = parseInt(dif);


            // Ex .yp-selected-boxed-padding-top:15px;
            style += ".yp-selected-boxed-" + window.visualEditType + "-" + window.visualEditPosition + "{ " + format + " : " + dif + "px !important; }";

            // Set the new value to the element
            style += "body.yp-content-selected .yp-selected," + window.currentLiveSelector + "{ " + rule + " : " + dif + "px !important; }";

            // Add & Update the live CSS
            if(iframe.find("#yp-visual-edit-css").length == 0){

                // Add
                iframeBody.append("<style id='yp-visual-edit-css'>" + style + "</style>");

            }else{

                // Update
                iframe.find("#yp-visual-edit-css").html(style);

            }

            // Show PX
            paintCanvas.active.find(".yp-selected-boxed-"+window.visualEditType+"-"+window.visualEditPosition+"").html(dif+"px");

        }

    });


    /* ---------------------------------------------------- */
    /* Visual Editing : End                                 */
    /* ---------------------------------------------------- */
    iframe.on("mouseup", iframe, function() {

        if(window.visualEdit){

            window.visualEdit = false;

            // Add
            body.addClass("yp-visual-edited");

            // Remove
            body.removeClass("yp-visual-editing yp-visual-editing-x yp-visual-editing-y yp-clean-look yp-has-transform");

            // CSS Remove
            iframe.find("#yp-visual-edit-css").remove();

            // Element
            var element = paintCanvas.active.find(".yp-selected-boxed-"+window.visualEditType+"-"+window.visualEditPosition+"");

            // Val
            var value = element.text();

            // Clean HTML
            if(parseInt(value) <= 30){
                element.html("");
            }

            // Insert CSS if data not same
            if(window.visualEditValueOr != value){

                // Insert CSS
                insert_rule(null, window.visualEditType + "-" + window.visualEditPosition, value);

                // Update
                option_change();

                // Set default values for current property options.
                set_default_value(window.visualEditType+"-"+window.visualEditPosition);

                gui_update();

            }

            setTimeout(function(){

                // remove active class
                iframe.find(".yp-visual-active").removeClass("yp-visual-active");

                // Update
                body.removeClass("yp-visual-edited");

                // Draw
                draw();

            }, 100);

        }

    });


    /* ---------------------------------------------------- */
    /* Doesn't getting styles while element hover           */
    /* because the editor must load only non-hover styles   */
    /* ---------------------------------------------------- */
    body.on('mousedown', '.yp-editor-list > li:not(.active)', function() {

        if (is_content_selected() === true) {

            // Li Element
            var li = $(this);

            // Get data
            var data = li.attr("data-loaded");

            // Get setup
            var setup = li.attr("data-setup");

            // If framework not setup yet, so setup.
            if (typeof setup == typeof undefined || setup === false) {

                // setup color picker
                li.find(".wqcolorpicker").cs_iris({
                    hide: true,
                    width: wIris
                });

                // Setup Li
                if(li.hasClass("background-option")){
                    $("#iris-gradient-color").cs_iris({
                        hide:true,
                        width:wIris
                    });
                }

                // Setup sliders
                li.find(".yp-slider-option").each(function() {
                    slider_option(get_option_id(this), $(this).data("decimals"));
                });

                // When section open, start to load json files
                li.find(".yp-select-option").each(function(){

                    // Get Element
                    var el = $(this);
                    var data = el.find("textarea");

                    // If URL
                    if(/^http/g.test(data.val())){

                        // This waiting until load JSON file
                        $.getJSON(data.val(), function(result){
                            data.val(JSON.stringify(result));
                            autocomplete_option(el.find(".input-autocomplete"));
                        }).fail(function() {
                            show_notification("Could Not Load Json library.", "jsonError");
                        });

                    }else{

                        // Setup autocompletes
                        autocomplete_option(li.find(".input-autocomplete"));

                    }

                });

                

                // cache setup
                li.attr("data-setup", "true");

            }

            // If no data, so set.
            if (typeof data == typeof undefined || data === false) {

                // Set default values
                li.find(".yp-option-group").each(function() {
                    set_default_value(get_option_id(this));
                });

                // cache to loaded data.
                li.attr("data-loaded", "true");

                // Updating properties size tabs.
                update_property_sizes(null);

            }

        }

    });


    /* ---------------------------------------------------- */
    /* ReDraw the element if hover                          */
    /* ---------------------------------------------------- */
    iframe.on("mouseout mouseover", '.yp-selected', function(e) {

        // First default after selection
        if(window.firstSelectLimit && e.type == "mouseover"){
            return false;
        }

        // Update on second, when first out, can start draw again
        if(window.firstSelectLimit){
            window.firstSelectLimit = false;
            return false;
        }

        if (is_content_selected() == true && is_resizing() == false && is_dragging() == false && is_visual_editing() == false) {

            clearTimeout(window.update_drawmouseOver);
            window.update_drawmouseOver = setTimeout(function() {
                draw();
            }, 50);

        }

    });


    /* ---------------------------------------------------- */
    /* Getting All ideal elements. Used by smart guides.    */
    /* ---------------------------------------------------- */
    function get_all_elements(custom){

        var selector = '*';

        var notSelectors = [
            ".yp-x-distance-border",
            ".yp-y-distance-border",
            ".hover-info-box",
            ".yp-size-handle",
            ".yp-edit-tooltip",
            ".yp-edit-menu",
            ".yp-selected-tooltip",
            ".yp-tooltip-small",
            ".yp-helper-tooltip",
            "[class^='yp-selected-boxed-']",
            "[class^='yp-selected-others-box']",
            "link",
            "style",
            "script",
            "param",
            "option",
            "tr",
            "td",
            "th",
            "thead",
            "tbody",
            "tfoot",
            "iframe",
            "noscript",
            ".scene-1",
            ".scene-2",
            ".scene-3",
            ".scene-4",
            ".scene-5",
            ".scene-6",
            "#yp-anim-scenes",
            "#animate-test-drive"
        ];

        // Get classes added by editor
        var pluginClasses = window.plugin_classes_list.split("|");

        for(var x = 0; x < pluginClasses.length; x++){
            pluginClasses[x] = "." + pluginClasses[x];
        }

        // concat
        notSelectors = notSelectors.concat(pluginClasses);

        // Adding not selectors
        for(var i = 0; i < notSelectors.length; i++){
            selector += ":not("+notSelectors[i]+")";
        }

        // parement
        if(custom !== undefined){
            selector += custom;
        }

        return selector;

    }


    /* ---------------------------------------------------- */
    /* None / Disable Buttons API                           */
    /* ---------------------------------------------------- */
    $(".yp-btn-action").click(function(e) {

        // Default Variables
        var value = '', prefix = '', id, elementPP, buttonText, inputText, inputPrefix;

        // Element PP
        elementPP = $(this).parent().parent().parent();

        // Option ID: CSS Rule
        id = get_option_id(elementPP);

        // Getting button Text
        buttonText = elementPP.find(".yp-none-btn").attr("data-default");

        // Input Value
        inputText = $("#yp-" + id).val();

        // Input Prefix
        inputPrefix = $("#" + id + "-after").val();

        // If this is None Button, setting default value of CSS Rule
        if ($(this).hasClass("yp-none-btn")) {

            // Shows reset icon if has value
            if (elementPP.find(".yp-disable-btn.active").length >= 0) {

                // Trigger click
                elementPP.find(".yp-disable-btn.active").trigger("click");

                // Make it reset-able if orginalEvent
                if (e.originalEvent && $(this).hasClass("active") == false) {
                    elementPP.addClass("reset-enable");
                }

            }


            // cant click if default is already none value.
            if(elementPP.hasClass("reset-enable") == false && $(this).hasClass("active") && e.originalEvent){

                if(elementPP.hasClass("yp-input-option") || id == "background-color"){
                    return false;
                }

                if(elementPP.find(".yp-radio-content").length > 0 || elementPP.find(".input-autocomplete").length > 0){
                    return false;
                }

            }


            // If slider
            if (elementPP.hasClass("yp-slider-option")) {

                // If active
                if ($(this).hasClass("active")) {

                    // remove active Class
                    $(this).removeClass("active");

                    // Value
                    value = inputText;
                    prefix = inputPrefix;

                } else {

                    $(this).addClass("active");

                    // Value
                    value = buttonText;

                }

                // If is radio
            } else if (elementPP.find(".yp-radio-content").length > 0) {

                // If active
                if ($(this).hasClass("active")) {

                    // remove active class
                    $(this).removeClass("active");

                    // Value
                    value = $("input[name=" + id + "]:checked").val();

                    // Add active class to checked value
                    $("input[name=" + id + "]:checked").parent().addClass("active");

                } else {

                    // Add active Class
                    $(this).addClass("active");

                    // Remove Active class from active radios
                    elementPP.find(".yp-radio.active").removeClass("active");

                    // Value
                    value = buttonText;

                }

                // If is select
            } else if (elementPP.find(".input-autocomplete").length > 0) {
                
                // If active
                if ($(this).hasClass("active")) {

                    // Remove active Class
                    $(this).removeClass("active");

                    // Value
                    value = inputText;

                } else {

                    // Add active Class
                    $(this).addClass("active");

                    // Value
                    value = buttonText;

                }

            // Other formats
            } else {

                // If active
                if ($(this).hasClass("active")) {

                    // Remove active class
                    $(this).removeClass("active");

                    // Value
                    value = inputText;

                    // Update background color
                    elementPP.find(".wqminicolors-swatch-color").css("backgroundColor",value);

                } else {

                    // Add active class
                    $(this).addClass("active");

                    // Update background color
                    elementPP.find(".wqminicolors-swatch-color").css("backgroundColor","transparent");

                    // Value
                    value = 'transparent';

                }

            }

            // Transparent value for background-image
            if (id == 'background-image') {

                // Auto adds URL
                if (value.indexOf("linear-gradient(") == -1) {
                    if(value.indexOf("//") != -1 || value.indexOf("data:") != -1){
                        value = 'url("' + value + '")';
                    }
                }

                // transparent means none
                if (value == 'transparent') {
                    value = 'none';
                }

            }

            // None value for List style
            if (id == 'list-style-image') {

                // auto adds URL
                if(value.indexOf("//") != -1 || value.indexOf("data:") != -1){
                    value = 'url("' + value + '")';
                }

                // transparent mean none
                if (value == 'transparent') {
                    value = 'none';
                }

            }

            // Delete all actives from background-image if property disabled.
            if(id == "background-image"){
                $(".yp-unsplash-list > span.active,.yp-gradient-demo.active,.yp_bg_assets.active").removeClass("active");
            }

        } else { // disable this option

            // Toggle active Class
            $(this).toggleClass("active");

        }

        // Be sure it is orginalEvent
        if (e.originalEvent) {

            // disable functions
            if($(this).hasClass("yp-disable-btn")){

                // getting applied style size
                var dynamicSize = get_applied_style_data(null, id, [false, false, true, false]);

                // if valid
                if(typeof dynamicSize === 'object'){

                    // Getting
                    dynamicSize.always(function(data){

                        if(data == 'all'){
                            data = 'desktop';
                        }

                        // remove reset enable class
                        elementPP.removeClass("reset-enable");
                        
                        // Insert disable value
                        insert_rule(null, id, 'disable', prefix, data);

                        // refresh option
                        set_default_value(id);

                    });

                }

            }else{

                if(value == ""){

                    if (elementPP.hasClass("yp-slider-option") == false) {

                        insert_rule(null, id, 'disable', "");

                        set_default_value(id);

                         // wait for set_default_value
                        setTimeout(function(){

                            value = $("#yp-" + id).val();
                            prefix = $("#" + id + "-after").val();

                            if (elementPP.find(".yp-radio-content").length > 0) {
                                value = $("input[name=" + id + "]:checked").val();
                            }

                            insert_rule(null, id, value, prefix);

                        }, 30);

                    }

                }else{

                    // delete old
                    setStyles(removeStyle(getStyles(null, false), "[selector=" + get_id(get_current_selector()) + "][rule=" + id + "][msize=" + generate_media_condition(null, id, value) + "]"));

                    // delete old webkit
                    setStyles(removeStyle(getStyles(null, false), "[selector=" + get_id(get_current_selector()) + "][rule=" + get_webkit_property(id) + "][msize=" + generate_media_condition(null, id, value) + "]"));

                    // Wait for check well
                    setTimeout(function(){

                        // Get computed default style
                        if(get_css_id(id)[1] == null){

                            var defaultValue = get_selected_element().css(id);

                            // If same, dont append
                            if(defaultValue == value || defaultValue == value + prefix){
                                //1
                            }else if(number_filter(defaultValue) == 0 && value == 0){
                                //2
                            }else if(defaultValue == "rgba(0, 0, 0, 0)" && value == "transparent"){
                                //3
                            }else if(defaultValue == "rgba(0,0,0,0)" && value == "transparent"){
                                //4
                            }else{

                                // Use px as default
                                if(buttonText == 0 && prefix == ''){
                                    prefix = "px";
                                }

                                insert_rule(null, id, value, prefix);

                            }

                        }else{

                            insert_rule(null, id, value, prefix);

                        }

                        // Has editor style?
                        var selector = get_current_selector();

                        // check reset icon
                        if (id == 'animation-name' || id == 'animation-duration' || id == 'animation-delay'){

                            // Default
                            var ypEvent = '';

                            // get data
                            var styles = getStyles(null, true);

                            // onscreen event
                            if (findStyle(styles ,"selector=" + get_id(selector + ".yp_onscreen") + "][msize=" + generate_media_condition(null, id, value) + "]").length > 0) {
                                ypEvent = 'yp_onscreen';
                            }

                            // click event
                            if (findStyle(styles ,"selector=" + get_id(selector + ".yp_click") + "][msize=" + generate_media_condition(null, id, value) + "]").length > 0) {
                                ypEvent = 'yp_click';
                            }

                            // hover event
                            if (findStyle(styles ,"selector=" + get_id(selector + ".yp_hover") + "][msize=" + generate_media_condition(null, id, value) + "]").length > 0) {
                                ypEvent = 'yp_hover';
                            }

                                // Focus event
                            if (findStyle(styles ,"[selector=" + get_id(selector + ".yp_focus") + "][msize=" + generate_media_condition(null, id, value) + "]").length > 0) {
                                ypEvent = 'yp_focus';
                            }

                            // hover event default
                            if (mainBody.hasClass("yp-selector-hover") && ypEvent == '') {
                                ypEvent = 'yp_hover';
                            }

                            // Focus event default
                            if (mainBody.hasClass("yp-selector-focus") && ypEvent == '') {
                                ypEvent = 'yp_focus';
                            }

                            // default is onscreen
                            if (isUndefined(ypEvent) || ypEvent == '') {
                                ypEvent = 'yp_onscreen';
                            }

                            if(get_applied_style_data(selector+"."+ypEvent, id, [false, true, false, true])){
                                $("#" + id + "-group").addClass("reset-enable");
                            }else{
                                $("#" + id + "-group").removeClass("reset-enable");
                            }
                        }else{
                            if(get_applied_style_data(selector, id, [false, true, false, true])){
                                $("#" + id + "-group").addClass("reset-enable");
                            }else{
                                $("#" + id + "-group").removeClass("reset-enable");
                            }
                        }

                        // make if not slider
                        if (elementPP.hasClass("yp-slider-option") == false) {
                            set_default_value(id);
                        }

                    }, window.YellowDelay);

                }

            }
            
            // Trigger option change
            option_change();

            // Update breakpoints
            if(is_responsive_mod()){

                // This taking time to apply css, so wait.
                setTimeout(function(){
                    update_responsive_breakpoints();
                }, (window.YellowDelay * 10));

            }

        }

        // Update panel
        gui_update();

    });
    
        

    /* ---------------------------------------------------- */
    /* Collapse List                                        */
    /* ---------------------------------------------------- */
    $(".yp-editor-list > li > h3").click(function() {

        // Getting Element
        var element = $(this);
        var elementParent = element.parent();
        var closeBtn = $(".yp-close-btn");
        var list = $(".yp-editor-list > li");
        var lockBtn = $(".lock-btn");

        // Toggle
        lockBtn.removeClass("active");
        list.not(elementParent).hide();
        elementParent.toggleClass("active");
        elementParent.find(".yp-this-content").toggle();

        // Toggle
        if(elementParent.hasClass("active") == false){
            list.show();

            closeBtn.removeClass("dashicons-menu").addClass("dashicons-no-alt");
            closeBtn.tooltip('hide').attr('data-original-title', lang.close_editor).tooltip('fixTitle');

            // clean property size
            $(".property-has-queries").removeClass("property-size-tabs-visible");
            body.removeClass("property-query-active");

            // Remove data-laoded from animation, so play animation everytime when open animation section
            if(elementParent.hasClass("animation-option")){

                // Remove 
                iframe.find(".yp_onscreen,.yp_hover,.yp_click,.yp_focus").removeClass("yp_onscreen yp_hover yp_click yp_focus");

                // Delete data-loaded
                elementParent.removeAttr("data-loaded");

            }

        }else{

            closeBtn.removeClass("dashicons-no-alt").addClass("dashicons-menu");
            closeBtn.tooltip('hide').attr('data-original-title', lang.back_to_menu).tooltip('fixTitle');

        }

        // Scroll Top
        $('.yp-editor-panel').scrollTop(0);

        // Hide Popovers
        $(".yp-option-group,.yp-advanced-option").popover("hide");

        // Update GUI
        gui_update();

    });


    /* ---------------------------------------------------- */
    /* Filters                                              */
    /* ---------------------------------------------------- */
    function number_filter(a) {
        if (typeof a !== "undefined" && a != '') {
            if (a.replace(/[^\d.-]/g, '') === null || a.replace(/[^\d.-]/g, '') === undefined) {
                return 0;
            } else {
                return a.replace(/[^\d.-]/g, '');
            }
        } else {
            return 0;
        }
    }

    function alfa_filter(a) {
        if (typeof a !== "undefined" && a != '') {
            return a.replace(/\d/g, '').replace(".px", "px");
        } else {
            return '';
        }
    }

    var get_basic_id = function(str) {
        if (typeof str !== "undefined" && str != '') {
            str = str.replace(/\W+/g, "");
            return str;
        } else {
            return '';
        }
    };

    function get_id(str) {
        if (typeof str !== "undefined" && str != '') {

            // \^\#\+\$\(\)\[\]\=\*\-\:\.\>\,\~\@\/\! work in process. 
            str = str.replace(/\:/g, "yp-sym-p")
            .replace(/\^/g, "yp-sym-a")
            .replace(/\#/g, "yp-sym-c")
            .replace(/\+/g, "yp-sym-o")
            .replace(/\$/g, "yp-sym-q")
            .replace(/\(/g, "yp-sym-e")
            .replace(/\)/g, "yp-sym-s")
            .replace(/\[/g, "yp-sym-g")
            .replace(/\]/g, "yp-sym-x")
            .replace(/\=/g, "yp-sym-k")
            .replace(/\*/g, "yp-sym-n")
            .replace(/\-/g, "yp-sym-t")
            .replace(/\./g, "yp-sym-u")
            .replace(/\>/g, "yp-sym-l")
            .replace(/\,/g, "yp-sym-b")
            .replace(/\~/g, "yp-sym-m")
            .replace(/\@/g, "yp-sym-i")
            .replace(/\//g, "yp-sym-y")
            .replace(/\!/g, "yp-sym-v")
            .replace(/[^a-zA-Z0-9_\^\#\+\$\(\)\[\]\=\*\-\:\.\>\,\~\@\/\!]/g, "");
            return str;
        } else {
            return '';
        }
    }

    function array_cleaner(actual) {

        var uniqueArray = actual.filter(function(item, pos) {
            return actual.indexOf(item) == pos;
        });

        return uniqueArray.filter(Boolean);

    }

    function uppercase_first_letter(str){
        return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
    }

    function letter_repeat(str) {
        var reg = /^([a-z])\1+$/;
        var d = reg.test(str);
        return d;
    }

    function title_case(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }


    /* ---------------------------------------------------- */
    /* Getting selected element name by selector            */
    /* ---------------------------------------------------- */
    function get_tag_information2(selector){

        // Clean Selector
        selector = get_foundable_query(selector, true, true, true, true);

        // lowecase selector
        selector = selector.toLowerCase();

        // Last part only
        if(selector.indexOf(" ") != -1){
            selector = selector.split(" ")[selector.split(" ").length-1];
        }

        // Replacing selector
        selector = selector

        // Prefixes                
        .replace(/(\>|\*|\+|\:|\~|\[(.*?)\])/g, "")
        .replace(/(\.|\#)/g,"").replace(/(\-|\_)/g," ")
        .replace(/:nth-child\(\d+\)/g, '')

        // Tag replaces
        .replace(/\bli\b/g,"list item")
        .replace(/(\bul\b|\bol\b)/g,"list")
        .replace(/\ba\b/g,"link")
        .replace(/\bp\b/g,"paragraph")
        .replace(/(\bh1\b|\bh2\b|\bh3\b|\bh4\b|\bh5\b|\bh6\b)/g,"heading")
        .replace(/\bbr\b/g, "line break")
        .replace(/\bhr\b/g, "horizontal rule")
        .replace(/\bb\b/g, "bold tag")
        .replace(/\b(em|i)\b/g, "italic tag")
        .replace(/\bpre\b/g, "preformatted")
        .replace(/\btable\b/g, "table")
        .replace(/\btr\b/g, "table row")
        .replace(/\btd\b/g, "table data")
        .replace(/\bbutton\b/g, "button")
        .replace(/\bcenter\b/g, "centred block")
        .replace(/\bdl\b/g, "definition list")
        .replace(/\bdt\b/g, "definition term")
        .replace(/\bdd\b/g, "definition description")
        .replace(/\btextarea\b/g, "text area")
        .replace(/\btbody\b/g, "body of table")
        .replace(/\bthead\b/g, "head of table")
        .replace(/\btfoot\b/g, "foot of table")
        .replace(/\bu\b/g, "underline text tag")
        .replace(/\bq\b/g, "quotation tag")
        .replace(/\bcite\b/g, "citation")
        .replace(/\btime\b/g, "time tag")
        .replace(/\bcaption\b/g, "caption of table")
        .replace(/\binput\b/g, "input")
        .replace(/\bspan\b/g, "span tag")
        .replace(/\bstrong\b/g, "strong tag")
        .replace(/\bsmall\b/g, "small tag")
        .replace(/\bdiv\b/g, "division")
        .replace(/\bimg\b/g, "image")
        .replace(/\bnav\b/g, "navigation");

        // Undefined
        if(selector.length == 0){
            selector = "Unknown Element";
        }

        // Simple, Ready
        return space_cleaner(uppercase_first_letter(selector));

    }



    /* ---------------------------------------------------- */
    /* Getting selected element name                        */
    /* ---------------------------------------------------- */
    function get_tag_information(selectors, tooltip, element){

        // PreDefined Comment
        var definedComment = get_selector_comment(selectors);

        // Foundable selector
        selectors = get_foundable_query(selectors, true, true, true);

        // if the target element not avaiable or query not valid
        if(check_selector(selectors,false,false,false) == false && definedComment == false){
            return false;
        }

        // Parse multiple selectors
        var selectorsArray = selectors.split(",");

        // If is one selector
        if(selectorsArray.length == 1){

            var information;

            // PreDefined tag
            if(definedComment != false){

                // defined info
                information = definedComment;

                // If not valid
                if(information == "false" || information == false){

                    // get new info
                    information = get_single_tag_information(selectors, element);

                }

            }else{

                // get new info
                information = get_single_tag_information(selectors, element);

            }

            // IF tooltip
            if(tooltip == true){

                var elementLength = iframe.find(selectors).length;

                information = information.replace(/ \((onscreen|hover|click|focus|link|visited|active|checked|disabled|enabled|invalid|valid)\)(\s+)?$/gi, "");

                // Makes it plural.
                if(elementLength > 1){

                    // Will selected
                    if(ypOption.high_performance == true && is_content_selected() == false){
                        return information;
                    }else{
                        // High performance and preDefined tag not have plural add
                        if(ypOption.high_performance || definedComment != false){
                            return information + " ("+elementLength+")";
                        }else{
                            return information.plural() + " ("+elementLength+")";
                        }

                    }

                }else{
                    return information;
                }

            // Other apps
            }else{
                return information;
            }

        }



        // Group name
        if(definedComment != false){

            // defined info
            name = definedComment;

            // If not valid
            if(name != false){

                return name;

            }
        
        }


        // Multi Selectors
        var allTagNames = [];
        var name = '';

        // Get all tag names by selectors
        for(var i = 0; i < selectorsArray.length; i++){

            // PreDefined tag
            definedComment = get_selector_comment(selectorsArray[i]);

            // PreDefined tag
            if(definedComment != false){

                // defined info
                name = definedComment;

                // If not valid
                if(name == "false" || name == false){

                    // Get tag name
                    name = get_single_tag_information(selectorsArray[i], element);

                }

            }else{

                // Get tag name
                name = get_single_tag_information(selectorsArray[i], element);

            }

            // Push if the name not in name-list
            if(allTagNames.indexOf(name) == -1){
                allTagNames.push(name);
            }

        }

        // Multiple result
        return allTagNames.toString().replace(/\,/g,", ");

    }


    /* ---------------------------------------------------- */
    /* Need it while processing stylesheet selectors        */
    /* ---------------------------------------------------- */
    function get_foundable_query(selector,basic,css,body,animation){

        if(basic === true){

            // Hover Focus active visited link
            selector = selector.replace(/\:(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g, "");

        }

        if(css === true){

            // After
            selector = selector.replace(/:(:)?(after|before|first-letter|first-line|selection)/g,'');

        }

        if(body === true){

            // body, state and other classes on body
            selector = selector.replace(/body\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)\./g,'body.');

            // only body and state
            selector = selector.replace(/body\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)$/g,'body');

            // yp selector hover basic
            selector = selector.replace(/(body)?\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g,'');

        }

        if(animation === true){

            // YP Animations
            selector = selector.replace(/\.(yp_onscreen|yp_focus|yp_hover|yp_click)/g,'');

        }

        return selector.trim();

    }


    /* ---------------------------------------------------- */
    /* Cleans multiple spaces                               */
    /* ---------------------------------------------------- */
    function space_cleaner(data){
        return $.trim(data.replace(/\s\s+/g,' '));
    }


    /* ---------------------------------------------------- */
    /* Get user defined comments                            */
    /* ---------------------------------------------------- */
    function get_selector_comment(selector){
        
        // Converts native selector to get comment
        selector = get_native_selector(selector);

        // Getting comment
        var comment = window.selectorComments[get_id(selector)];
            
        // Variables
        var plusHeading = "";

        // Get basic if advanced is not available
        if(isUndefined(comment)){

            // selector heading
            if(selector.indexOf(".yp_onscreen") != -1){
                plusHeading = " (onscreen)";
            }else if(selector.indexOf(".yp_hover") != -1){
                plusHeading = " (hover)";
            }else if(selector.indexOf(".yp_click") != -1){
                plusHeading = " (click)";
            }else if(selector.indexOf(".yp_focus") != -1){
                plusHeading = " (focus)";
            }

            // decs on heading
            if(selector.indexOf(".yp-selector-") != -1){
                plusHeading = " (" + selector.match(/\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g)[0].replace(/\.yp-selector-/,"").trim() + ")";
            }

            // Basic Selector
            comment = window.selectorComments[get_id(get_foundable_query(selector, true, true, true, true))];

        }

        // False if no data
        if(isUndefined(comment)){
            return false;
        }

        // Return the comment
        return comment + plusHeading;

    }


    /* ---------------------------------------------------- */
    /* Update comments on default insert                    */
    /* ---------------------------------------------------- */
    function update_comment(selector, comment){

        // Get current as default
        if(comment == null || comment == undefined){

            // Getting tag information
            comment = get_comment(selector, false);

        }

        // Get selector id
        var id = get_id(get_native_selector(selector)); 

        // Check already have any comment or no
        if(window.selectorComments[id] == null || window.selectorComments[id] == undefined){
            window.newComments.push(id);
        }

        // Update comments
        window.selectorComments[id] = valid_comment_filter(comment);

    }


    /* ---------------------------------------------------- */
    /* Direct update from live css                          */
    /* ---------------------------------------------------- */
    function update_comment_live(data){

        // Stop if have any conflict in CSS
        if (data.split('{').length != data.split('}').length) {
            return false;
        }

        // Fixing an problem on live css with yp-selector-xxx.
        data = data.replace(/\*\/(body)?\.yp-selector-(.*?)\n/gi, "*/\n$1.yp-selector-$2");

        // Get all comment selectors
        var selectors = data.match(/\/\*(.*?)\*\/\n(.*?){/gi);

        // No valid data
        if(selectors == null){
            return false;
        }

        // Each selectors
        var thisData, thisSelector, thisComment;
        for(var i = 0; i < selectors.length; i++){

            // Get this selector
            thisData = selectors[i];

            // Getting
            thisComment = thisData.split("*/")[0].replace(/\/\*/g, "").replace(/(\r\n|\n|\r|\t)/g, "").trim();
            thisSelector = thisData.split("*/")[1].replace(/(\r\n|\n|\r|\t)/g, "").replace(/(\{|\})/g, '').trim();

            // Test @media
            if(/\@media/g.test(thisSelector) == true){
                continue;
            }

            // No Data
            if(thisSelector == null || thisSelector == undefined || thisComment == null || thisComment == undefined){
                continue;
            }

            // Update
            update_comment(thisSelector, thisComment);

        }

        // Tooltip comment update
        update_tooltip_comment();

    }


    /* ---------------------------------------------------- */
    /* Cleaning comments                                    */
    /* ---------------------------------------------------- */
    function valid_comment_filter(data){

        if(data == null || data == undefined || data == ""){
            return data;
        }

        data = data.replace(/(\r\n|\n|\r)/g, "").replace(/(\/\*|\*\/)/g, "").replace(/[^a-zA-Z0-9\_\-\?\s\=\/\.\,\@\&\+\!\(\)]/g, "").trim();

        if(data.length == 0){
            return "";
        }

        // 70 max
        data = data.match(/.{1,70}/i)[0];

        return data;

    }


    /* ---------------------------------------------------- */
    /* Change comment by tooltip CLICK                      */
    /* ---------------------------------------------------- */
    iframe.on("click", ".yp-tooltip-small", function(){
        
        // Element
        var el = $(this);

        // Only span
        if(el.prop("tagName") != "INPUT"){

            // Get comment
            var comment = el.text();

            // Add input
            el.after('<input type="text" class="yp-tooltip-small" value="" maxlength="70" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />');

            // Delete span el
            el.remove();

            // Focus
            iframe.find("input.yp-tooltip-small").val(comment).focus();

            // Auto size
            iframe.find("input.yp-tooltip-small").autoGrowInput();

        }

        return false;

    });


    /* ---------------------------------------------------- */
    /* Change comment by tooltip FOCUS                      */
    /* ---------------------------------------------------- */
    iframe.on("focus", "input.yp-tooltip-small", function(){

        // Val
        var val = $(this).val();

        // Get lenth
        var elementLength = val.match(/ \(\d+\)$/);

        // Empty
        if(elementLength == null){
            elementLength = "";
        }

        // Update attr
        $(this).attr("data-len", elementLength);
        
        // Delete num
        $(this).val(val.replace(/ \(\d+\)$/g, "").trim());

    });


    /* ---------------------------------------------------- */
    /* Change comment by tooltip KEYDOWN                    */
    /* ---------------------------------------------------- */
    iframe.on("keydown", "input.yp-tooltip-small", function(e){

        var code = e.keyCode || e.which;

        // Enter
        if(code == 13){
            $(this).trigger("blur");
        }

        // ESC
        if(code == 27){
            $(this).val("").trigger("blur");
        }

    });


    /* ---------------------------------------------------- */
    /* Change comment by tooltip BLUR                       */
    /* ---------------------------------------------------- */
    iframe.on("blur", "input.yp-tooltip-small", function(){

        // EL
        var el = $(this);

        var val = el.val(), wasEmpty = false, newVal;

        // Get selector
        var selector = get_current_selector(true);

        // Empty
        if(valid_comment_filter(val) == ""){
            wasEmpty = true;
            val = get_comment(selector, true);
        }

        // Value with element length
        if(wasEmpty){
            newVal = val;
        }else{
            newVal = valid_comment_filter(val) + " " + el.attr("data-len");
        }

        // Chrome bug fixes delay
        setTimeout(function(){

            // update tooltip
            el.after("<small class='yp-tooltip-small'>"+newVal+"</small>");
            el.remove();

            // Update comment
            update_comment(selector, val);

            // editor update live
            setTimeout(function(){
                editor_update(false);
            }, 500);

            // This changed.
            option_change();

        }, 2);

    });

    
    /* ---------------------------------------------------- */
    /* autoGrowInput begin when mouse enter to group        */
    /* ---------------------------------------------------- */
    $(document).on("mouseenter", ".selector-group", function(){

        // Auto width
        $(this).find(".selector-comment-input").autoGrowInput();

    });


    /* ---------------------------------------------------- */
    /* Changing Comment of Selector - Enter                 */
    /* ---------------------------------------------------- */
    $(document).on("keyup keydown", ".selector-comment-input", function(e){

        // Code
        var code = e.keyCode || e.which;

        // Blur
        if(code == 13){
            $(this).trigger("blur");
        }

        // ESC
        if(code == 27){
            $(this).val("").trigger("blur");
            return false;
        }

    });

        
    /* ---------------------------------------------------- */
    /* Change comment of selector - Focus                   */
    /* ---------------------------------------------------- */
    $(document).on("focus", ".selector-comment-input", function(){

        // Val
        var val = $(this).val();

        // Get lenth
        var elementLength = val.match(/ \(\d+\)$/);

        // Empty
        if(elementLength == null){
            elementLength = "";
        }

        // Update attr
        $(this).attr("data-len", elementLength);
        
        // Delete num
        $(this).val(val.replace(/ \(\d+\)$/g, "").trim());

    });


    /* ---------------------------------------------------- */
    /* Change selector comment - Blur                       */
    /* ---------------------------------------------------- */
    $(document).on("blur", ".selector-comment-input", function(){

        // Main
        var main = $(this).parents(".selector-group"), wasEmpty = false, newVal;

        // Getting details
        var comment = $(this).val();
        var selector = main.attr("data-view-selector");

        // Empty
        if(valid_comment_filter(comment) == ""){
            wasEmpty = true;
            comment = get_comment(selector, true);
        }

        // Updating Comment
        update_comment(selector, comment);

        // Value with element length
        if(wasEmpty){
            newVal = comment;
        }else{
            newVal = valid_comment_filter(comment) + " " + $(this).attr("data-len");
        }

        // IF this is active, update tooltip heading
        if(main.hasClass("active")){
            update_tooltip_comment();
        }

        // Add element len
        $(this).val(newVal);

        // Update
        editor_update(false);

        // (10) update
        setTimeout(function(){
            main.find(".selector-comment-input").autoGrowInput();
        }, 4);

        // This changed.
        option_change();

    });


    /* ---------------------------------------------------- */
    /* Update toolip comment                                */
    /* ---------------------------------------------------- */
    function update_tooltip_comment(){

        // Get current tooltip value
        var tooltipSelector = $("<div />").append(paintCanvas.general.find('.yp-selected-tooltip').clone());
        tooltipSelector.find("small").remove();
        tooltipSelector = tooltipSelector.text().trim();

        // tooltip update
        paintCanvas.general.find(".yp-selected-tooltip").html("<small class='yp-tooltip-small'>" + get_tag_information(tooltipSelector, true, null) + "</small> " + tooltipSelector);

    }


    /* ---------------------------------------------------- */
    /* Getting selector comment function                    */
    /* ---------------------------------------------------- */
    function get_comment(selector, tooltip){

        // convert to native selector
        selector = get_native_selector(selector);

        var heading, plusHeading = "";

        // Get heading from element 
        heading = get_tag_information(selector, tooltip, null);
                    
        // get heading from selector if element not avaiable.
        if(isUndefined(heading)){
            heading = get_tag_information2(selector);
        }

        // Defined Comment
        var definedComment = get_selector_comment(selector);
        if(definedComment != false){definedComment = definedComment.toLowerCase();}

        // If not defined tag
        if(heading.toLowerCase() != definedComment){

            // selector heading
            if(selector.indexOf(".yp_onscreen") != -1){
                plusHeading = " (onscreen)";
            }else if(selector.indexOf(".yp_hover") != -1){
                plusHeading = " (hover)";
            }else if(selector.indexOf(".yp_click") != -1){
                plusHeading = " (click)";
            }else if(selector.indexOf(".yp_focus") != -1){
                plusHeading = " (focus)";
            }

            // decs on heading
            if(selector.indexOf(".yp-selector-") != -1){
                plusHeading = " (" + selector.match(/\.yp-selector-(hover|focus|link|visited|active|checked|disabled|enabled|invalid|valid)/g)[0].replace(/\.yp-selector-/,"").trim() + ")";
            }

        }

        // Return Comment
        return (heading + plusHeading).trim();

    }


    /* ---------------------------------------------------- */
    /* Simple Defined Element Names                         */
    /* ---------------------------------------------------- */
    function get_single_tag_information(selector, element){

        // Variables
        var elementLength, tagName, lastSelector, OriginalClass = '', smarterSelector = false, id = '', data;

        // Getting selector
        selector = get_foundable_query(selector,true,true,true,true);

        // Cache element
        if(element == null){

            // First find the active element
            element = iframe.find(selector).filter(".yp-selected");

            // Find any if not have yp-selected
            if(element.length <= 0){
                element = iframe.find(selector);
            }

        }

        // Simple
        if(selector == "*"){
            return "All Elements";
        }else if(selector == ":root"){
            return "Root";
        }

        // Element length
        elementLength = get_selector_array(selector).length - 1;

        // Tag name
        tagName = element.prop("tagName");

        // Last class|id|tag in selector
        lastSelector = get_selector_array(selector)[elementLength].trim();

        // be sure we only getting the value
        if(lastSelector.indexOf(".") != -1){lastSelector = "." + lastSelector.split(".")[1];}
        if(lastSelector.indexOf("#") != -1){lastSelector = "#" + lastSelector.split("#")[1];}
        if(lastSelector.indexOf(":") != -1){lastSelector = lastSelector.split(":")[0];} // Delete :nth-child etc.

        // Trying to getting ID
        if (element.hasAttr("id")) {
            id = element.attr("id");
        }

        // Trying to getting Class Array
        if (element.hasAttr("class")){

            // Set
            OriginalClass = element.attr("class").toUpperCase();

        }


        // Update Data For Check Defined Classes
        // ##
        if(OriginalClass != ''){
            data = $.trim((OriginalClass + " " + id).replace(/[^a-zA-Z0-9\s]/g, ""));
        }else{
            data = $.trim(lastSelector.replace(/[^a-zA-Z0-9\s]/g, ""));
        }


        // DEFINED CLASSES
        // ##
        if(tagName == "BODY"){
            return "Body";
        }else if (/(^|\s)WIDGET($|\s)/.test(data)) {
            return "Widget";
        }else if (/(^|\s)(MENU|MAIN-MENU|NAVIGATION|NAV)($|\s)/.test(data)) {
            return "Menu";
        } else if (/(^|\s)(FA|FA-(.*?))($|\s)/.test(OriginalClass)) {
            return "Font Icon";
        } else if (/(^|\s)SUBMIT($|\s)/.test(data) && tagName == 'INPUT') {
            return "Submit Button";
        } else if (/(^|\s)MENUITEM($|\s)/.test(data)) {
            return "Menu Item";
        } else if (/(^|\s)(ENTRYMETA|ENTRYMETABOX|POSTMETABOX)($|\s)/.test(data)) {
            return "Post Meta Division";
        } else if (/(^|\s)COMMENTREPLYTITLE($|\s)/.test(data)) {
            return "Comment Reply Title";
        } else if (/(^|\s)LOGGEDINAS($|\s)/.test(data)) {
            return "Login Info";
        } else if (/(^|\s)FORMALLOWEDTAGS($|\s)/.test(data)) {
            return "Allowed Tags Section";
        } else if (/(^|\s)LOGO($|\s)/.test(data)) {
            return "Logo";
        } else if (/(^|\s)(ENTRYTITLE|POSTTITLE)($|\s)/.test(data)) {
            return "Post Title";
        } else if (/(^|\s)COMMENTFORM($|\s)/.test(data)) {
            return "Comment Form";
        } else if (/(^|\s)WIDGETTITLE($|\s)/.test(data)) {
            return "Widget Title";
        } else if (/(^|\s)TAGCLOUD($|\s)/.test(data)) {
            return "Tag Cloud";
        } else if (/(^|\s)ROW($|\s)/.test(data)) {
            return "Row";
        } else if (/(^|\s)(BUTTON|BTN)($|\s)/.test(data)) {
            return "Button";
        } else if (/(^|\s)LEAD($|\s)/.test(data)) {
            return "Lead";
        } else if (/(^|\s)WELL($|\s)/.test(data)) {
            return "Well";
        } else if (/(^|\s)ACCORDIONTOGGLE($|\s)/.test(data)) {
            return "Accordion Toggle";
        } else if (/(^|\s)PANELBODY($|\s)/.test(data)) {
            return "Accordion Content";
        } else if (/(^|\s)ALERT($|\s)/.test(data)) {
            return "Alert Division";
        } else if (/(^|\s)MORELINK($|\s)/.test(data)) {
            return "Show More Link";
        } else if (/(^|\s)(MENULINK|MENUICON|MENUBTN|MENUBUTTON)($|\s)/.test(data)) {
            return "Menu Link";
        } else if (/(^|\s)SUBMENU($|\s)/.test(data)) {
            return "Sub Menu";
        } else if (/(^|\s)(POSTBODY|POST)($|\s)/.test(data)) {
            return "Post Division";
        } else if (/(^|\s)(CONTENT|DEFAULTCONTENT)($|\s)/.test(data)) {
            return "Content Division";
        } else if (/(^|\s)ENTRYCONTENT($|\s)/.test(data)) {
            return "Entry Content";
        } else if (/(^|\s)ENTRYFOOTER($|\s)/.test(data)) {
            return "Entry Footer";
        } else if (/(^|\s)ENTRYHEADER($|\s)/.test(data)) {
            return "Entry Header";
        } else if (/(^|\s)ENTRYTIME($|\s)/.test(data)) {
            return "Entry Time";
        } else if (/(^|\s)POSTEDITLINK($|\s)/.test(data)) {
            return "Post Edit Link";
        } else if (/(^|\s)POSTTHUMBNAIL($|\s)/.test(data)) {
            return "Post Thumbnail";
        } else if (/(^|\s)THUMBNAIL($|\s)/.test(data)) {
            return "Thumbnail";
        } else if (/([a-zA-Z0-9_-]+)?ATTACHMENT([a-zA-Z0-9_-]+)?/.test(OriginalClass)) {
            return "Thumbnail Image";
        } else if (/(^|\s)EDITLINK($|\s)/.test(data)) {
            return "Edit Link";
        } else if (/(^|\s)COMMENTSLINK($|\s)/.test(data)) {
            return "Comments Link Division";
        } else if (/(^|\s)SITEDESCRIPTION($|\s)/.test(data)) {
            return "Site Description";
        }



        // Reading Grid Class Names
        // ##
        if(isDefined(OriginalClass)){

            var gridResult = OriginalClass.match(/([a-zA-Z0-9_-]+)?(span|small|medium|large|col|column|[_-]l|[_-]m|[_-]s|col-xs|col-md|col-lg|-col-sm)([_-])?[0-9]+/i);

            // If Avaiable
            if(isDefined(gridResult)){

                // Getting number only
                var gridNumber = parseInt(gridResult[0].replace(/\D/g, ""));

                // Based on 12
                if(gridNumber > 0 && gridNumber < 13){
                    return "Column" + " " + gridNumber + "/12";
                }

            }

        }


        // Getting Smarter Results
        if(ypOption.high_performance == false){
            smarterSelector = get_name_by_classes(lastSelector, false);
        }

        // Selected By Smart Class|Id.
        if(smarterSelector !== false && /(#|\.)/g.test(lastSelector) == true){

            // Smarter Class
            return smarterSelector;


        // Selected By Tag.
        }else if(["h1","h2","h3","h4","h5","h6","p","img","a","li","ul","header","footer","article","code","form","label","ol","blockquote","nav"].indexOf(lastSelector) != -1 && /(#|\.)/g.test(lastSelector) == false){

            // Names for liked tags
            if(lastSelector == 'h1' || lastSelector == 'h2' || lastSelector == 'h3' || lastSelector == 'h4' || lastSelector == 'h5' || lastSelector == 'h6'){
                return "Heading";
            }else if(lastSelector == 'p'){
                return "Paragraph";
            }else if(lastSelector == 'img'){
                return "Image";
            }else if(lastSelector == 'a'){
                return "Link";
            }else if(lastSelector == 'li'){
                return "List Item";
            }else if(lastSelector == 'ul'){
                return "List";
            }else if(lastSelector == 'header'){
                return "Header";
            }else if(lastSelector == 'footer'){
                return "Footer";
            }else if(lastSelector == 'article'){
                return "Article";
            }else if(lastSelector == 'code'){
                return "Code Tag";
            }else if(lastSelector == 'form'){
                return "Form Division";
            }else if(lastSelector == 'label'){
                return "Label";
            }else if(lastSelector == 'ol'){
                return "List";
            }else if(lastSelector == 'blockquote'){
                return "Block Quote";
            }else if(lastSelector == 'nav'){
                return "Navigation";
            }

        }


        // Unprefered Defined Names
        if (/(^|\s)(CONTAINER|WRAPPER)($|\s)/.test(data)) {
            return "Wrapper";
        }


        // Using Any Tag like An Name
        // ##
        if (tagName == 'BR') {
            return "Line Break";
        } else if (tagName == 'HR') {
            return "Horizontal Rule";
        } else if (tagName == 'PRE') {
            return "Preformatted";
        } else if (tagName == 'TABLE') {
            return "Table";
        } else if (tagName == 'TR') {
            return "Table Row";
        } else if (tagName == 'TD') {
            return "Table Data";
        } else if (tagName == 'BUTTON') {
            return "Button";
        } else if (tagName == 'CENTER') {
            return "Centred block";
        } else if (tagName == 'DL') {
            return "Definition list";
        } else if (tagName == 'DT') {
            return "Definition term";
        } else if (tagName == 'DD') {
            return "Definition description";
        } else if (tagName == 'TEXTAREA') {
            return "Text Area";
        } else if (tagName == 'TBODY') {
            return "Body Of Table";
        } else if (tagName == 'THEAD') {
            return "Head Of Table";
        } else if (tagName == 'TFOOT') {
            return "Foot Of Table";
        } else if (tagName == 'U') {
            return "Underline text tag";
        } else if (tagName == 'Q') {
            return "Quotation";
        } else if (tagName == 'CITE') {
            return "Citation Tag";
        } else if (tagName == 'TIME') {
            return "Time Tag";
        } else if (tagName == 'CAPTION') {
            return "Caption Of table";
        } else if (tagName == 'INPUT') {
            return "Input";
        }else if(tagName == 'SPAN'){
            return "Span Tag";
        }else if(tagName == 'B'){
            return "Bold Tag";
        }else if(tagName == 'EM' || tagName == 'I'){
            return "Italic Tag";
        }else if(tagName == 'STRONG'){
            return "Strong Tag";
        }else if(tagName == 'SMALL'){
            return "Small Tag";
        }else if(tagName == 'DIV'){
            return "Division";
        }


        // Names for liked tags
        // Same copy avaiable to above for lastSelector.
        if(tagName == 'H1' || tagName == 'H2' || tagName == 'H3' || tagName == 'H4' || tagName == 'H5' || tagName == 'H6'){
            tagName = "Heading";
        }else if(tagName == 'P'){
            tagName = "Paragraph";
        }else if(tagName == 'IMG'){
            tagName = "Image";
        }else if(tagName == 'A'){
            tagName = "Link";
        }else if(tagName == 'LI'){
            tagName = "List Item";
        }else if(tagName == 'UL'){
            tagName = "List";
        }else if(tagName == 'HEADER'){
            tagName = "Header";
        }else if(tagName == 'FOOTER'){
            tagName = "Footer";
        }else if(tagName == 'ARTICLE'){
            tagName = "Article";
        }else if(tagName == 'CODE'){
            tagName = "Code Tag";
        }else if(tagName == 'FORM'){
            tagName = "Form Division";
        }else if(tagName == 'LABEL'){
            tagName = "Label";
        }else if(tagName == 'OL'){
            tagName = "List";
        }else if(tagName == 'BLOCKQUOTE'){
            tagName = "Block Quote";
        }else if(tagName == 'NAV'){
            tagName = "Navigation";
        }

        if (typeof tagName == typeof undefined || tagName === false) {
            return "Unknown Element";
        }

        // Return Tag Name
        return title_case(tagName.toLowerCase());

    }

    

    /* ---------------------------------------------------- */
    /* Reading nice class names                             */
    /* ---------------------------------------------------- */
    function get_name_by_classes(className, nummericFilter) {

        if (typeof className == typeof undefined || className === false) {
            return false;
        }

        // Clean up class and id
        className = className.replace(/(#|\.)/g, "");

        // Dedect prefix than remove || no number
        var r = /^[a-z]{3}[-_]|^[a-z]{2}[-_]/g;
        var prefix = '';
        var noPrefix = className.replace(r, '');
        if(r.test(className) && /\d+/g.test(className) == false){

            prefix = className.match(r)[0].replace(/[-_]/g, "");
            if(/(sm|md|lg|xs)/g.test(prefix) == false && noPrefix.length > 3){
                className = noPrefix;
            }

        }

        // RegExp
        var upperCase = new RegExp('[A-Z]');
        var numbers = new RegExp('[0-9]');
        var bottomRex = /_/;
        var topRex = /-/;

        // Only - or _
        if (bottomRex.test(className) && topRex.test(className)) {
            return false;
        }

        // max 3 - or _
        if (topRex.test(className)) {
            if (className.match(/(-|_)/g).length >= 3) {
                return false;
            }
        }

        // Clean
        className = className.replace(/_/g, ' ').replace(/-/g, ' ');

        // if all lowerCase
        // if minimum 3 and max 20
        if (className.match(upperCase) || className.length < 5 || className.length > 20) {
            return false;
        }

        // if nummeric filter active and if have any number
        if(nummericFilter && className.match(numbers)){
            return false;
        }

        if (letter_repeat(className)) {
            return false;
        }

        return title_case(className.trim());

    }
    

    /* ---------------------------------------------------- */
    /* Show notification for info                           */
    /* ---------------------------------------------------- */
    function show_notification(title, id){

        // Variable
        var template;

        if($("#" + id).length > 0){
            template = $("#" + id);
        }else{
            template = $("<div class='yp-message-box' id='"+id+"'>"+title+"</div>");
            mainBody.append(template);
            template.fadeIn(300);
        }

        // Hide after 6 sec
        setTimeout(function(){
            template.fadeOut(300, function() {
                template.remove();
            });
        }, 5000);

    }


    /* ---------------------------------------------------- */
    /* Hide notification                                    */
    /* ---------------------------------------------------- */
    function hide_notification(id){

        if($("#" + id).length > 0){
            $("#" + id).fadeOut(300, function() {
                $("#" + id).remove();
            });
        }

    }


    /* ---------------------------------------------------- */
    /* Close notification on click                          */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-message-box", function(){

        // Hide and delete
        $(this).fadeOut(300, function() {
            $(this).remove();
        });

    });


    /* ---------------------------------------------------- */
    /* Update save button                                   */
    /* ---------------------------------------------------- */
    function option_change(){

        clearTimeout(window.yp_insert_data_delay);

        // Don't update if CSS is invalid.
        if(mainBody.hasClass("css-code-unvalid")){
            return false;
        }

        mainBody.addClass("yp-history-delay");

        // hide customizing type on change if visible
        $("#customizing-type-list").hide();
        $("#customizing-mode,#customizing-type-list").removeClass("active");
        $(".starter-notice").removeClass("padded-starter-notice");

        $(".yp-save-btn").html(lang.save).removeClass("yp-disabled").addClass("waiting-for-save");

        var editedByView = window.editedByReview;

        var delay = 370;

        window.yp_insert_data_delay = setTimeout(function() {

            var wasType = get_active_type();

            // Update types
            iframe.find(".yp-data-only-updated").each(function(){

                // Getting
                var el = $(this), type;
                type = el.attr("data-source-mode");

                // update history session by insert_type
                update_customize_type(type);

                // get
                var data = get_clean_css(true, type, true);

                // apply
                editor.setValue(data);

                // remove only updated class
                el.removeClass("yp-data-only-updated");

            });


            // restore default type again
            update_customize_type(wasType);

            // Update visual view if active
            if(mainBody.hasClass("visual-css-view-active") && editedByView == false){

                update_visual_view();

                active_view_group();

            }

            // Update state
            states_changes_on_rule_group();

            // Re-Clean
            mainBody.removeClass("yp-history-delay");

            // remove marker
            editor.getSession().removeMarker(window.typeHereMarker);

        }, delay);

        // Update undo/redo icons
        setTimeout(function(){
            check_undoable_history();
        }, (delay + 20));

        // Update breakpoints if responsive mode
        if(is_responsive_mod()){
            update_responsive_breakpoints();
        }

        // Update box model in design information box if visible
        if($(".info-btn.active").length > 0){
            update_box_model();
        }

        // Focus To Type
        if($(".yp-type-menu-link.done").length == 0){
            $(".yp-type-menu-link").addClass("focus").addClass("done");
            setTimeout(function(){
                $(".yp-type-menu-link").removeClass("focus");
            }, 600);
        }

    }

    
    /* ---------------------------------------------------- */
    /* Process all and get a clean CSS                      */
    /* ---------------------------------------------------- */
    function process() {

        // IF not need to process, stop here.
        if (mainBody.hasClass("yp-need-to-process") === false || mainBody.hasClass("yp-processing-now")) {
            return false;
        }

        var editorData = get_clean_css(true, null, false);

        // Remove class.
        mainBody.removeClass("yp-need-to-process");
        mainBody.addClass("yp-processing-now");

        css_to_data('desktop');

        if (editorData.toString().indexOf("@media") != -1) {

            var mediaTotal = editorData.toString().replace(/(\r\n|\n|\r)/g, "").replace(/(\/\*)(.*?)\*\/(\s+)?/g, "").match(/@media(.*?){/g);

            // Search medias and convert to YellowPencil Data
            $.each(mediaTotal, function(index, value) {

                // make .min the media content
                value = get_minimized_css(value,false);

                css_to_data(value);

            });

        }

        // Delete live data
        iframe.find("#yp-live-css-data").remove();

        // Resort media queries and update styles
        setStyles(media_resorting(null, null, null, true));

        // Added from css_to_data function. must remove.
        mainBody.removeClass("yp-processing-now");

        // Animation manager
        if(is_animation_manager()){
            animation_manager();
        }


        // ------ FOR REMOVE UN-USED COMMENTS ------ */
        // Types
        var types = ["single", "template", "global"], t, thisStyle, thisSelector, styles;

        // Delete non-used selector comments
        for(t = 0; t < types.length; t++){

            // Applend all styles to one variable
            styles += getStyles(types[t], false);

        }

        // Each all new comments
        for(i = 0; i < window.newComments.length; i++){

            // This Selector
            thisSelector = window.newComments[i];

            // Skip if this selector is empty
            if(thisSelector == null || thisSelector == undefined){
                continue;
            }

            // Check have data or no
            thisStyle = findStyle(styles, "[selector="+thisSelector+"]");

            // Skip if this style empty
            if(thisStyle == null || thisStyle == undefined){
                continue;
            }

            // Delete empty selectors
            if(thisStyle.length == 0){
                delete window.selectorComments[thisSelector]; 
            }

        }

        // Update tooltip Comment
        update_tooltip_comment();

    }

    
    /* ---------------------------------------------------- */
    /* RGB To hex                                           */
    /* ---------------------------------------------------- */
    function get_color(rgb) {
        if (typeof rgb !== 'undefined') {

            if(rgb.indexOf("rgba") != -1){
                return rgb.replace(/\s+/g,"");
            }

            rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);

            return (rgb && rgb.length === 4) ? "#" + ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';

        } else {
            return '';
        }
    }


    /* ---------------------------------------------------- */
    /* Hex To RGB                                           */
    /* ---------------------------------------------------- */
    function hex_to_rgb(hex){

        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function(m, r, g, b) {
            return r + r + g + g + b + b;
        });

        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        
        if(result){
            return 'rgb('+parseInt(result[1], 16)+','+parseInt(result[2], 16)+','+parseInt(result[3], 16)+')';
        }else{
            return null;
        }
      
    }


    // Long to short sorted for replacement.
    window.plugin_classes_list_sorted = window.plugin_classes_list.split("|").sort(function(a, b){return b.length - a.length;}).join("|");


    /* ---------------------------------------------------- */
    /* Clean all classes which added by the plugin.         */
    /* ---------------------------------------------------- */
    function class_cleaner(data) {

        if (isUndefined(data)) {
            return '';
        }

        return data.replace(new RegExp(window.plugin_classes_list_sorted,"gi"), '');
        
    }


    /* ---------------------------------------------------- */
    /* Clear all animation timers                           */
    /* ---------------------------------------------------- */
    function clear_animation_timer(){

        clearTimeout(window.animationTimer1);
        clearTimeout(window.animationTimer2);
        clearTimeout(window.animationTimer3);
        clearTimeout(window.animationTimer4);
        clearTimeout(window.animationTimer5);

    }


    /* ---------------------------------------------------- */
    /* Stop the element animation.                          */
    /* ---------------------------------------------------- */
    function element_animation_end(){

        iframe.find(get_current_selector()).trigger("animationend");

    }


    /* ---------------------------------------------------- */
    /* Adds class to body on a selector string.             */
    /* ---------------------------------------------------- */
    function add_class_to_body(selector, prefix) {

        var selectorOrginal = selector;

        // Basic
        if (selector == 'body') {
            selector = selector + "." + prefix;
        }

        // If class added, return.
        if (selector.indexOf("body." + prefix) != -1) {
            return selector;
        }

        var firstHTML = '';
        if (get_selector_array(selector).length > 0) {

            var firstSelector = $.trim(get_selector_array(selector)[0]);

            if (firstSelector.toLowerCase() == 'html') {
                firstHTML = firstSelector;
            }

            if (iframe.find(firstSelector).length > 0) {
                if (firstSelector.indexOf("#") != -1) {
                    if (iframe.find(firstSelector).prop("tagName") == 'HTML') {
                        firstHTML = firstSelector;
                    }
                }

                if (firstSelector.indexOf(".") != -1) {
                    if (iframe.find(firstSelector).prop("tagName") == 'HTML') {
                        firstHTML = firstSelector;
                    }
                }
            }

            if (firstHTML != '') {
                selector = get_selector_array(selector)[1];
            }

        }

        // find body tag
        selector = selector.replace(/\bbody\./g, 'body.' + prefix + ".");
        selector = selector.replace(' body ', ' body.' + prefix + " ");

        // If class added, return.
        if (selector.indexOf("body." + prefix) != -1) {
            if (firstHTML != '') {
                selector = firstHTML + " " + selector;
            }

            return selector;
        }

        // Get all body classes.
        if (iframeBody.attr("class") !== undefined && iframeBody.attr("class") !== null) {

            // Find element
            var element = iframe.find(selectorOrginal);

            if(element.length > 0){

                if(element.prop("tagName") == 'BODY'){

                    var bodyClasses = get_classes_array(iframeBody.attr("class"));

                    // Adding to next to classes.
                    for (var i = 0; i < bodyClasses.length; i++) {
                        selector = selector.replace("." + bodyClasses[i] + " ", "." + bodyClasses[i] + "." + prefix + " ");

                        if (get_selector_array(selector).length == 1 && bodyClasses[i] == selector.replace(".", "")) {
                            selector = selector + "." + prefix;
                        }

                    }

                }

            }

        }

        // If class added, return.
        if (selector.indexOf("." + prefix + " ") != -1) {
            if (firstHTML != '') {
                selector = firstHTML + " " + selector;
            }

            return selector;
        }

        // If class added, return.
        if (selector.indexOf("." + prefix) != -1 && get_selector_array(selector).length == 1) {
            if (firstHTML != '') {
                selector = firstHTML + " " + selector;
            }

            return selector;
        }

        // Get body id.
        var bodyID = iframeBody.attr("id");

        selector = selector.replace("#" + bodyID + " ", "#" + bodyID + "." + prefix + " ");

        // If class added, return.
        if (selector.indexOf("." + prefix + " ") != -1) {
            if (firstHTML != '') {
                selector = firstHTML + " " + selector;
            }

            return selector;
        }

        selector = "YPIREFIX" + selector;
        selector = selector.replace(/YPIREFIXbody /g, 'body.' + prefix + " ");
        selector = selector.replace("YPIREFIX", "");

        // If class added, return.
        if (selector.indexOf("body." + prefix + " ") != -1) {
            if (firstHTML != '') {
                selector = firstHTML + " " + selector;
            }

            return selector;
        }

        if (selector.indexOf(" body ") == -1 || selector.indexOf(" body.") == -1) {
            selector = "body." + prefix + " " + selector;
        }

        if (firstHTML != '') {
            selector = firstHTML + " " + selector;
        }

        return selector;

    }


    /* ---------------------------------------------------- */
    /* Disable history shift mouse.                         */
    /* ---------------------------------------------------- */
    mainDocument.keydown(function(e){

        var tag = e.target.tagName.toLowerCase();

        if(tag != 'input' && tag != 'textarea'){
        
            if (e.shiftKey && (e.which == '61' || e.which == '107' || e.which == '173' || e.which == '109'  || e.which == '187'  || e.which == '189')){
                    e.preventDefault();
            }

        }

    });


    /* ---------------------------------------------------- */
    /* Disable shift + scroll event.                        */
    /* ---------------------------------------------------- */
    mainDocument.bind('mousewheel DOMMouseScroll', function (e) {
        if (e.shiftKey) {
           e.preventDefault();
        }
    });


    /* ---------------------------------------------------- */
    /* Download from Unsplash and upload to WordPress       */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-unsplash-list > span > i", function(){

        var el = $(this);

        // Clear interval
        clearInterval(window.ypLocalUploader);

        // Not active on Demo Mode
        if(mainBody.hasClass("yp-yellow-pencil-demo-mode")){
            return false;
        }

        // Update loader
        var k = 0;
        window.ypLocalUploader = setInterval(function(){

            k++;

            if(k % 2 == 0){
                el.text("Upload.");
                el.css("padding-left", "0px");
            }else{
                el.text("Upload..");
                el.css("padding-left", "3px");
            }

        }, 200);
        
        $.post(ajaxurl,{
            action: "yp_unsplash_api",
            yp_link: $("#yp-background-image").val(),
            yp_id: el.parent().attr('data-id')
        }).done(function(data){

            // Succesful
            if(data.indexOf("http") != -1){

                // Set local URL
                el.parent().parent().parent().parent().parent().find(".yp-input").val(data).trigger("keyup");

                // Disable unsplash section
                $(".yp-unsplash-btn.active").trigger("click");

                // Set as local
                el.parent().attr("data-local", data);

            }else{
                ypMessage({title: lang.sorry,text: data,animation: false,customClass: "editor-style-ok"});
            }

        // Done fail anything
        }).complete(function(){
            clearInterval(window.ypLocalUploader);
            el.text("Upload");
            el.css("padding-left", "0px");
        });

        return false;

    });


    /* ---------------------------------------------------- */
    /* Unsplash Loader API                                  */
    /* ---------------------------------------------------- */
    window.glblUnsplashIndex = 0;
    function unsplash_loader(page){

        var query, url, eacher;

        query = $("#unsplash-search").val();
        if(query.trim() == ''){
            query = null;
        }

        var extraClasses = "";

        // Checker
        window.getJsonNow = true;

        if(query != null){
            url = "https://api.unsplash.com/search/photos";
        }else{
            url = "https://api.unsplash.com/photos";
        }

        // Add Client ID
        url += "?client_id=5746b12f75e91c251bddf6f83bd2ad0d658122676e9bd2444e110951f9a04af8";

        // Add Search Term
        if(query != null){
            url += "&query=" + query;
        }

        // Add Page No
        if(page != null){
            url += "&page="+page;
        }

        // Print
        $.getJSON(url, function(result){

            // No result
            if(result.total == 0){
                $(".yp-unsplash-list").addClass("no-result");
            }else{
                $(".yp-unsplash-list").removeClass("no-result");
            }

            if(query != null){
                eacher = result["results"];
            }else{
                eacher = result;
            }

            var thumb;
            $.each(eacher, function(i, v){

                // Thumb
                thumb = v.urls.thumb;

                // Add
                $(".yp-unsplash-list").append("<span style='background-color:"+v.color+";' data-id='"+v.id+"' data-full='"+v.urls.full+"' data-regular='"+v.urls.regular+"' data-small='"+v.urls.small+"' data-thumb='"+v.urls.thumb+"' "+extraClasses+"><i>Upload</i></span>");

            });

            // let next one
            window.getJsonNow = false;

            // load images
            unsplash_image_loader();

        }).fail(function() {
            show_notification("Could Not Load Json library. (Unsplash API)", "jsonError");
        });

    }


    var unsplashSearchTimer;
    $("#unsplash-search").on("keyup", function(){

        window.glblUnsplashIndex = 0;

        clearTimeout(unsplashSearchTimer);
        unsplashSearchTimer = setTimeout(function(){
            $(".yp-unsplash-list").empty();
            unsplash_loader(null);
        }, 400);

    });


    /* ---------------------------------------------------- */
    /* Unsplash Image Select Click                          */
    /* ---------------------------------------------------- */
    $(document).on("click", ".yp-unsplash-list > span", function(){

        // Variables
        var el = $(this);
        var raw;

        // If already loaded, upload local server on click
        if(el.hasClass("active") && el.hasClass("unsplash-img-loading") == false){
            el.find("i").trigger("click");
            return false;
        }

        // Dedect ideal image size for the target element.
        if(get_selected_element().width() < 1080 && get_selected_element().outerWidth() != iframeBody.width()){
            raw = el.attr("data-regular");
        }else{
            raw = el.attr("data-full");
        }

        // Use local if available
        if(el.attr("data-local") != null && el.attr("data-local") != undefined){
            raw = el.attr("data-local");
        }

        // update value
        el.parent().parent().parent().parent().find(".yp-input").val(raw).trigger("keyup");

        // delete loader from others
        $(".yp-unsplash-list > span.unsplash-img-loading").removeClass("unsplash-img-loading");
        el.attr("data-content", "1%");

        // Start loader
        var currentLoading = 1;
        el.addClass("unsplash-img-loading");

        iframeBody.find("#unsplash-img-loader").remove();
        iframeBody.append("<img src='"+raw+"' id='unsplash-img-loader' />");

        // follow loading
        iframeBody.find("#unsplash-img-loader").on('load', function() {
            
            // When ready, stop loader
            currentLoading = 100;
            el.attr("data-content", currentLoading+"%");
            clearTimeout(window.unsplashLoaderIn);

            // Wait to show 100%
            setTimeout(function(){

                // Remove loader
                el.removeClass("unsplash-img-loading");

                // active it
                $(".yp-unsplash-list > span.active,.yp-gradient-demo.active,.yp_bg_assets.active").removeClass("active");
                el.addClass("active");

            }, 500);

        });

        // Clear
        clearInterval(window.unsplashLoaderIn);

        // update every 50ms for show loading processer
        window.unsplashLoaderIn = setInterval(function(){

            var bonus = 8;

            if(currentLoading > 97){
                bonus = 1.1;
            }else if(currentLoading > 95){
                bonus = 1.2;
            }else if(currentLoading > 90){
                bonus = 1.3;
            }else if(currentLoading > 80){
                bonus = 1.4;
            }else if(currentLoading > 70){
                bonus = 1.5;
            }else if(currentLoading > 60){
                bonus = 1.6;
            }else if(currentLoading > 50){
                bonus = 1.7;
            }else if(currentLoading > 40){
                bonus = 1.8;
            }else if(currentLoading > 30){
                bonus = 1.9;
            }else if(currentLoading > 20){
                bonus = 2;
            }

            // Max 99% until load
            if(currentLoading != 99){
                currentLoading += Math.floor(Math.random() * bonus);
            }

            // Updating
            el.attr("data-content", currentLoading+"%");

        }, 100);

        // delete bg image demo shower
        $(".yp-background-image-show").remove();

    });


    /* ---------------------------------------------------- */
    /* Unsplash Scroll                                      */
    /* ---------------------------------------------------- */
    $(".yp-unsplash-list").on("scroll", function(){
        unsplash_load_more();
        unsplash_image_loader();
    });


    /* ---------------------------------------------------- */
    /* Unsplash Image And load more API                     */
    /* ---------------------------------------------------- */
    function unsplash_image_loader(){

        // Load near to viewport
        $(".yp-unsplash-list > span:in-viewport").each(function(){

            $(this).css("background-image","url(" + $(this).attr("data-thumb") + ")");

        });

    }


    function unsplash_load_more(){

        // If last 4 item in viewport, continue to load
        if($(".yp-unsplash-list > span:nth-last-child(-n+4):in-viewport").length > 0){

            var len = $(".yp-unsplash-list > span").length;

            var nextPage = (len/10)+1;

            if(window.getJsonNow == false){
                unsplash_loader(nextPage);
            }

        }

    }


    /* ---------------------------------------------------- */
    /* Default Unsplash Loader after 2s                     */
    /* ---------------------------------------------------- */
    setTimeout(function(){


        /* ---------------------------------------------------- */
        /* Find all dynamic id and classes                      */
        /* ---------------------------------------------------- */
        $.post(ajaxurl, {

            action: "yp_ajax_detect_dynamic_id_class",
            yp_page_content: iframe.find("html").html(),
            yp_page_href: $.urlParam('href'),
            yp_page_out: $.urlParam('yp_out')

        }).done(function(data){

            // must be valid
            if(isUndefined(data)){
                return false;
            }

            // min 2 char
            if(data.length < 2){
                return false;
            }

            // parse Json data
            var dataID = $.parseJSON(data)[0];
            var dataClass = $.parseJSON(data)[1];

            // Filter some dynamic editor classes
            var ypList = ['yellow-pencil-frame-css','yellow-pencil-animate-css','yp-styles-area','yellow-pencil-canvas','yellow-pencil-focus-canvas','yellow-pencil-other-canvas','yellow-pencil-extra-canvas','yp-animate-data','yp-yellow-pencil','yp-inline-data'];

            // Convert json to Array
            dataID = $.map(dataID, function(value, index) {return [value];});
            dataClass = $.map(dataClass, function(value, index) {return [value];});

            // Filter ypList - ID
            for(var i = 0; i < dataID.length; i++){
                if(ypList.indexOf(dataID[i]) != -1){
                    delete dataID[i];
                }
            }

            // Filter ypList - Class
            for(i = 0; i < dataClass.length; i++){
                if(ypList.indexOf(dataClass[i]) != -1){
                    delete dataClass[i];
                }
            }

            // cache this data to an window variable
            window.idList = dataID.filter(Boolean);
            window.ClassList = dataClass.filter(Boolean);

        });


        /* ---------------------------------------------------- */
        /* Load first page of unsplash                          */
        /* ---------------------------------------------------- */
        unsplash_loader(1);


    }, 1000);

    // Update iframe at the end.
    draw_iframe();

    // Footer javascript hook
    yp_js_hook();

    // YellowPencil functions.

}(jQuery));